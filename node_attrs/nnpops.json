{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/430fe686-e0cd-4021-8c77-f8fc343e0c3a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/929255222.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch111"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/936373221.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1007606328.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "nnpops",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/openmm/NNPOps",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "High performance implementations of operations used in Neural Network Potentials"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*"
   ],
   "number": "5",
   "rpaths": [
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib"
   ],
   "string": "cuda110py310h1234567_5"
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry"
   ]
  },
  "package": {
   "name": "nnpops",
   "version": "0.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest"
   ],
   "run": [
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*"
   ]
  },
  "source": {
   "sha256": "0d770b1b6d48a6d76e6dce9b3da996da27a3767e6a0548bb5921d49c65adb635",
   "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.2.tar.gz"
  },
  "test": {
   "imports": [
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/openmm/NNPOps",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "High performance implementations of operations used in Neural Network Potentials"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*"
   ],
   "number": "5",
   "rpaths": [
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.7/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/lib/python3.10/site-packages/torch/lib"
   ],
   "string": "cuda110py310h1234567_5"
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry",
    "mikemhenry"
   ]
  },
  "package": {
   "name": "nnpops",
   "version": "0.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest"
   ],
   "run": [
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*"
   ]
  },
  "source": {
   "sha256": "0d770b1b6d48a6d76e6dce9b3da996da27a3767e6a0548bb5921d49c65adb635",
   "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.2.tar.gz"
  },
  "test": {
   "imports": [
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI"
   ]
  }
 },
 "name": "nnpops",
 "new_version": "0.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "nnpops"
  ]
 },
 "pinning_version": "2022.07.25.08.01.08",
 "pre_pr_migrator_attempts": {
  "pytorch113": 25
 },
 "pre_pr_migrator_status": {
  "pytorch113": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3894777875\">bot CI job</a>): main: ['linux_64_cuda_compiler_version11.0cxx_compiler_version9python3.10.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.0cxx_compiler_version9python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.0cxx_compiler_version9python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.1cxx_compiler_version10python3.10.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.1cxx_compiler_version10python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.1cxx_compiler_version10python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n']"
 },
 "raw_meta_yaml": "{% set name = \"nnpops\" %}\n{% set version = \"0.2\" %}\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/NNPOps/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 0d770b1b6d48a6d76e6dce9b3da996da27a3767e6a0548bb5921d49c65adb635\n\nbuild:\n  skip: true  # [(not linux) or (cuda_compiler_version in (undefined, 'None', \"10.2\"))]\n  number: 5\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - '*/libcuda.*'  # [linux64]\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None', 10.2)]\n    - sysroot_linux-64  2.17  # [linux64]\n    - make\n    - cmake\n  host:\n    - python\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n    - torchani\n    - mdtraj\n    - pytest\n  run:\n    - python\n    - torchani\n  run_constrained:\n    # 2022/02/05 hmaarrfk\n    # While conda packaging seems to allow us to specify\n    # constraints on the same package in different lines\n    # the resulting package doesn't have the ability to\n    # be specified in multiples lines\n    # This makes it tricky to use run_exports\n    # we add the GPU constraint in the run_constrained\n    # to allow us to have \"two\" constraints on the\n    # running package\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - NNPOps\n    - NNPOps.OptimizedTorchANI\n\nabout:\n  home: https://github.com/openmm/NNPOps\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: \"High performance implementations of operations used in Neural Network Potentials\"\n\nextra:\n  recipe-maintainers:\n    - mikemhenry\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "make",
   "mdtraj",
   "pytest",
   "python",
   "pytorch",
   "sysroot_linux-64",
   "torchani"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64  2.17"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.2.tar.gz",
 "version": "0.2"
}