{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "scisweeper",
 "hash_type": "sha256",
 "name": "scisweeper",
 "new_version": "0.0.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "scisweeper"
  ]
 },
 "raw_meta_yaml": "{% set name = \"scisweeper\" %}\n{% set version = \"0.0.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: ea377b2f5c4de74dddeb824c7b87aae5e1ee376c9e5392f2b8b42d42cb0df2a1\n\nbuild:\n  number: 1\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  noarch: python\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - pip\n    - numpy\n    - pandas\n    - pysqa >=0.0.3\n    - h5io\n    - pyfileindex\n    - tqdm\n\ntest:\n  imports:\n    - scisweeper\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/scisweeper/scisweeper\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'scientific parameter sweeper, with easy debugging capabilities and an interface for most scientific queuing systems.'\n\n  description: |\n    scisweeper is a utility for parameter sweeps in a scientific environment. \n    By defining the write_input and collect_output function, as well as a \n    link to the executable the users can link scisweeper to their own code. \n    Afterwards scisweeper can execute the parameter sweep either locally \n    using a given number of parallel threads or submit the individual \n    calculations to a queuing system like LFS, MOAB, SGE, SLURM, or TORQUE \n    using the built-in interface to pysqa. After the calculations are \n    finished the results are summarized in a pandas.DataFrame, which makes \n    them easily accessible for machine learning tools like tensorflow or \n    pytorch. Coming from a scientific environment scisweeper was develop \n    with a focus on debugging. Broken jobs can be identified, executed again \n    manually or deleted and in case you need to update the collect_output \n    function there is no need to execute the calculations again, the output \n    can be parsed separatly to update the results in the pandas.DataFrame.\n  doc_url: https://github.com/scisweeper/scisweeper\n  dev_url: https://github.com/scisweeper/scisweeper\n\nextra:\n  recipe-maintainers:\n    - jan-janssen\n",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/s/scisweeper/scisweeper-0.0.2.tar.gz",
 "version": "0.0.2"
}