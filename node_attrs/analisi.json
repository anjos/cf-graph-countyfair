{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/593807745.json"
   },
   "data": {
    "bot_rerun": 1615904889.9635456,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/593844119.json"
   },
   "data": {
    "bot_rerun": 1616603504.279372,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/593845985.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/593963228.json"
   },
   "data": {
    "bot_rerun": 1616603504.2796428,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/599917062.json"
   },
   "data": {
    "bot_rerun": 1616628380.7626805,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/599961080.json"
   },
   "data": {
    "bot_rerun": 1616622662.990926,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/600115315.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/600297240.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/677501344.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/677788475.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/690268141.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/5342aa6e-4c63-4796-a519-5b46d64121b4.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/780001927.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1053825693.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 3,
    "migrator_version": 0,
    "name": "boost1780"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1112338240.json"
   },
   "data": {
    "bot_rerun": 1668766913.9803782,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1127444413.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "analisi",
 "name": "analisi",
 "new_version": "3.1",
 "new_version_attempts": {
  "0.3.0": 1,
  "3.1": 0
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "analisi"
  ]
 },
 "pinning_version": "2022.11.18.09.29.52",
 "raw_meta_yaml": "{% set name = \"analisi\" %}\n{% set version = \"0.5.0\" %}\n{% set build = 0 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/rikigigi/analisi.git\n  git_rev: v{{ version }}\n  git_depth: 1\n\n\nbuild:\n  number: {{ build }}\n  skip: true  # [ python_impl == 'pypy' ]\n  string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ mpi }}_{{ build }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ mpi }}                              # [build_platform != target_platform and not win]\n\n  host:\n    - python\n    - {{ mpi }}        # [ not win ]\n    - fftw\n    - boost-cpp\n    - eigen\n    - xdrfile          # [ not win ]\n  run:\n    - python\n    - {{ mpi }}        # [ not win ]\n    - fftw\n    - boost-cpp\n    - xdrfile          # [ not win ]\n    - matplotlib-base\n    - numpy\n    - scipy\n\ntest:\n  imports:\n    - pyanalisi\n  requires:\n    - pytest\n    - pandas\n    - pytest-regressions\n    - matplotlib\n    - numpy\n    - scipy\n    - testbook\n    - k3d\n  source_files:\n    - tests\n    - tools\n    - notebooks\n  commands:\n    - export OMPI_MCA_plm=isolated                          # [not win and mpi == \"openmpi\"]\n    - export OMPI_MCA_btl_vader_single_copy_mechanism=none  # [not win and mpi == \"openmpi\"]\n    - export OMPI_MCA_rmaps_base_oversubscribe=yes          # [not win and mpi == \"openmpi\"]\n    - export OMPI_ALLOW_RUN_AS_ROOT=1                       # [not win and mpi == \"openmpi\"]\n    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1               # [not win and mpi == \"openmpi\"]\n    - analisi_serial --help                                 # [not win]\n    - mpiexec -n 1 analisi --help                           # [not win]\n    - pytest -sv tests\nabout:\n  home: https://github.com/rikigigi/analisi\n  license: GPL-2.0-or-later\n  license_file:\n    - LICENSE\n\n  summary: 'analisi: your Swiss Army Knife of molecular dynamics analysis'\n  description: |\n    analisi is a framework for analyzing molecular dynamics simulations.\n    It can read lammps's binary format (other formats can be converted)\n    and evaluate averages over the ergodic and equilibrated trajectory. \n    Very heavy calculation can be performed in a parallel way using \n    MPI, while multithreading is implemented also in the python interface.\n    Example calculations are Steinhard (averaged) local order parameters,\n    full GK integral calculation with block analysis, traditional mean\n    square displacement and a lot more...\n\n  dev_url: https://github.com/rikigigi/analisi\n\nextra:\n  recipe-maintainers:\n    - rikigigi\n",
 "smithy_version": "3.21.3",
 "strong_exports": false,
 "url": null,
 "version": "0.5.0"
}