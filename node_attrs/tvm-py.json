{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/443597044.json"
   },
   "data": {
    "bot_rerun": 1593812439.2295845,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/443601709.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/444202649.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/447623261.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500896043.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/518881509.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/559530896.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/776205712.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/788281387.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "tvm-py",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Apache TVM (incubating) is a compiler stack for deep learning systems.\nIt is designed to close the gap between the productivity-focused deep\nlearning frameworks, and the performance- and efficiency-focused hardware\nbackends. TVM works with deep learning frameworks to provide end to end\ncompilation to different backends.\n",
   "dev_url": "https://github.com/apache/incubator-tvm",
   "doc_url": "https://tvm.apache.org/docs/",
   "home": "https://tvm.apache.org/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Open Deep Learning Compiler Stack"
  },
  "build": {
   "number": "1",
   "script": [
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani"
   ]
  },
  "package": {
   "name": "tvm-py",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0"
   ]
  },
  "source": {
   "sha256": "84d825f25c9cfc7cf76359c41d4cd6a6dd53fd247f6f280c45268ce6835d2a10",
   "url": "https://github.com/apache/incubator-tvm/archive/v0.7.0.tar.gz"
  },
  "test": {
   "imports": [
    "tvm",
    "tvm",
    "tvm",
    "tvm"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "attrs",
    "cython",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "setuptools",
    "typed-ast"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "attrs",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "typed-ast"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Apache TVM (incubating) is a compiler stack for deep learning systems.\nIt is designed to close the gap between the productivity-focused deep\nlearning frameworks, and the performance- and efficiency-focused hardware\nbackends. TVM works with deep learning frameworks to provide end to end\ncompilation to different backends.\n",
   "dev_url": "https://github.com/apache/incubator-tvm",
   "doc_url": "https://tvm.apache.org/docs/",
   "home": "https://tvm.apache.org/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Open Deep Learning Compiler Stack"
  },
  "build": {
   "number": "1",
   "script": [
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani"
   ]
  },
  "package": {
   "name": "tvm-py",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0"
   ]
  },
  "source": {
   "sha256": "84d825f25c9cfc7cf76359c41d4cd6a6dd53fd247f6f280c45268ce6835d2a10",
   "url": "https://github.com/apache/incubator-tvm/archive/v0.7.0.tar.gz"
  },
  "test": {
   "imports": [
    "tvm",
    "tvm",
    "tvm",
    "tvm",
    "tvm",
    "tvm",
    "tvm",
    "tvm"
   ]
  }
 },
 "name": "tvm-py",
 "new_version": "0.8.0",
 "new_version_attempts": {
  "0.6.1": 1,
  "0.7.0": 1,
  "0.8.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Apache TVM (incubating) is a compiler stack for deep learning systems.\nIt is designed to close the gap between the productivity-focused deep\nlearning frameworks, and the performance- and efficiency-focused hardware\nbackends. TVM works with deep learning frameworks to provide end to end\ncompilation to different backends.\n",
   "dev_url": "https://github.com/apache/incubator-tvm",
   "doc_url": "https://tvm.apache.org/docs/",
   "home": "https://tvm.apache.org/",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "Open Deep Learning Compiler Stack"
  },
  "build": {
   "number": "1",
   "script": [
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv",
    "cd python",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python setup.py install -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani",
    "marcelotrevisani"
   ]
  },
  "package": {
   "name": "tvm-py",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "cython",
    "numpy",
    "setuptools",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0",
    "python",
    "numpy",
    "scipy",
    "psutil",
    "decorator",
    "attrs",
    "typed-ast",
    "libtvm 0.7.0"
   ]
  },
  "source": {
   "sha256": "84d825f25c9cfc7cf76359c41d4cd6a6dd53fd247f6f280c45268ce6835d2a10",
   "url": "https://github.com/apache/incubator-tvm/archive/v0.7.0.tar.gz"
  },
  "test": {
   "imports": [
    "tvm",
    "tvm",
    "tvm",
    "tvm"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "attrs",
    "cython",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "setuptools",
    "typed-ast"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "attrs",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "typed-ast"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "tvm-py"
  ]
 },
 "pinning_version": "2021.11.23.20.00.37",
 "pre_pr_migrator_attempts": {
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "python39": "not solvable: master: ['linux_64_numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package numpy-1.19.0-py36h7314795_0 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'osx_64_numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package numpy-1.19.0-py36he764e95_0 requires python_abi 3.6 *_pypy36_pp73, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"tvm-py\" %}\n{% set version = \"0.7.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/apache/incubator-tvm/archive/v{{ version }}.tar.gz\n  sha256: 84d825f25c9cfc7cf76359c41d4cd6a6dd53fd247f6f280c45268ce6835d2a10\n\nbuild:\n  number: 1\n  script:\n    - cd python\n    - {{ PYTHON }} setup.py install -vv\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('c') }}\n  host:\n    - libtvm {{ version }}\n    - python\n    - cython\n    - numpy\n    - setuptools\n    - scipy\n    - psutil\n    - decorator\n    - attrs\n    - typed-ast\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - scipy\n    - psutil\n    - decorator\n    - attrs\n    - typed-ast\n    - libtvm {{ version }}\n\ntest:\n  imports:\n    - tvm\n\nabout:\n  home: https://tvm.apache.org/\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Open Deep Learning Compiler Stack\n  description: |\n    Apache TVM (incubating) is a compiler stack for deep learning systems.\n    It is designed to close the gap between the productivity-focused deep\n    learning frameworks, and the performance- and efficiency-focused hardware\n    backends. TVM works with deep learning frameworks to provide end to end\n    compilation to different backends.\n  doc_url: https://tvm.apache.org/docs/\n  dev_url: https://github.com/apache/incubator-tvm\n\nextra:\n  recipe-maintainers:\n    - marcelotrevisani\n",
 "req": {
  "__set__": true,
  "elements": [
   "attrs",
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "decorator",
   "libtvm",
   "numpy",
   "psutil",
   "python",
   "scipy",
   "setuptools",
   "typed-ast"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "attrs",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "setuptools",
    "typed-ast"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "attrs",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "decorator",
    "libtvm",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "typed-ast"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "attrs",
    "cython",
    "decorator",
    "libtvm 0.7.0",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "setuptools",
    "typed-ast"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "attrs",
    "decorator",
    "libtvm 0.7.0",
    "numpy",
    "psutil",
    "python",
    "scipy",
    "typed-ast"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/apache/incubator-tvm/archive/v0.7.0.tar.gz",
 "version": "0.7.0"
}