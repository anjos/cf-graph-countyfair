{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/837574501.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "screen",
 "hash_type": "sha256",
 "name": "screen",
 "new_version": "4.9.0",
 "new_version_attempts": {
  "4.9.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "screen"
  ]
 },
 "pinning_version": "2022.02.01.15.47.50",
 "raw_meta_yaml": "{% set name = \"screen\" %}\n{% set version = \"4.8.0\" %}\n{% set version_printed = \"4.08.00\" %}  # what screen -v prints\n{% set sha256 = \"6e11b13d8489925fde25dfb0935bf6ed71f9eb47eff233a181e078fde5655aa1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://ftp.gnu.org/gnu/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1\n  skip: True  # [not unix]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - make\n    - texinfo\n  host:\n    - ncurses\n  run:\n    - ncurses\n\ntest:\n  commands:\n    - screen -v | grep 'Screen version {{ version_printed }}'\n\nabout:\n  home: https://www.gnu.org/software/screen/\n  license: GPL-3.0-only\n  license_family: GPL\n  license_file: COPYING\n  summary: |\n    Screen is a full-screen window manager that multiplexes a physical terminal between several processes, \n    typically interactive shells\n\n  description: |\n    Screen is a full-screen window manager that multiplexes a physical\n    terminal between several processes, typically interactive\n    shells. Each virtual terminal provides the functions of the DEC\n    VT100 terminal and, in addition, several control functions from\n    the ANSI X3.64 (ISO 6429) and ISO 2022 standards (e.g.,\n    insert/delete line and support for multiple character sets). There\n    is a scrollback history buffer for each virtual terminal and a\n    copy-and-paste mechanism that allows the user to move text regions\n    between windows. When screen is called, it creates a single window\n    with a shell in it (or the specified command) and then gets out of\n    your way so that you can use the program as you normally\n    would. Then, at any time, you can create new (full-screen) windows\n    with other programs in them (including more shells), kill the\n    current window, view a list of the active windows, turn output\n    logging on and off, copy text between windows, view the scrollback\n    history, switch between windows, etc. All windows run their\n    programs completely independent of each other. Programs continue\n    to run when their window is currently not visible and even when\n    the whole screen session is detached from the users terminal.\n    simplejson is a simple, fast, complete, correct and extensible\n    JSON <https://json.org> encoder and decoder for Python 2.5+ and\n    Python 3.3+. It is pure Python code with no dependencies, but\n    includes an optional C extension for a serious speed boost.\n  doc_url: https://www.gnu.org/software/screen/manual/screen.html\n  dev_url: https://savannah.gnu.org/git/?group=screen\n\nextra:\n  recipe-maintainers:\n    - notestaff\n",
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "url": "https://ftp.gnu.org/gnu/screen/screen-4.8.0.tar.gz",
 "version": "4.8.0"
}