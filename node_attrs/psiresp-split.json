{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/884949238.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/922233350.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "psiresp-split",
 "hash_type": "sha256",
 "name": "psiresp-split",
 "new_version": "0.4.2",
 "new_version_attempts": {
  "0.4.0": 1,
  "0.4.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "psiresp",
   "psiresp-base"
  ]
 },
 "pinning_version": "2022.04.28.12.57.13",
 "raw_meta_yaml": "{% set name = \"psiresp\" %}\n{% set version = \"0.3.2\" %}\n\npackage:\n  name: psiresp-split\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: e842cf5d662e788eb761cbde0c00ff35a732bb9ce7fd025a6063f90efdbe0563\n\nbuild:\n  number: 0\n\noutputs:\n  - name: psiresp-base\n    \n    build:\n      noarch: python\n    script: install_base.sh\n    \n    requirements:\n      host:\n        - python >=3.7,<3.10\n        - pip\n      run:\n        - python >=3.7\n        - qcelemental >=0.22.0\n        - numpy\n        - pydantic >=1.9\n        - scipy >=1.4\n        - tqdm\n    \n    test:\n      imports:\n      - psiresp\n      files:\n        - test_basic_psiresp.py\n      commands:\n        - python test_basic_psiresp.py\n\n  - name: psiresp\n    build:\n      noarch: python\n\n    requirements:\n      host:\n        - python >=3.7,<3.10\n        - pip\n      run:\n        - python >=3.7,<3.10\n        - geometric\n        - rdkit\n        - qcfractal >=0.15.8\n        - requests\n        - h5py <3.2\n        - {{ pin_subpackage('psiresp-base', exact=True) }}\n    \n    test:\n      imports:\n        - psiresp\n      files:\n        - test_rdkit_psiresp.py\n      commands:\n        - python test_rdkit_psiresp.py\n\n\nabout:\n  home: https://github.com/lilyminium/psiresp\n  license: LGPL-3.0-or-later\n  license_family: LGPL\n  license_file: LICENSE\n  summary: 'Calculate RESP charges with Psi4'\n  description: |\n    PsiRESP is a package for calculating atomic partial charges\n    from restrained and unrestrained electrostatic potential fits.\n    The electrostatic potentials can be calculated using QCFractal\n    and Psi4, or provided.\n  doc_url: https://psiresp.readthedocs.io/\n  dev_url: https://github.com/lilyminium/psiresp\n\nextra:\n  recipe-maintainers:\n    - lilyminium\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/p/psiresp/psiresp-0.3.2.tar.gz",
 "version": "0.3.2"
}