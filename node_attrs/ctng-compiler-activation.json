{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/344307779.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/728834969.json"
   },
   "data": {
    "bot_rerun": 1631732236.6169667,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/739093215.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "RebuildBroken",
    "migrator_version": 2,
    "name": "rebuild-broken"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/743580340.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "RebuildBroken",
    "migrator_version": 3,
    "name": "rebuild-broken"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/956228117.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "linux_s390x": "linux_64"
  }
 },
 "feedstock_name": "ctng-compiler-activation",
 "name": "ctng-compiler-activation",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "binutils_linux-64",
   "binutils_linux-aarch64",
   "binutils_linux-ppc64le",
   "binutils_linux-s390x",
   "gcc",
   "gcc_bootstrap_linux-64",
   "gcc_bootstrap_linux-aarch64",
   "gcc_bootstrap_linux-ppc64le",
   "gcc_bootstrap_linux-s390x",
   "gcc_linux-64",
   "gcc_linux-aarch64",
   "gcc_linux-ppc64le",
   "gcc_linux-s390x",
   "gfortran",
   "gfortran_linux-64",
   "gfortran_linux-aarch64",
   "gfortran_linux-ppc64le",
   "gfortran_linux-s390x",
   "gxx",
   "gxx_linux-64",
   "gxx_linux-aarch64",
   "gxx_linux-ppc64le",
   "gxx_linux-s390x"
  ]
 },
 "pinning_version": "2022.06.02.10.52.40",
 "pre_pr_migrator_attempts": {
  "rebuild-broken": 1
 },
 "pre_pr_migrator_status": {
  "rebuild-broken": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1265438560\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1175, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 196, in run\n    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/broken_rebuild.py\", line 361, in migrate\n    self.set_build_number(os.path.join(recipe_dir, \"meta.yaml\"))\nNameError: name 'os' is not defined\n"
 },
 "raw_meta_yaml": "{% set min_runtime_version = 12 %}\n\npackage:\n  name: ctng-compiler-activation\n  version: {{ ctng_gcc }}\n\nsource:\n  path: .\n\nbuild:\n  number: 11\n  skip: True  # [not linux]\n\nrequirements:\n  build:\n    # this dep is for us to be able to use gcc -dumpmachine to get the CBUILD value\n    - gcc_impl_{{ target_platform }}\n    - shellcheck  # [not (aarch64 or ppc64le)]\n\noutputs:\n  - name: gcc_{{ ctng_target_platform }}\n    script: install-gcc.sh\n    requirements:\n      run:\n        - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*\n        - gcc_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n        # for activation of binutils env vars\n        - {{ pin_subpackage(\"binutils_\" ~ ctng_target_platform, exact=True) }}\n        - sysroot_{{ target_platform }}\n        - sysroot_{{ ctng_target_platform }}\n    run_exports:\n      strong:\n        - libgcc-ng >={{ min_runtime_version }}\n    test:\n      requires:\n        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }}\n      files:\n        - tests\n      commands:\n        - echo {{ ctng_target_platform_u }}\n        - echo {{ linux_machine }}\n        - ${CC} ${CFLAGS} -Wall tests/aligned_alloc.c -c -o c_aligned.o -v\n        - ${CC} ${LDFLAGS} c_aligned.o -o c_aligned     # [target_platform == ctng_target_platform]\n        - ./c_aligned                                   # [target_platform == ctng_target_platform]\n        # CONDA_BUILD_SYSROOT is defined for clang++ to find correct C++ headers, see issue 8\n        - test -z \"${CONDA_BUILD_SYSROOT+x}\" && echo \"CONDA_BUILD_SYSROOT is not set\" && exit 1\n        - test -d ${CONDA_BUILD_SYSROOT} || exit 1\n    about:\n      summary: GNU C Compiler (activation scripts)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gcc\n    script: install-symlinks.sh\n    build:\n      skip: True  # [target_platform != ctng_target_platform]\n    requirements:\n      - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*\n    run_exports:\n      strong:\n        - libgcc-ng >={{ min_runtime_version }}\n    test:\n      commands:\n        - ${PREFIX}/bin/gcc -v\n        - ${PREFIX}/bin/gcov -v\n    about:\n      summary: GNU C native compiler (symlinks)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gxx_{{ ctng_target_platform }}\n    script: install-g++.sh\n    requirements:\n      run:\n        - gxx_impl_{{ target_platform }} {{ ctng_gcc }}.*\n        - gxx_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n        # for activation of gcc env vars\n        - {{ pin_subpackage(\"gcc_\" ~ ctng_target_platform, exact=True) }}\n        # for activation of binutils env vars\n        - {{ pin_subpackage(\"binutils_\" ~ ctng_target_platform, exact=True) }}\n        - sysroot_{{ ctng_target_platform }}\n    test:\n      requires:\n        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }}\n      files:\n        - tests\n      commands:\n        - ${CXX} ${CXXFLAGS} -Wall tests/aligned_alloc.cpp -c -o cpp_aligned.o\n        - ${CXX} ${LDFLAGS} cpp_aligned.o -o cpp_aligned    # [target_platform == ctng_target_platform]\n        - ./cpp_aligned                                     # [target_platform == ctng_target_platform]\n        - test -z \"${CONDA_BUILD_SYSROOT+x}\" && echo \"CONDA_BUILD_SYSROOT is not set\" && exit 1\n        - test -d ${CONDA_BUILD_SYSROOT} || exit 1\n    run_exports:\n      strong:\n        # This should be a transitive dependency, but conda-build doesn't support those\n        - libstdcxx-ng >={{ min_runtime_version }}\n        # Because transitive run_exports do not work:\n        - libgcc-ng >={{ min_runtime_version }}\n    about:\n      summary: GNU C++ Compiler (activation scripts)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gxx\n    script: install-symlinks.sh\n    build:\n      skip: True  # [target_platform != ctng_target_platform]\n    requirements:\n      - gxx_impl_{{ target_platform }} {{ ctng_gcc }}.*\n      - gcc {{ ctng_gcc }}.*\n    run_exports:\n      strong:\n        - libstdcxx-ng >={{ min_runtime_version }}\n        # Because transitive run_exports do not work:\n        - libgcc-ng >={{ min_runtime_version }}\n    test:\n      commands:\n        - ${PREFIX}/bin/g++ -v\n        - ${PREFIX}/bin/gcc -v\n    about:\n      summary: GNU C++ native compiler (symlinks)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gfortran_{{ ctng_target_platform }}\n    script: install-gfortran.sh\n    requirements:\n      host:\n        # So that pin_compatible has something to work with:\n        - libgfortran{{ libgfortran_soname }} {{ ctng_gcc }}.*\n        - libgfortran-ng  {{ ctng_gcc }}.*\n      run:\n        - gfortran_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n        - gfortran_impl_{{ target_platform }} {{ ctng_gcc }}.*\n        # for activation of gcc env vars:\n        - {{ pin_subpackage(\"gcc_\" ~ ctng_target_platform, exact=True) }}\n        # for activation of binutils env vars:\n        - {{ pin_subpackage(\"binutils_\" ~ ctng_target_platform, exact=True) }}\n        - sysroot_{{ ctng_target_platform }}\n    run_exports:\n      strong:\n        - libgfortran{{ libgfortran_soname }} >={{ ctng_gcc }}\n        - libgfortran-ng\n        # Because transitive run_exports do not work:\n        - libgcc-ng >={{ min_runtime_version }}\n    test:\n      requires:\n        - cmake >=3.11  # [x86_64 or aarch64 or ppc64le]\n        - make          # [x86_64 or aarch64 or ppc64le]\n        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }}\n      commands:\n        - ${FC} --version\n        - pushd tests/fortomp\n        - sh test_fort.sh       # [target_platform == ctng_target_platform and (x86_64 or aarch64 or ppc64le)]\n      files:\n        - tests/fortomp/*\n    about:\n      summary: GNU Fortran Compiler (activation scripts)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gfortran\n    script: install-symlinks.sh\n    build:\n      skip: True  # [target_platform != ctng_target_platform]\n    requirements:\n      - gfortran_impl_{{ target_platform }} {{ ctng_gcc }}.*\n      - gcc_impl_{{ target_platform }} {{ ctng_gcc }}.*\n      - gcc {{ ctng_gcc }}.*\n    run_exports:\n      strong:\n        # Because transitive run_exports do not work:\n        - libgfortran{{ libgfortran_soname }} >={{ ctng_gcc }}\n        - libgfortran-ng\n        # Because transitive run_exports do not work:\n        - libgcc-ng >={{ min_runtime_version }}\n    test:\n      commands:\n        - ${PREFIX}/bin/gfortran -v\n        - ${PREFIX}/bin/gcc -v\n    about:\n      summary: GNU Fortran native compiler (symlinks)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: binutils_{{ ctng_target_platform }}\n    version: \"{{ ctng_binutils }}\"\n    script: install-binutils.sh\n    requirements:\n      run:\n        - binutils_impl_{{ ctng_target_platform }} {{ ctng_binutils }}.*\n        - sysroot_{{ target_platform }}\n        - sysroot_{{ ctng_target_platform }}\n    test:\n      requires:\n        - sysroot_{{ ctng_target_platform }} {{ conda_glibc_ver }}\n      commands:\n        - test -f $LD\n    about:\n      summary: The GNU Binutils are a collection of binary tools (activation scripts)\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: BSD-3-Clause\n      license_file: LICENSE\n\n  - name: gcc_bootstrap_{{ ctng_target_platform }}\n    version: \"{{ ctng_gcc }}\"\n    requirements:\n      host:\n        - binutils_impl_{{ ctng_target_platform }} {{ ctng_binutils }}.*\n        - gfortran_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n        - gxx_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n        - gcc_impl_{{ ctng_target_platform }} {{ ctng_gcc }}.*\n    build:\n      binary_relocation: False\n      detect_binary_files_with_prefix: False\n      always_include_files:\n        - bin/\n        - etc/\n        - lib64/\n        - lib/\n        - libexec/\n        - share/\n        - {{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu/\n    test:\n      commands:\n        - test -f $PREFIX/bin/{{ ctng_cpu_arch }}-{{ ctng_vendor }}-linux-gnu-cc\n    about:\n      summary: GCC bootstrap compilers for building deps\n      home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n      license: GPL\n      license_file: GPL_LICENSE\n\nabout:\n  summary: Activation scripts for gcc, g++, gfortran and binutils\n  home: https://github.com/conda-forge/ctng-compiler-activation-feedstock\n  license: BSD-3-Clause\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - isuruf\n    - beckermr\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": null,
 "version": "12.2.0"
}