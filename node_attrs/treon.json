{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1017872860.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "treon",
 "hash_type": "sha256",
 "name": "treon",
 "new_version": "0.1.4",
 "new_version_attempts": {
  "0.1.4": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "treon"
  ]
 },
 "pinning_version": "2022.08.04.07.32.40",
 "raw_meta_yaml": "{% set name = \"treon\" %}\n{% set version = \"0.1.4\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/treon-{{ version }}.tar.gz\n  sha256: 6c31a1701036ee8a746adcc9ca59640269c01e887ea13ccc675680d39705d4f4\n\nbuild:\n  number: 0\n  noarch: python\n  entry_points:\n    - treon = treon.treon:main\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=3.6\n  run:\n    - docopt\n    - jupyter\n    - jupyter_client\n    - nbconvert\n    - python >=3.6\n\ntest:\n  imports:\n    - treon\n  commands:\n    - pip check\n    - treon --help\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/reviewNB/treon\n  summary: Testing framework for Jupyter Notebooks\n  license: MIT\n  license_file: LICENSE\n  description: |\n    Treon allows you to run notebook top to bottom and flags execution errors.\n     It runs all unittests and doctests present in your notebook code cells. You\n     can start testing notebooks without writing a single line of test code.\n     Treon also enable multithreaded execution for quickly testing a set of\n     notebooks. It executes every Notebook in a fresh kernel to avoid hidden\n     state problems. Because treon is a command line tool itcan be used easily\n     in any Continuous Integration (CI) system.\n\n\nextra:\n  recipe-maintainers:\n    - thewchan\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/t/treon/treon-0.1.4.tar.gz",
 "version": "0.1.4"
}