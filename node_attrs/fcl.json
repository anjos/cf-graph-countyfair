{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/379332131.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/380434021.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485596606.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/495051187.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/614355109.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/731181007.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64"
  }
 },
 "feedstock_name": "fcl",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/fcl/geometry/shape/cylinder.h",
    "test -f $PREFIX/lib/pkgconfig/fcl.pc",
    "test -f $PREFIX/lib/libfcl${SHLIB_EXT}"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/fcl/geometry/shape/cylinder.h",
    "test -f $PREFIX/lib/pkgconfig/fcl.pc",
    "test -f $PREFIX/lib/libfcl${SHLIB_EXT}"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/fcl/geometry/shape/cylinder.h",
    "test -f $PREFIX/lib/pkgconfig/fcl.pc",
    "test -f $PREFIX/lib/libfcl${SHLIB_EXT}"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl",
    "fcl",
    "fcl",
    "fcl",
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro",
    "wolfv",
    "traversaro",
    "wolfv",
    "traversaro",
    "wolfv",
    "traversaro",
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap",
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap",
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap",
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap",
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap",
    "boost-cpp",
    "flann",
    "libccd",
    "octomap",
    "boost-cpp",
    "flann",
    "libccd",
    "octomap",
    "boost-cpp",
    "flann",
    "libccd",
    "octomap",
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch",
    "win2017_support.patch",
    "553.patch",
    "win2017_support.patch",
    "553.patch",
    "win2017_support.patch",
    "553.patch",
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": null
  }
 },
 "name": "fcl",
 "new_version": "0.7.0",
 "new_version_attempts": {
  "0.7.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/fcl/geometry/shape/cylinder.h",
    "test -f $PREFIX/lib/pkgconfig/fcl.pc",
    "test -f $PREFIX/lib/libfcl${SHLIB_EXT}"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "fcl"
  ]
 },
 "pinning_version": "2021.09.09.18.37.58",
 "raw_meta_yaml": "{% set name = \"fcl\" %}\n{% set version = \"0.7.0\" %}\n{% set sha256 = \"90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/flexible-collision-library/fcl/archive/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n  patches:\n    - win2017_support.patch\n    - 553.patch\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage(name, max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n  host:\n    - boost-cpp\n    - flann\n    - libode\n    - libccd\n    - eigen\n    - octomap\n  run:\n    - boost-cpp\n    - flann\n    - libccd\n    - octomap\n\ntest:\n  commands:\n    - test -f $PREFIX/include/fcl/geometry/shape/cylinder.h  # [unix]\n    - test -f $PREFIX/lib/pkgconfig/fcl.pc  # [unix]\n    - test -f $PREFIX/lib/libfcl${SHLIB_EXT}  # [unix]\n\nabout:\n  home: https://github.com/flexible-collision-library/fcl\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: The flexible collision library (FCL) is a library for performing proximity queries.\n  description: |\n    FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n    - Collision detection: detecting whether the two models overlap, and\n      optionally, all of the triangles that overlap.\n    - Distance computation: computing the minimum distance between a pair of\n      models, i.e., the distance between the closest pair of points.\n    - Tolerance verification: determining whether two models are closer or\n      farther than a tolerance distance.\n    - Continuous collision detection: detecting whether the two moving\n      models overlap during the movement, and optionally, the time of\n      contact.\n    - Contact information: for collision detection and continuous collision\n      detection, the contact information (including contact normals and\n      contact points) can be returned optionally.\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - traversaro\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost-cpp",
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "eigen",
   "flann",
   "libccd",
   "libode",
   "make",
   "octomap"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.12",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz",
 "version": "0.7.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "FCL is a library for performing three types of proximity queries on a pair of geometric models composed of triangles.\n\n- Collision detection: detecting whether the two models overlap, and\n  optionally, all of the triangles that overlap.\n- Distance computation: computing the minimum distance between a pair of\n  models, i.e., the distance between the closest pair of points.\n- Tolerance verification: determining whether two models are closer or\n  farther than a tolerance distance.\n- Continuous collision detection: detecting whether the two moving\n  models overlap during the movement, and optionally, the time of\n  contact.\n- Contact information: for collision detection and continuous collision\n  detection, the contact information (including contact normals and\n  contact points) can be returned optionally.\n",
   "home": "https://github.com/flexible-collision-library/fcl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "The flexible collision library (FCL) is a library for performing proximity queries."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "fcl"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "wolfv",
    "traversaro"
   ]
  },
  "package": {
   "name": "fcl",
   "version": "0.7.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake"
   ],
   "host": [
    "boost-cpp",
    "flann",
    "libode",
    "libccd",
    "eigen",
    "octomap"
   ],
   "run": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "source": {
   "patches": [
    "win2017_support.patch",
    "553.patch"
   ],
   "sha256": "90409e940b24045987506a6b239424a4222e2daf648c86dd146cbcb692ebdcbc",
   "url": "https://github.com/flexible-collision-library/fcl/archive/0.7.0.tar.gz"
  },
  "test": {
   "commands": null
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "eigen",
    "flann",
    "libccd",
    "libode",
    "octomap"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "flann",
    "libccd",
    "octomap"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}