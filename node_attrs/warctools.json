{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/217774372.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "warctools",
 "hash_type": "sha256",
 "name": "warctools",
 "new_version": "4.10.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "warctools"
  ]
 },
 "pinning_version": "2018.09.20",
 "raw_meta_yaml": "{% set version = \"4.10.0\" %}\n\npackage:\n  name: warctools\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/w/warctools/warctools-{{ version }}.tar.gz\n  sha256: ce0c6e274db8ac8810f7c97b3943e8e8deadbc3f5c982db77cddaae2d2ae6170\n\nbuild:\n  number: 1\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv\"\n  entry_points:\n    - warcdump=hanzo.warcdump:run\n    - arc2warc=hanzo.arc2warc:run\n    - warcextract=hanzo.warcextract:run\n    - warcfilter=hanzo.warcfilter:run\n    - warcindex=hanzo.warcindex:run\n    - warclinks=hanzo.warclinks:run\n    - warcvalid=hanzo.warcvalid:run\n    - warc2warc=hanzo.warc2warc:run\n    - warcpayload=hanzo.warcpayload:run\n\nrequirements:\n  host:\n    - python >=3.4,<3.5\n    - pip\n  run:\n    - python >=3.4,<3.5\n    - setuptools\n\ntest:\n  imports:\n    - hanzo\n    - hanzo.httptools\n    - hanzo.warctools\n\n  commands:\n    - warcdump --help\n    - arc2warc --help\n    - warcextract --help\n    - warcfilter --help\n    - warcindex --help\n    - warclinks --help\n    - warcvalid --help\n    - warc2warc --help\n    - warcpayload --help\n\nabout:\n  home: https://github.com/internetarchive/warctools\n  license: MIT\n  #license_file: No MANIFEST.in in source\n  license_family: MIT\n  summary: 'Command line tools and libraries for handling and manipulating WARC files (and HTTP contents)'\n  dev_url: https://github.com/internetarchive/warctools\n\nextra:\n  recipe-maintainers:\n    - pmlandwehr\n",
 "smithy_version": "3.1.12",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/w/warctools/warctools-4.10.0.tar.gz",
 "version": "4.10.0"
}