{
 "PRed": [
  {
   "PR": {
    "id": "9e55e783-7292-47e0-a6d1-feb835e12946",
    "merged_at": "never issued",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/425317952.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.6.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/426714583.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.6.4.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/440849310.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51106"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503837930.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "head": {
     "ref": "<this_is_not_a_branch>"
    },
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.6.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/642984136.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/712850943.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.6.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "digital_rf",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "name": "digital_rf",
 "new_version": "2.6.7",
 "new_version_attempts": {
  "2.6.4": 1,
  "2.6.4.3": 1,
  "2.6.6": 1,
  "2.6.7": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make",
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "digital_rf"
  ]
 },
 "pinning_version": "2021.08.14.10.30.44",
 "pre_pr_migrator_status": {
  "hdf51121": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1145797988\">bot CI job</a>): master: ['linux_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides hdf5 1.8.15* needed by h5py-2.6.0-np110py27_3\\n', 'linux_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - package h5py-2.7.1-py27_2 requires hdf5 1.10.1, but none of the providers can be installed\\n', 'linux_aarch64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - package h5py-2.10.0-mpi_mpich_py36h18f1471_2 requires hdf5 >=1.10.5,<1.10.6.0a0 mpi_mpich_*, but none of the providers can be installed\\n', 'linux_aarch64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - package h5py-3.3.0-mpi_mpich_py37h09c3de7_1 requires python_abi 3.7.* *_cp37m, but none of the providers can be installed\\n', 'linux_ppc64le_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - package h5py-2.10.0-mpi_mpich_py36h4d1d59f_2 requires hdf5 >=1.10.5,<1.10.6.0a0 mpi_mpich_*, but none of the providers can be installed\\n', 'osx_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides hdf5 1.8.15* needed by h5py-2.6.0-np110py27_3\\n', 'osx_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - package h5py-2.10.0-mpi_mpich_py38h36f4241_2 requires hdf5 >=1.10.5,<1.10.6.0a0 mpi_mpich_*, but none of the providers can be installed\\n', 'win_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides numpy 1.10* needed by h5py-2.6.0-np110py27_3\\n']",
  "python39": "not solvable: ['linux_64_numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package gnuradio-core-3.8.0.0-py27h5a6970a_0 requires numpy, but none of the providers can be installed\\n', 'osx_64_numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package gnuradio-core-3.8.0.0-py27h3f0aa23_0 requires numpy, but none of the providers can be installed\\n', 'win_64_numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package gnuradio-core-3.8.0.0-py36h7bbc81b_0 requires python >=3.6,<3.7.0a0, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set version = \"2.6.7\" %}\n\npackage:\n  name: digital_rf\n  version: {{ version }}\n\nsource:\n  url: https://github.com/MITHaystack/digital_rf/releases/download/{{ version }}/digital_rf-{{ version }}.tar.gz\n  sha256: 3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033\n\nbuild:\n  number: 0\n  # there are dependency conflicts for Python 2 on Windows\n  skip: true  # [win and py2k]\n  run_exports:\n    - {{ pin_subpackage('digital_rf') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - cmake >=3.15\n    - make  # [not win]\n    # cross-compilation dependencies\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n\n  host:\n    - hdf5\n    - mako\n    - numpy\n    - pkgconfig\n    - python\n    - setuptools\n\n  run:\n    - h5py\n    - hdf5\n    - {{ pin_compatible('numpy') }}\n    - packaging\n    - python\n    - python-dateutil\n    - pytz\n    - six\n    - watchdog\n\ntest:\n  requires:\n    - gnuradio-core\n    - pytest >=3.6\n  imports:\n    - digital_rf\n    - digital_rf.digital_rf_hdf5\n    - gr_digital_rf\n  source_files:\n    - python/tests/*.py\n    - python/examples/*.py\n  commands:\n    - pytest\n    - python python/examples/example_write_digital_metadata.py\n    - python python/examples/example_read_digital_metadata.py\n\nabout:\n  home: https://github.com/MITHaystack/digital_rf\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Work with data in the Digital RF and Digital Metadata formats.\n  description: |\n    The Digital RF project encompasses a standardized HDF5 format for reading\n    and writing of radio frequency data and the software for doing so. The\n    format is designed to be self-documenting for data archive and to allow\n    rapid random access for data processing. For details on the format, refer\n    to the documentation.\n\n    This suite of software includes libraries for reading and writing data in\n    the Digital RF HDF5 format in C (``libdigital_rf``), Python\n    (``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\n    MATLAB. It also contains the `thor` UHD radio recorder script, Python\n    tools for managing and processing Digital RF data, example scripts that\n    demonstrate basic usage, and example applications that encompass a\n    complete data recording and processing chain for various use cases.\n\n  doc_url: https://github.com/MITHaystack/digital_rf/tree/master/docs\n  dev_url: https://github.com/MITHaystack/digital_rf\n\nextra:\n  recipe-maintainers:\n    - ryanvolz\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "h5py",
   "hdf5",
   "make",
   "mako",
   "numpy",
   "packaging",
   "pkgconfig",
   "python",
   "python-dateutil",
   "pytz",
   "setuptools",
   "six",
   "watchdog"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 },
 "smithy_version": "3.12",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake >=3.15",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest >=3.6"
   ]
  }
 },
 "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz",
 "version": "2.6.7",
 "win_64_meta_yaml": {
  "about": {
   "description": "The Digital RF project encompasses a standardized HDF5 format for reading\nand writing of radio frequency data and the software for doing so. The\nformat is designed to be self-documenting for data archive and to allow\nrapid random access for data processing. For details on the format, refer\nto the documentation.\n\nThis suite of software includes libraries for reading and writing data in\nthe Digital RF HDF5 format in C (``libdigital_rf``), Python\n(``digital_rf``) with blocks for GNU Radio (``gr_digital_rf``), and\nMATLAB. It also contains the `thor` UHD radio recorder script, Python\ntools for managing and processing Digital RF data, example scripts that\ndemonstrate basic usage, and example applications that encompass a\ncomplete data recording and processing chain for various use cases.\n",
   "dev_url": "https://github.com/MITHaystack/digital_rf",
   "doc_url": "https://github.com/MITHaystack/digital_rf/tree/master/docs",
   "home": "https://github.com/MITHaystack/digital_rf",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Work with data in the Digital RF and Digital Metadata formats."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "digital_rf",
    "digital_rf",
    "digital_rf",
    "digital_rf"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "ryanvolz",
    "ryanvolz",
    "ryanvolz",
    "ryanvolz"
   ]
  },
  "package": {
   "name": "digital_rf",
   "version": "2.6.7"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15",
    "c_compiler_stub",
    "cmake >=3.15"
   ],
   "host": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools",
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ],
   "run": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog",
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "source": {
   "sha256": "3dfe5c02463da57a2cfe33f0d836daec260d460d64a0a0de7fb461f71bf1b033",
   "url": "https://github.com/MITHaystack/digital_rf/releases/download/2.6.7/digital_rf-2.6.7.tar.gz"
  },
  "test": {
   "commands": [
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py",
    "pytest",
    "python python/examples/example_write_digital_metadata.py",
    "python python/examples/example_read_digital_metadata.py"
   ],
   "imports": [
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf",
    "digital_rf",
    "digital_rf.digital_rf_hdf5",
    "gr_digital_rf"
   ],
   "requires": [
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6",
    "gnuradio-core",
    "pytest >=3.6"
   ],
   "source_files": [
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py",
    "python/tests/*.py",
    "python/examples/*.py"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "mako",
    "numpy",
    "pkgconfig",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "hdf5",
    "numpy",
    "packaging",
    "python",
    "python-dateutil",
    "pytz",
    "six",
    "watchdog"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "gnuradio-core",
    "pytest"
   ]
  }
 }
}