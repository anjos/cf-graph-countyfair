{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/344307628.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/521259311.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "linux_s390x": "linux_64"
  }
 },
 "feedstock_name": "ctng-compilers",
 "hash_type": "sha256",
 "name": "gcc_compilers",
 "new_version": "12.1.0",
 "new_version_attempts": {
  "11.2.0": 322,
  "11.3.0": 8,
  "12.1.0": 44
 },
 "new_version_errors": {
  "11.2.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '11.2.0' to make sure they exist!\n\nWe also found the following errors:\n\n - migrations do not work on versions not specified with jinja2\n",
  "11.3.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '11.3.0' to make sure they exist!\n\nWe also found the following errors:\n\n - migrations do not work on versions not specified with jinja2\n",
  "12.1.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '12.1.0' to make sure they exist!\n\nWe also found the following errors:\n\n - migrations do not work on versions not specified with jinja2\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "_openmp_mutex",
   "conda-gcc-specs",
   "gcc_impl_linux-64",
   "gcc_impl_linux-aarch64",
   "gcc_impl_linux-ppc64le",
   "gcc_impl_linux-s390x",
   "gfortran_impl_linux-64",
   "gfortran_impl_linux-aarch64",
   "gfortran_impl_linux-ppc64le",
   "gfortran_impl_linux-s390x",
   "gxx_impl_linux-64",
   "gxx_impl_linux-aarch64",
   "gxx_impl_linux-ppc64le",
   "gxx_impl_linux-s390x",
   "libgcc-devel_linux-64",
   "libgcc-devel_linux-aarch64",
   "libgcc-devel_linux-ppc64le",
   "libgcc-devel_linux-s390x",
   "libgcc-ng",
   "libgfortran-ng",
   "libgfortran5",
   "libgomp",
   "libsanitizer",
   "libstdcxx-devel_linux-64",
   "libstdcxx-devel_linux-aarch64",
   "libstdcxx-devel_linux-ppc64le",
   "libstdcxx-devel_linux-s390x",
   "libstdcxx-ng"
  ]
 },
 "pinning_version": "2020.11.15.13.01.59",
 "raw_meta_yaml": "{% set version = gcc_version %}\n{% set chost = gcc_machine ~ \"-\" ~ gcc_vendor ~ \"-linux-gnu-\" %}\n{% set build_num = 16 %}\n\npackage:\n  name: gcc_compilers\n  version: {{ version }}\n\nsource:\n  - url: https://ftp.gnu.org/gnu/gcc/gcc-{{ version }}/gcc-{{ version }}.tar.gz\n    sha256: e88a004a14697bbbaba311f38a938c716d9a652fd151aaaa4cf1b5b99b90e2de   # [gcc_version == \"12.1.0\"]\n    sha256: 98438e6cc7294298b474cf0da7655d9a8c8b796421bb0210531c294a950374ed   # [gcc_version == \"11.3.0\"]\n    sha256: ab1974017834430de27fd803ade4389602a7d6ca1362496c57bef384b2a4cb07   # [gcc_version == \"10.4.0\"]\n    sha256: 15b34072105272a3eb37f6927409f7ce9aa0dd1498efebc35f851d6e6f029a4d   # [gcc_version == \"9.5.0\"]\n    sha256: 6e6e0628573d2185727a2dd83211d04a2b2748e4a262099099b9c8064634c9ee   # [gcc_version == \"8.5.0\"]\n    sha256: 4f518f18cfb694ad7975064e99e200fe98af13603b47e67e801ba9580e50a07f   # [gcc_version == \"7.5.0\"]\n    patches:\n      - patches/0021-Hardcode-HAVE_ALIGNED_ALLOC-1-in-libstdc-v3-configur.patch\n      - patches/0022-cross-compile-older-glibc.patch   # [glibc_version == \"2.12\" and target_platform != \"linux-64\"]\n      - patches/old-allow-commands-in-main-specfile.patch                      # [gcc_maj_ver < 12]\n      - patches/new-allow-commands-in-main-specfile.patch                      # [gcc_maj_ver >= 12]\n\nbuild:\n  number: {{ build_num }}\n  skip: True  # [not linux]\n  detect_binary_files_with_prefix: False\n\nrequirements:\n  build:\n    - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n    - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n    - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n    - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n    - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n    - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n    - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n    - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n    - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n  host:\n    - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n\noutputs:\n  - name: libgcc-devel_{{ cross_target_platform }}\n    script: install-libgcc-devel.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n      ignore_run_exports_from:\n        - gcc_impl_{{ build_platform }}  {{ gcc_version }}                # [build_platform != target_platform]\n        - gxx_impl_{{ build_platform }}  {{ gcc_version }}                # [build_platform != target_platform]\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/crtbegin.o\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libgcc_eh.a\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libgcc.a\n    about:\n      summary: The GNU C development libraries and object files\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libstdcxx-devel_{{ cross_target_platform }}\n    script: install-libstdc++-devel.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n    test:\n      requires:\n        - gxx_impl_{{ cross_target_platform }} {{ gcc_version }}\n      commands:\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libstdc++.a\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libstdc++.so\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libstdc++fs.a\n        - test -f ${PREFIX}/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}/libsupc++.a\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/include/c++/{{ gcc_version }}/cstdio\n    about:\n      summary: The GNU C++ headers and development libraries\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: gcc_impl_{{ cross_target_platform }}\n    script: install-gcc.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      missing_dso_whitelist:\n        - '*'\n      runpath_whitelist:\n        - \"x86_64-{{ gcc_vendor }}-linux-gnu/sysroot/lib/libpthread-2.12.2.so\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n        - {{ pin_subpackage(\"libgomp\", exact=True) }}               # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libstdcxx-ng\", exact=True) }}          # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libgcc-ng\", exact=True) }}             # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libgfortran\" ~ libgfortran_soname) }}  # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libsanitizer\", exact=True) }}          # [target_platform == cross_target_platform]\n      run:\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - {{ pin_subpackage(\"libgcc-devel_\" ~ cross_target_platform, exact=True) }}\n        - {{ pin_subpackage(\"libsanitizer\", exact=True) }}      # [target_platform == cross_target_platform]\n        # libstdcxx-ng is a runtime dep of gcc because LTO requires it.\n        - {{ pin_subpackage(\"libstdcxx-ng\", max_pin=None) }}    # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libgcc-ng\", max_pin=None) }}       # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libgomp\", max_pin=None) }}         # [target_platform == cross_target_platform]\n        - sysroot_{{ cross_target_platform }}\n        # Any version newer than the devtoolset works.\n        - libstdcxx-ng >=4.9   # [use_system_gcc]\n        - libgcc-ng >=4.9      # [use_system_gcc]\n    run_exports:\n      # impose this requirement across the build/host boundary\n      strong:\n        - libgcc-ng >={{ gcc_version }}\n    test:\n      requires:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      files:\n        - tests\n      commands:\n        - echo {{ old_gcc_vendor }}\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgomp.so   # [target_platform == cross_target_platform]\n        - test `readlink ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgomp.so` == \"../../lib/libgomp.so\"  # [target_platform == cross_target_platform]\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ old_gcc_vendor }}-linux-gnu-gcc\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ old_gcc_vendor }}-linux-gnu-cpp\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-gcc\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-cpp\n        - test ! -f ${PREFIX}/bin/gcc\n        - test ! -f ${PREFIX}/bin/cpp\n        - CC=$(${PREFIX}/bin/*-gcc -dumpmachine)-gcc\n        - ${CC} -Wall tests/aligned_alloc.c -c -o c_aligned.o -v -fsanitize=address\n        - ${CC} -Wall tests/aligned_alloc.c -c -o c_aligned.o -v\n        - ${CC} -Wall c_aligned.o -o c_aligned -v && ./c_aligned   # [cross_target_platform == target_platform]\n        - ${CC} -Wall c_aligned.o -o c_aligned -Wl,-rpath,/foo && {{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-readelf -d c_aligned | grep RPATH | grep \"/foo:${PREFIX}/lib\"  # [cross_target_platform == target_platform]\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgcc_s.so\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgomp.spec\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libsanitizer.spec\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libasan_preinit.o\n    about:\n      summary: GNU C Compiler\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: conda-gcc-specs\n    script: install-conda-specs.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True  # [cross_target_platform != target_platform]\n    requirements:\n      build:\n      run:\n        - {{ pin_subpackage(\"gcc_impl_\" ~ cross_target_platform, max_pin='x.x.x.x') }}\n    test:\n      files:\n        - tests\n      commands:\n        - specdir=$PREFIX/lib/gcc/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/{{ gcc_version }}\n        - test -f $specdir/conda.specs\n        - CC=$(${PREFIX}/bin/*-gcc -dumpmachine)-gcc\n        - echo | ${CC} -E -v -x c - |& grep '^Reading specs from' | awk '{print $NF}' | xargs readlink -e | awk -v ORS= '{print $1\":\"}' | grep \"${specdir}/specs:${specdir}/conda.specs:\"\n        - cp tests/libhowdy.h $PREFIX/include/\n        - ${CC} -shared -fpic -o $PREFIX/lib/libhowdy.so tests/libhowdy.c\n        - ${CC} -o howdy-dso tests/howdy-dso.c -lhowdy\n        - ./howdy-dso\n        -    grep RPATH   <({{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-readelf -d howdy-dso)\n        - \"! grep RUNPATH <({{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-readelf -d howdy-dso)\"\n        - ${CC} -Wl,-enable-new-dtags -o howdy-dso-runpath tests/howdy-dso.c -lhowdy\n        - ./howdy-dso-runpath\n        - \"! grep RPATH   <({{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-readelf -d howdy-dso-runpath)\"\n        -    grep RUNPATH <({{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-readelf -d howdy-dso-runpath)\n        - echo | ${CC} -E -Wp,-v -x c - |& awk '/include <\\.\\.\\.> search starts/,/^End of search/ {print}' | tail -n2 | head -n1 | grep \"$PREFIX/include\"\n        - echo | ${CC} -isystem \"$PREFIX/include\" -E -Wp,-v -x c - |& awk '/include <\\.\\.\\.> search starts/, /^End of search/ {print}' | head -n2 | tail -n1 | grep \"$PREFIX/include\"\n\n    about:\n      summary: conda-specific specfile for GNU C/C++ Compiler\n      description: |\n          When installed, this optional package provides a specfile that\n          directs gcc (and g++ or gfortran) to automatically:\n            * search for includes in $PREFIX/include\n            * link libraries in $PREFIX/lib\n            * set RPATH to $PREFIX/lib\n            * use RPATH instead of the newer RUNPATH\n          This package is intended to aid usability of the compiler\n          toolchain as a replacement for system-installed compilers.\n          It should not be used in recipes.  Use the 'compiler(<lang>)'\n          jinja function as described on\n          https://conda-forge.org/docs/maintainer/knowledge_base.html#dep-compilers\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n      doc_url: https://gcc.gnu.org/onlinedocs/gcc/Spec-Files.html\n\n  - name: gxx_impl_{{ cross_target_platform }}\n    script: install-g++.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n        # For cpp and crt{i,n}.o\n        - {{ pin_subpackage(\"gcc_impl_\" ~ cross_target_platform, exact=True) }}\n      run:\n        # For cpp and crt{i,n}.o\n        - {{ pin_subpackage(\"gcc_impl_\" ~ cross_target_platform, exact=True) }}\n        # not needed due to pinning above but marks this build as using the new sysroots\n        - sysroot_{{ cross_target_platform }}\n        - {{ pin_subpackage(\"libstdcxx-devel_\" ~ cross_target_platform, exact=True) }}\n    run_exports:\n      # impose this requirement across the build/host boundary\n      strong:\n        - libstdcxx-ng >={{ gcc_version }}\n    test:\n      requires:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      files:\n        - tests\n      commands:\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ old_gcc_vendor }}-linux-gnu-g++\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-g++\n        - CXX=$(${PREFIX}/bin/*-gcc -dumpmachine)-g++\n        - ${CXX} -Wall tests/aligned_alloc.cpp -c -o cpp_aligned.o --std=c++17\n        - ${CXX} -Wall cpp_aligned.o -o cpp_aligned --std=c++17 && ./cpp_aligned  # [cross_target_platform == target_platform]\n    about:\n      summary: GNU C++ Compiler\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: gfortran_impl_{{ cross_target_platform }}\n    script: install-gfortran.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        # For cpp and crt{i,n}.o\n        - {{ pin_subpackage(\"gcc_impl_\" ~ cross_target_platform, exact=True) }}\n        # not needed due to pinning above but marks this build as using the new sysroots\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      run:\n        # For cpp and crt{i,n}.o\n        - gcc_impl_{{ cross_target_platform }} >={{ gcc_version }}\n        - {{ pin_subpackage(\"libgfortran\" ~ libgfortran_soname, max_pin=None) }}  # [target_platform == cross_target_platform]\n        - {{ pin_subpackage(\"libgcc-ng\", max_pin=None) }}           # [target_platform == cross_target_platform]\n        - sysroot_{{ cross_target_platform }}\n        # Any version newer than the devtoolset works. This can be removed when bootstrapping.\n        - libgcc-ng >=4.9\n        - libstdcxx-ng >=4.9\n    run_exports:\n      # impose this requirement across the build/host boundary\n      strong:\n        - libgfortran{{ libgfortran_soname }} {{ gcc_version }}.*\n        - libgcc-ng >={{ gcc_version }}\n    test:\n      requires:\n        - cmake >=3.11  # [x86_64 or aarch64 or ppc64le]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      commands:\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgfortran.so\n        - test -f ${PREFIX}/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu/lib/libgfortran.a\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ old_gcc_vendor }}-linux-gnu-gfortran\n        - test -f ${PREFIX}/bin/{{ gcc_machine }}-{{ gcc_vendor }}-linux-gnu-gfortran\n        - find $PREFIX/lib -iname omp_lib.mod | grep '.'\n        - find $PREFIX/lib -iname omp_lib.h | grep '.'\n        - pushd tests/fortomp\n        - sh test_fort.sh   # [target_platform == cross_target_platform and (x86_64 or aarch64 or ppc64le)]\n      files:\n        - tests/fortomp/*\n    about:\n      summary: GNU Fortran Compiler\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libstdcxx-ng\n    target: {{ cross_target_platform }}\n    script: install-libstdc++.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True   # [target_platform != cross_target_platform]\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n        - {{ pin_subpackage(\"libgcc-ng\", exact=True) }}\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libstdc++.so\n    about:\n      summary: The GNU C++ Runtime Library\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libsanitizer\n    target: {{ cross_target_platform }}\n    script: install-libsanitizer.sh\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }}  {{ glibc_version }}\n      run:\n        - libgcc-ng >={{ gcc_version }}\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True   # [target_platform != cross_target_platform]\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n      run_exports:\n        - libsanitizer {{ gcc_version }}\n    test:\n      requires:\n        - sysroot_{{ cross_target_platform }}\n        - gcc_impl_{{ cross_target_platform }}\n      commands:\n        - test -f ${PREFIX}/lib/libasan.so\n        - echo 'void main(){}' | {{ chost }}gcc -fsanitize=address -x c -\n    about:\n      summary: The GCC runtime libraries for sanitizers\n      home: https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libgomp\n    target: {{ cross_target_platform }}\n    script: install-libgomp.sh\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }}  {{ glibc_version }}\n      run:\n        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True   # [target_platform != cross_target_platform]\n      missing_dso_whitelist:\n        - \"*\"\n      run_exports:\n        strong:\n          - {{ pin_subpackage(\"_openmp_mutex\", max_pin=None) }}\n      ignore_run_exports:\n        - __glibc\n    test:\n      requires:\n        - sysroot_{{ cross_target_platform }}\n      commands:\n        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver }}\n        - test ! -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}\n    about:\n      summary: The GCC OpenMP implementation.\n      home: https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libgcc-ng\n    target: {{ cross_target_platform }}\n    script: install-libgcc-no-gomp.sh\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - {{ pin_subpackage(\"libgomp\", exact=True) }}\n        - {{ pin_subpackage('_openmp_mutex', exact=True) }}\n        - sysroot_{{ cross_target_platform }}  {{ glibc_version }}\n      run:\n        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]\n        - {{ pin_subpackage(\"_openmp_mutex\", max_pin=None) }}\n      run_constrained:\n        - {{ pin_subpackage(\"libgomp\", exact=True) }}\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True   # [target_platform != cross_target_platform]\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n      rpaths_patcher: patchelf\n    test:\n      requires:\n        - sysroot_{{ cross_target_platform }}\n      commands:\n        - test -f ${PREFIX}/lib/libgcc_s.so\n        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}\n        - test `readlink ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}` == \"libgomp.so.{{ libgomp_ver }}\"\n    about:\n      summary: The GCC low-level runtime library\n      home: https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: _openmp_mutex\n    script: install-openmp_impl.sh\n    version: {{ openmp_ver }}\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n      host:\n        - {{ pin_subpackage('libgomp', exact=True) }}\n        - sysroot_{{ cross_target_platform }}  {{ glibc_version }}\n      run:\n        - _libgcc_mutex {{ _libgcc_mutex }}  # [linux64 or ppc64le]\n        - libgomp >=7.5.0\n      run_constrained:\n        # conflict with previous name\n        - openmp_impl 9999\n    build:\n      string: 2_gnu\n      skip: True   # [target_platform != cross_target_platform]\n      run_exports:\n        strong:\n          - {{ pin_subpackage(\"_openmp_mutex\", max_pin=None) }}\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}\n        - test `readlink ${PREFIX}/lib/libgomp.so.{{ libgomp_ver[0:1] }}` == \"libgomp.so.{{ libgomp_ver }}\"\n    about:\n      summary: OpenMP Implementation Mutex\n      license: BSD-3-Clause\n      license_file: LICENSE\n      home: https://github.com/conda-forge/ctng-compilers-feedstock\n\n  - name: libgfortran{{ libgfortran_soname }}\n    target: {{ cross_target_platform }}\n    script: install-libgfortran.sh\n    build:\n      number: {{ build_num }}\n      detect_binary_files_with_prefix: False\n      skip: True   # [target_platform != cross_target_platform]\n      missing_dso_whitelist:\n        - \"*\"\n      ignore_run_exports:\n        - __glibc\n    requirements:\n      build:\n        - binutils_impl_{{ target_platform }}  {{ binutils_version }}\n        - binutils_impl_{{ cross_target_platform }}  {{ binutils_version }}\n        - gcc_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gxx_impl_{{ target_platform }}  {{ gcc_version }}               # [build_platform != target_platform]\n        - gcc_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gxx_impl_{{ cross_target_platform }}  {{ gcc_version }}         # [build_platform != target_platform]\n        - gfortran_impl_{{ cross_target_platform }}  {{ gcc_version }}    # [build_platform != target_platform]\n        - gcc_bootstrap_{{ build_platform }} <={{ gcc_version }}          # [(not use_system_gcc and build_platform == target_platform) or (build_platform != target_platform and build_platform != cross_target_platform)]\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      host:\n        - sysroot_{{ cross_target_platform }} {{ glibc_version }}\n      run_constrained:\n        - libgfortran-ng {{ gcc_version }}\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libgfortran.so\n    about:\n      summary: The GNU Fortran Runtime Library\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n  - name: libgfortran-ng\n    target: {{ cross_target_platform }}\n    build:\n      skip: True   # [target_platform != cross_target_platform]\n      number: {{ build_num }}\n    requirements:\n      run:\n        - {{ pin_subpackage('libgfortran' ~ libgfortran_soname, exact=True) }}\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libgfortran.so\n    about:\n      summary: The GNU Fortran Runtime Library\n      home: https://gcc.gnu.org/\n      license: GPL-3.0-only WITH GCC-exception-3.1\n\n\nabout:\n  summary: GNU Compiler Collection\n  home: https://gcc.gnu.org/\n  license: GPL-3.0-only WITH GCC-exception-3.1\n  license_file:\n    - COPYING\n    - COPYING.LIB\n    - COPYING3\n    - COPYING3.LIB\n\nextra:\n  recipe-maintainers:\n    - timsnyder\n    - xhochy\n    - isuruf\n    - beckermr\n",
 "smithy_version": "3.8.5",
 "strong_exports": true,
 "url": "https://ftp.gnu.org/gnu/gcc/gcc-9.5.0/gcc-9.5.0.tar.gz",
 "version": "11.3.0"
}