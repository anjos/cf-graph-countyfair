{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/357496153.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/386172415.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501108366.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/693249080.json"
   },
   "data": {
    "bot_rerun": 1647985777.4459054,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774841762.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/886628747.json"
   },
   "data": {
    "bot_rerun": 1655711339.6583116,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/904968626.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/976688147.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "zope.hookable",
 "hash_type": "sha256",
 "name": "zope.hookable",
 "new_version": "5.1.0",
 "new_version_attempts": {
  "5.1.0": 3
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "zope.hookable"
  ]
 },
 "pinning_version": "2022.06.22.11.09.47",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"zope.hookable\" %}\n{% set version = \"5.0.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 29d07681a78042cdd15b268ae9decffed9ace68a53eebeb61d65ae931d158841\n\nbuild:\n  number: 3\n  script: {{ PYTHON }} -m pip install . -vv\n\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - zope.proxy\n\ntest:\n  imports:\n    - {{ name }}\n\nabout:\n  home: https://github.com/zopefoundation/zope.hookable\n  license: ZPL-2.1\n  license_file: LICENSE.txt\n  summary: supports the efficient creation of \u201Chookable\u201D objects, which are callable objects that are meant to be optionally replaced.\n  description: |\n    This package supports the efficient creation of \u201Chookable\u201D objects, which\n    are callable objects that are meant to be optionally replaced.\n    The idea is that you create a function that does some default thing and make\n    it hookable. Later, someone can modify what it does by calling its sethook\n    method and changing its implementation. All users of the function, including\n    those that imported it, will see the change.\n  doc_url: https://zopehookable.readthedocs.io\n  dev_url: https://github.com/zopefoundation/zope.hookable\n\nextra:\n  recipe-maintainers:\n    - ChrisBarker-NOAA\n    - daf\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/z/zope.hookable/zope.hookable-5.0.1.tar.gz",
 "version": "5.0.1"
}