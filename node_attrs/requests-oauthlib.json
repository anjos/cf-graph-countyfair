{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/200015738.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Noarch",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/243370715.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/244556628.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/337417125.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/835220211.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "requests-oauthlib",
 "hash_type": "sha256",
 "name": "requests-oauthlib",
 "new_version": "1.3.1",
 "new_version_attempts": {
  "1.3.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "requests-oauthlib"
  ]
 },
 "pinning_version": "2022.01.29.15.10.18",
 "raw_meta_yaml": "{% set name = \"requests-oauthlib\" %}\n{% set version = \"1.3.1\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 75beac4a47881eeb94d5ea5d6ad31ef88856affe2332b9aafb52c6452ccf0d7a\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python >=3.4\n    - pip\n\n  run:\n    - python >=3.4\n    - oauthlib >=3.0.0\n    - requests >=2.0.0\n\ntest:\n  imports:\n    - requests_oauthlib\n    - requests_oauthlib.oauth1_auth\n    - requests_oauthlib.oauth1_session\n    - requests_oauthlib.oauth2_auth\n    - requests_oauthlib.oauth2_session\n    - requests_oauthlib.compliance_fixes\n\nabout:\n  home: https://github.com/requests/requests-oauthlib\n  license: ISC\n  license_file: LICENSE\n  summary: OAuthlib authentication support for Requests.\n  description: |\n    Requests-OAuthlib\n    =========================================================\n\n    This project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\n    The OAuth 1 workflow\n    --------------------\n\n    OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\n    requests_oauthlib hides most of these and let you focus at the task at hand.\n\n    Accessing protected resources using requests_oauthlib is as simple as:\n\n        >>> from requests_oauthlib import OAuth1Session\n        >>> twitter = OAuth1Session('client_key',\n                                    client_secret='client_secret',\n                                    resource_owner_key='resource_owner_key',\n                                    resource_owner_secret='resource_owner_secret')\n        >>> url = 'https://api.twitter.com/1/account/settings.json'\n        >>> r = twitter.get(url)\n\n    Before accessing resources you will need to obtain a few credentials from your\n    provider (e.g. Twitter) and authorization from the user for whom you wish to\n    retrieve resources for. You can read all about this in the full\n    [OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\n    The OAuth 2 workflow\n    --------------------\n\n    OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\n    common being the Authorization Code Grant, also known as the WebApplication\n    flow.\n\n    Fetching a protected resource after obtaining an access token can be extremely\n    simple. However, before accessing resources you will need to obtain a few\n    credentials from your provider (e.g. Google) and authorization from the user\n    for whom you wish to retrieve resources for. You can read all about this in the\n    full [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n\n  dev_url: https://github.com/requests/requests-oauthlib\n  doc_url: https://github.com/requests/requests-oauthlib\n\nextra:\n  recipe-maintainers:\n    - pmlandwehr\n    - xylar\n",
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-1.3.1.tar.gz",
 "version": "1.3.1"
}