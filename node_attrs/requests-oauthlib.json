{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/200015738.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Noarch",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/243370715.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/244556628.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/337417125.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "requests-oauthlib",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Requests-OAuthlib\n=========================================================\n\nThis project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\nThe OAuth 1 workflow\n--------------------\n\nOAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\nrequests_oauthlib hides most of these and let you focus at the task at hand.\n\nAccessing protected resources using requests_oauthlib is as simple as:\n\n    >>> from requests_oauthlib import OAuth1Session\n    >>> twitter = OAuth1Session('client_key',\n                                client_secret='client_secret',\n                                resource_owner_key='resource_owner_key',\n                                resource_owner_secret='resource_owner_secret')\n    >>> url = 'https://api.twitter.com/1/account/settings.json'\n    >>> r = twitter.get(url)\n\nBefore accessing resources you will need to obtain a few credentials from your\nprovider (e.g. Twitter) and authorization from the user for whom you wish to\nretrieve resources for. You can read all about this in the full\n[OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\nThe OAuth 2 workflow\n--------------------\n\nOAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\ncommon being the Authorization Code Grant, also known as the WebApplication\nflow.\n\nFetching a protected resource after obtaining an access token can be extremely\nsimple. However, before accessing resources you will need to obtain a few\ncredentials from your provider (e.g. Google) and authorization from the user\nfor whom you wish to retrieve resources for. You can read all about this in the\nfull [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n",
   "dev_url": "https://github.com/requests/requests-oauthlib",
   "doc_url": "https://github.com/requests/requests-oauthlib",
   "home": "https://github.com/requests/requests-oauthlib",
   "license": "ISC",
   "license_file": "LICENSE",
   "summary": "OAuthlib authentication support for Requests."
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "pmlandwehr",
    "xylar"
   ]
  },
  "package": {
   "name": "requests-oauthlib",
   "version": "1.3.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip"
   ],
   "run": [
    "python",
    "oauthlib >=3.0.0",
    "requests >=2.0.0"
   ]
  },
  "source": {
   "fn": "requests-oauthlib-1.3.0.tar.gz",
   "sha256": "b4261601a71fd721a8bd6d7aa1cc1d6a8a93b4a9f5e96626f8e4d91e8beeaa6a",
   "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-1.3.0.tar.gz"
  },
  "test": {
   "imports": [
    "requests_oauthlib",
    "requests_oauthlib.oauth1_auth",
    "requests_oauthlib.oauth1_session",
    "requests_oauthlib.oauth2_auth",
    "requests_oauthlib.oauth2_session",
    "requests_oauthlib.compliance_fixes",
    "requests_oauthlib.compliance_fixes.douban",
    "requests_oauthlib.compliance_fixes.facebook",
    "requests_oauthlib.compliance_fixes.fitbit",
    "requests_oauthlib.compliance_fixes.linkedin",
    "requests_oauthlib.compliance_fixes.mailchimp",
    "requests_oauthlib.compliance_fixes.plentymarkets",
    "requests_oauthlib.compliance_fixes.slack",
    "requests_oauthlib.compliance_fixes.weibo"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "oauthlib",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Requests-OAuthlib\n=========================================================\n\nThis project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\nThe OAuth 1 workflow\n--------------------\n\nOAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\nrequests_oauthlib hides most of these and let you focus at the task at hand.\n\nAccessing protected resources using requests_oauthlib is as simple as:\n\n    >>> from requests_oauthlib import OAuth1Session\n    >>> twitter = OAuth1Session('client_key',\n                                client_secret='client_secret',\n                                resource_owner_key='resource_owner_key',\n                                resource_owner_secret='resource_owner_secret')\n    >>> url = 'https://api.twitter.com/1/account/settings.json'\n    >>> r = twitter.get(url)\n\nBefore accessing resources you will need to obtain a few credentials from your\nprovider (e.g. Twitter) and authorization from the user for whom you wish to\nretrieve resources for. You can read all about this in the full\n[OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\nThe OAuth 2 workflow\n--------------------\n\nOAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\ncommon being the Authorization Code Grant, also known as the WebApplication\nflow.\n\nFetching a protected resource after obtaining an access token can be extremely\nsimple. However, before accessing resources you will need to obtain a few\ncredentials from your provider (e.g. Google) and authorization from the user\nfor whom you wish to retrieve resources for. You can read all about this in the\nfull [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n",
   "dev_url": "https://github.com/requests/requests-oauthlib",
   "doc_url": "https://github.com/requests/requests-oauthlib",
   "home": "https://github.com/requests/requests-oauthlib",
   "license": "ISC",
   "license_file": "LICENSE",
   "summary": "OAuthlib authentication support for Requests."
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "pmlandwehr",
    "xylar"
   ]
  },
  "package": {
   "name": "requests-oauthlib",
   "version": "1.3.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip"
   ],
   "run": [
    "python",
    "oauthlib >=3.0.0",
    "requests >=2.0.0"
   ]
  },
  "source": {
   "fn": "requests-oauthlib-1.3.0.tar.gz",
   "sha256": "b4261601a71fd721a8bd6d7aa1cc1d6a8a93b4a9f5e96626f8e4d91e8beeaa6a",
   "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-1.3.0.tar.gz"
  },
  "test": {
   "imports": [
    "requests_oauthlib",
    "requests_oauthlib.oauth1_auth",
    "requests_oauthlib.oauth1_session",
    "requests_oauthlib.oauth2_auth",
    "requests_oauthlib.oauth2_session",
    "requests_oauthlib.compliance_fixes",
    "requests_oauthlib.compliance_fixes.douban",
    "requests_oauthlib.compliance_fixes.facebook",
    "requests_oauthlib.compliance_fixes.fitbit",
    "requests_oauthlib.compliance_fixes.linkedin",
    "requests_oauthlib.compliance_fixes.mailchimp",
    "requests_oauthlib.compliance_fixes.plentymarkets",
    "requests_oauthlib.compliance_fixes.slack",
    "requests_oauthlib.compliance_fixes.weibo"
   ]
  }
 },
 "name": "requests-oauthlib",
 "new_version": "1.3.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "requests-oauthlib"
  ]
 },
 "pinning_version": "2019.11.01",
 "raw_meta_yaml": "{% set name = \"requests-oauthlib\" %}\n{% set version = \"1.3.0\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: b4261601a71fd721a8bd6d7aa1cc1d6a8a93b4a9f5e96626f8e4d91e8beeaa6a\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n\n  run:\n    - python\n    - oauthlib >=3.0.0\n    - requests >=2.0.0\n\ntest:\n  imports:\n    - requests_oauthlib\n    - requests_oauthlib.oauth1_auth\n    - requests_oauthlib.oauth1_session\n    - requests_oauthlib.oauth2_auth\n    - requests_oauthlib.oauth2_session\n    - requests_oauthlib.compliance_fixes\n    - requests_oauthlib.compliance_fixes.douban\n    - requests_oauthlib.compliance_fixes.facebook\n    - requests_oauthlib.compliance_fixes.fitbit\n    - requests_oauthlib.compliance_fixes.linkedin\n    - requests_oauthlib.compliance_fixes.mailchimp\n    - requests_oauthlib.compliance_fixes.plentymarkets\n    - requests_oauthlib.compliance_fixes.slack\n    - requests_oauthlib.compliance_fixes.weibo\n\nabout:\n  home: https://github.com/requests/requests-oauthlib\n  license: ISC\n  license_file: LICENSE\n  summary: 'OAuthlib authentication support for Requests.'\n  description: |\n    Requests-OAuthlib\n    =========================================================\n\n    This project provides first-class OAuth library support for [Requests](http://python-requests.org).\n\n    The OAuth 1 workflow\n    --------------------\n\n    OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\n    requests_oauthlib hides most of these and let you focus at the task at hand.\n\n    Accessing protected resources using requests_oauthlib is as simple as:\n\n        >>> from requests_oauthlib import OAuth1Session\n        >>> twitter = OAuth1Session('client_key',\n                                    client_secret='client_secret',\n                                    resource_owner_key='resource_owner_key',\n                                    resource_owner_secret='resource_owner_secret')\n        >>> url = 'https://api.twitter.com/1/account/settings.json'\n        >>> r = twitter.get(url)\n\n    Before accessing resources you will need to obtain a few credentials from your\n    provider (e.g. Twitter) and authorization from the user for whom you wish to\n    retrieve resources for. You can read all about this in the full\n    [OAuth 1 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html)\n\n    The OAuth 2 workflow\n    --------------------\n\n    OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\n    common being the Authorization Code Grant, also known as the WebApplication\n    flow.\n\n    Fetching a protected resource after obtaining an access token can be extremely\n    simple. However, before accessing resources you will need to obtain a few\n    credentials from your provider (e.g. Google) and authorization from the user\n    for whom you wish to retrieve resources for. You can read all about this in the\n    full [OAuth 2 workflow guide on RTD](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n\n  dev_url: https://github.com/requests/requests-oauthlib\n  doc_url: https://github.com/requests/requests-oauthlib\n\nextra:\n  recipe-maintainers:\n    - pmlandwehr\n    - xylar\n",
 "req": {
  "__set__": true,
  "elements": [
   "oauthlib",
   "pip",
   "python",
   "requests"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "oauthlib",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.6.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "oauthlib >=3.0.0",
    "python",
    "requests >=2.0.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.org/packages/source/r/requests-oauthlib/requests-oauthlib-1.3.0.tar.gz",
 "version": "1.3.0"
}