{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/572731158.json"
   },
   "data": {
    "bot_rerun": 1613182836.281949,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/572850288.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/572875448.json"
   },
   "data": {
    "bot_rerun": 1623966479.048229,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/672202458.json"
   },
   "data": {
    "bot_rerun": 1623955944.972969,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/672908192.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/681129781.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823207038.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823231426.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/827444221.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "mkl2022"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1012503218.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1013462529.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "csr",
 "hash_type": "sha256",
 "name": "csr",
 "new_version": "0.4.3",
 "new_version_attempts": {
  "0.2.0": 1,
  "0.3.1": 2,
  "0.4.0": 1,
  "0.4.1": 1,
  "0.4.2": 1,
  "0.4.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "csr"
  ]
 },
 "pinning_version": "2022.07.31.08.11.05",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"csr\" %}\n{% set version = \"0.4.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 61128f621b306a8ccc7c0ce6ce61279a55d9bc3e30e9cd4c3bcd7dfd8fc9f557\n\nbuild:\n  number: 3\n  skip: true  # [py<37 or python_impl == 'pypy']\n  script: |\n    # On MKL-supported platforms, we want to make the MKL kernel available\n    {{ PYTHON }} build_mkl.py  # [x86_64]\n    {{ PYTHON }} -m pip install --no-deps -vv .\n  ignore_run_exports:\n    - mkl\n\nrequirements:\n  build:\n    # X86-64 needs the dependencies to build the MKL extension\n    - {{ compiler('c') }}  # [x86_64]\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    # - cython                                 # [build_platform != target_platform]\n    - numpy >=1.17                           # [build_platform != target_platform]\n    - pybind11                               # [build_platform != target_platform]\n  host:\n    - python\n    - pip\n    - flit-core >=3.2\n    - cffi >=1.12.2    # [x86_64]\n    - mkl-devel        # [x86_64]\n  run:\n    - python\n    - numba >=0.51\n    - numpy >=1.17\n    - scipy\n    - cffi >=1.12.2    # [x86_64]\n\ntest:\n  requires:\n    - pytest\n    - hypothesis\n    - pytest-benchmark\n    - psutil\n    - libblas=*=*mkl   # [x86_64]\n  source_files:\n    - pytest.ini\n    - conftest.py\n    - tests\n    - tests/*.py\n  imports:\n    - csr\n    - csr.kernel\n    # make sure the MKL kernel works on x86-64\n    - csr.kernels.mkl  # [x86_64]\n  commands:\n    # run the tests, but with the lower-overhead Hypothesis profile\n    - python -m pytest tests --hypothesis-profile=nojit\n\nabout:\n  home: https://csr.lenskit.org\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Compressed sparse matrices for Python and Numba\n  # The remaining entries in this section are optional, but recommended.\n  description: |\n    CSR is a compressed sparse row sparse matrix package for Python,\n    with Numba-accessible APIs and optional MKL acceleration.\n  doc_url: https://csr.lenskit.org\n  dev_url: https://github.com/lenskit/csr\n\nextra:\n  recipe-maintainers:\n    - mdekstrand\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/c/csr/csr-0.4.1.tar.gz",
 "version": "0.4.1"
}