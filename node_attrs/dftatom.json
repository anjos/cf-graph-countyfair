{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/308288609.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "GFortranOSXRebuild",
    "migrator_version": 0,
    "name": "fortran_compiler_stub-7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500331555.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gcc930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "dftatom",
 "hash_type": "sha256",
 "name": "dftatom",
 "new_version": "1.0.4",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dftatom"
  ]
 },
 "pinning_version": "2020.10.08.20.29.16",
 "raw_meta_yaml": "{% set name = \"dftatom\" %}\n{% set version = \"1.0.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/certik/dftatom/archive/v{{ version }}.tar.gz\n  sha256: b788aaaa1d2958c31bd7ada8a6c8ab9df951c7569f6786fd109fdf10d84f3478\n\nbuild:\n  number: 3\n  skip: True   # [win and vc<14]\n\nrequirements:\n  build:\n    - {{ compiler('fortran') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n  run:\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libdftatom.so  # [linux]\n    - test -f ${PREFIX}/lib/libdftatom.dylib  # [osx]\n    - if exist %LIBRARY_PREFIX%\\lib\\dftatom.lib (exit 0) else (exit 1)  # [win]\n    - test -f ${PREFIX}/include/dftatom/dftatom.mod  # [not win]\n    - if exist %LIBRARY_PREFIX%\\include\\dftatom\\dftatom.mod (exit 0) else (exit 1)  # [win]\n\n\n\nabout:\n  home: https://github.com/certik/dftatom\n  license: MIT\n  license_family: MIT\n  license_file: License\n  summary: 'Routines for Radial Integration of Dirac, Schr\u00F6dinger, and Poisson Equations'\n  description: |\n    This library implements accurate and efficient radial Schr\u00F6dinger and Dirac shooting-method solvers. \n    They work with any grid and any numerical potential. In addition, it also implements a radial \n    Poisson solver and density functional theory self-consistency cycle.\n  doc_url: https://github.com/certik/dftatom/\n\nextra:\n  recipe-maintainers:\n    - certik\n",
 "smithy_version": "3.8.0",
 "strong_exports": false,
 "url": "https://github.com/certik/dftatom/archive/v1.0.4.tar.gz",
 "version": "1.0.4"
}