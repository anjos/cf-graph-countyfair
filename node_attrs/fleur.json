{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/7d109b13-5aa0-4af8-80b7-1438f1ad997d.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51122"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "fleur",
 "hash_type": "sha256",
 "name": "fleur",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "fleur"
  ]
 },
 "pinning_version": "2022.07.28.19.34.36",
 "raw_meta_yaml": "{% set name = \"fleur\" %}\n{% set version = \"6.0\" %}\n{% set version_long = \"MaX-R\" + version %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://iffgit.fz-juelich.de/{{ name }}/{{ name }}/-/archive/{{ version_long }}/{{ name }}-{{ version_long }}.tar.gz\n  sha256: b022793360c198e18f269541152a04189990c0bf8326939f0f24bb8ca2adf757\n  patches:\n    remove_nul_characters_compileinfo.patch\n\nbuild:\n  number: 4\n  skip: True  # [not linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}\n    - cmake\n    - make\n    - git\n    - doxygen\n  host:\n    - openmpi <=4.1.2\n    - scalapack\n    - openblas * *openmp*\n    - liblapack\n    - libgomp\n    - libxml2\n    - fftw\n    - hdf5 * *openmpi*\n  run:\n    - openmpi <=4.1.2\n    - scalapack\n    - libblas * *openblas  # [linux]\n    - openblas * *openmp*  # [linux]\n\ntest:\n  commands:\n    - inpgen -h    \n    - test -f $PREFIX/bin/fleur_MPI  # [unix]\nabout:\n  home: https://www.flapw.de/\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: A feature-full, freely available FLAPW (full-potential linearized augmented planewave) code, based on density-functional theory\n  description: |\n    The FLAPW-Method is an all-electron method which within density functional theory is universally applicable to all atoms of the periodic table and to systems with compact as well as open structures. It is widely considered to be the most precise electronic structure method in solid state physics.\n    an optional C extension for a serious speed boost.\n  doc_url: https://www.flapw.de/\n  dev_url: https://iffgit.fz-juelich.de/fleur/fleur\n\nextra:\n  recipe-maintainers:\n    - ltalirz\n    - janssenhenning\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://iffgit.fz-juelich.de/fleur/fleur/-/archive/MaX-R6.0/fleur-MaX-R6.0.tar.gz",
 "version": "6.0"
}