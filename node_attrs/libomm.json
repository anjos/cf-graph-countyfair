{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/783015500.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "libomm",
 "hash_type": "sha256",
 "name": "libomm",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libomm"
  ]
 },
 "pinning_version": "2021.11.17.15.51.01",
 "raw_meta_yaml": "{% set name = \"libOMM\" %}\n{% set version = \"1.0.0\" %}\n{% set build = 2 %}\n{% set mpi = mpi or \"nompi\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://gitlab.com/ElectronicStructureLibrary/omm-bundle/-/archive/v{{ version }}/omm-bundle-v{{ version }}.tar.gz\n  sha256: 815f849d4a603383e6553db4e97fe695882b40e4bbc6f33577bc2556166949af\n  patches:\n    - perl.patch\n\n{% if mpi == \"nompi\" %}\n{% set build = build + 100 %}\n{% endif %}\nbuild:\n  number: {{ build }}\n  skip: true  # [win]\n  script:\n    - set -ex\n    - CC=\"$PREFIX/bin/mpicc\" FC=\"$PREFIX/bin/mpifort\"  # [mpi != 'nompi']\n    - pushd {{ name }} && bash autogen.sh && popd\n    - LINALG_LIBS=\"-llapack -lblas\"\n    - LINALG_LIBS=\"-lscalapack ${LINALG_LIBS}\"  # [mpi != 'nompi']\n    - {{ name }}/configure --prefix=$PREFIX --with-msw=$PREFIX LINALG_LIBS=\"${LINALG_LIBS}\"\n    - make -j ${CPU_COUNT:-1}\n    - make install\n\n  {% if mpi != \"nompi\" %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\"\n\n  {% if mpi != \"nompi\" %}\n  run_exports:\n    - {{ name }} * {{ mpi_prefix }}_*\n  {% endif %}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('fortran') }}\n    - libtool\n    - automake\n    - autoconf\n    - make\n    - perl\n    - llvm-openmp  # [osx]\n    - libgomp  # [linux]\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - matrixswitch * {{ mpi_prefix }}_*\n    - scalapack  # [mpi != 'nompi']\n    - libblas\n    - liblapack\n  run:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - matrixswitch * {{ mpi_prefix }}_*\n    - scalapack  # [mpi != 'nompi']\n\ntest:\n  requires:\n    - pkg-config\n  commands:\n    - test -f $PREFIX/lib/libOMM${SHLIB_EXT}\n    - pkg-config {{ name }} --exact-version {{ version }}\n\nabout:\n  home: https://gitlab.com/ElectronicStructureLibrary/omm-bundle\n  license: BSD-2-Clause\n  license_family: BSD\n  license_file:\n    - {{ name }}/COPYING\n  summary: >-\n    Solves the Kohn-Sham equation as a generalized eigenvalue problem for a\n    fixed Hamiltonian.\n    It implements the orbital minimization method (OMM), which works within\n    a density matrix formalism.\n  doc_url: https://esl.cecam.org/software/libomm/\n  dev_url: https://gitlab.com/ElectronicStructureLibrary/omm-bundle/-/tree/master/libOMM\n\nextra:\n  recipe-maintainers:\n    - awvwgk\n",
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "url": "https://gitlab.com/ElectronicStructureLibrary/omm-bundle/-/archive/v1.0.0/omm-bundle-v1.0.0.tar.gz",
 "version": "1.0.0"
}