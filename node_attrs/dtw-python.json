{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/437456952.json"
   },
   "data": {
    "bot_rerun": 1592833733.9187984,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/437469663.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/437935097.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/437967639.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/493361385.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/502123638.json"
   },
   "data": {
    "bot_rerun": 1602594510.5424654,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/502400185.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560326873.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/589254743.json"
   },
   "data": {
    "bot_rerun": 1616672702.8297927,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/600223559.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/600675443.json"
   },
   "data": {
    "bot_rerun": 1616773756.629029,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/601732408.json"
   },
   "data": {
    "bot_rerun": 1618145268.4261935,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612961451.json"
   },
   "data": {
    "bot_rerun": 1618097580.6564953,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612979570.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.10"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/613069827.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/705890889.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/776376330.json"
   },
   "data": {
    "bot_rerun": 1639152537.3349128,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/800070258.json"
   },
   "data": {
    "bot_rerun": 1642278341.8466353,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823082464.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.12"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823747850.json"
   },
   "data": {
    "bot_rerun": 1642294163.5616448,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823801145.json"
   },
   "data": {
    "bot_rerun": 1642332277.0651033,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/823892385.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/971177621.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.14"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: 500",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "travis"
  }
 },
 "feedstock_name": "dtw-python",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "name": "dtw-python",
 "new_version": "1.1.14",
 "new_version_attempts": {
  "1.1.10": 1,
  "1.1.12": 1,
  "1.1.14": 1,
  "1.1.5": 1,
  "1.1.6": 1,
  "1.1.7": 1,
  "1.1.8": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dtw-python"
  ]
 },
 "pinning_version": "2022.06.17.10.28.32",
 "raw_meta_yaml": "{% set name = \"dtw-python\" %}\n{% set version = \"1.1.14\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n  skip: true  # [py<36 or python_impl == 'pypy']\n  entry_points:\n    - dtw = dtw.__main__:main\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython\n    - numpy >=1.19                           # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - setuptools\n  host:\n    - python\n    - pip\n    - cython\n    - numpy >=1.19\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - scipy\n\ntest:\n  imports:\n    - dtw\n  requires:\n    - pytest\n  source_files:\n    - tests\n  commands:\n    - pytest tests\n    - dtw --help\n\nabout:\n  home: https://dynamictimewarping.github.io/\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions,\n    normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc.\n  description: DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW\n    is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.\n  doc_url: https://dynamictimewarping.github.io/python/\n  dev_url: https://github.com/DynamicTimeWarping/dtw-python\n\nextra:\n  recipe-maintainers:\n    - tonigi\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cython",
   "numpy",
   "pip",
   "python",
   "scipy",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy >=1.19",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz",
 "version": "1.1.14",
 "win_64_meta_yaml": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main",
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "tonigi",
    "tonigi",
    "tonigi",
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.1.14"
  },
  "requirements": {
   "build": [
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools",
    "cython",
    "c_compiler_stub",
    "setuptools"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19",
    "python",
    "pip",
    "cython",
    "numpy >=1.19"
   ],
   "run": [
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy",
    "python",
    "numpy",
    "scipy"
   ]
  },
  "source": {
   "sha256": "9ec1baa88ba007e565d2a182f3d82c78aa356c99f2aa03d949870899b783b994",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.1.14.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help",
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw",
    "dtw",
    "dtw",
    "dtw"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 }
}