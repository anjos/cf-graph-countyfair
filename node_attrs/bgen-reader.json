{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/199896329.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Compiler",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/200481774.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/201035598.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/202040734.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/218597070.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/221497191.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/229220751.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/231733005.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/245878962.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/249616351.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/249807223.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/268447313.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/277483113.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/330986256.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/339408804.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/400307179.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/400342530.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/400375529.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/400405812.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/509619743.json"
   },
   "data": {
    "bot_rerun": 1603664400.7384117,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513595537.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/557116578.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/675919120.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.0.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/675926228.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/716395240.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "bgen-reader",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "BGEN is a file format for storing large genetic datasets.\nIt supports both unphased genotypes and phased haplotype data with variable\nploidy and number of alleles. It was designed to provides a compact data\nrepresentation without sacrificing variant access performance.\n",
   "dev_url": "https://github.com/limix/bgen-reader-py",
   "doc_url": "https://bgen-reader.readthedocs.io",
   "home": "http://github.com/limix/bgen-reader-py",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.md",
   "summary": "A BGEN file format reader"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "Horta",
    "Horta",
    "Horta"
   ]
  },
  "package": {
   "name": "bgen-reader",
   "version": "4.0.8"
  },
  "requirements": {
   "host": [
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2"
   ],
   "run": [
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0"
   ]
  },
  "source": {
   "sha256": "50414918914b8cd893d0dfa7fef32ee1912ba1802ead37d9502b3d8936d8c68a",
   "url": "https://pypi.io/packages/source/b/bgen-reader/bgen-reader-4.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\""
   ],
   "imports": [
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "appdirs",
    "cachetools",
    "cbgen",
    "dask",
    "numpy",
    "pandas",
    "pytest",
    "python",
    "requests",
    "texttable",
    "tqdm",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "BGEN is a file format for storing large genetic datasets.\nIt supports both unphased genotypes and phased haplotype data with variable\nploidy and number of alleles. It was designed to provides a compact data\nrepresentation without sacrificing variant access performance.\n",
   "dev_url": "https://github.com/limix/bgen-reader-py",
   "doc_url": "https://bgen-reader.readthedocs.io",
   "home": "http://github.com/limix/bgen-reader-py",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.md",
   "summary": "A BGEN file format reader"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "Horta",
    "Horta",
    "Horta",
    "Horta",
    "Horta",
    "Horta",
    "Horta",
    "Horta",
    "Horta"
   ]
  },
  "package": {
   "name": "bgen-reader",
   "version": "4.0.8"
  },
  "requirements": {
   "host": [
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2"
   ],
   "run": [
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0"
   ]
  },
  "source": {
   "sha256": "50414918914b8cd893d0dfa7fef32ee1912ba1802ead37d9502b3d8936d8c68a",
   "url": "https://pypi.io/packages/source/b/bgen-reader/bgen-reader-4.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\""
   ],
   "imports": [
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "name": "bgen-reader",
 "new_version": "4.0.8",
 "new_version_attempts": {
  "4.0.0": 1,
  "4.0.1": 1,
  "4.0.2": 1,
  "4.0.3": 1,
  "4.0.8": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "BGEN is a file format for storing large genetic datasets.\nIt supports both unphased genotypes and phased haplotype data with variable\nploidy and number of alleles. It was designed to provides a compact data\nrepresentation without sacrificing variant access performance.\n",
   "dev_url": "https://github.com/limix/bgen-reader-py",
   "doc_url": "https://bgen-reader.readthedocs.io",
   "home": "http://github.com/limix/bgen-reader-py",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.md",
   "summary": "A BGEN file format reader"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "Horta",
    "Horta",
    "Horta"
   ]
  },
  "package": {
   "name": "bgen-reader",
   "version": "4.0.8"
  },
  "requirements": {
   "host": [
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2"
   ],
   "run": [
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0"
   ]
  },
  "source": {
   "sha256": "50414918914b8cd893d0dfa7fef32ee1912ba1802ead37d9502b3d8936d8c68a",
   "url": "https://pypi.io/packages/source/b/bgen-reader/bgen-reader-4.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\""
   ],
   "imports": [
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "appdirs",
    "cachetools",
    "cbgen",
    "dask",
    "numpy",
    "pandas",
    "pytest",
    "python",
    "requests",
    "texttable",
    "tqdm",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "bgen-reader"
  ]
 },
 "pinning_version": "2021.08.19.19.17.07",
 "pre_pr_migrator_attempts": {
  "python310": 2,
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "python310": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1473964058\">bot CI job</a>): master: ['linux_64_python3.10.____cpython: Encountered problems while solving:\\n  - package dask-2021.4.0-pyhd3eb1b0_0 requires bokeh >=1.0.0,!=2.0.0, but none of the providers can be installed\\n', 'osx_64_python3.10.____cpython: Encountered problems while solving:\\n  - package dask-2021.4.0-pyhd3eb1b0_0 requires bokeh >=1.0.0,!=2.0.0, but none of the providers can be installed\\n', 'win_64_python3.10.____cpython: Encountered problems while solving:\\n  - package dask-2021.4.0-pyhd3eb1b0_0 requires bokeh >=1.0.0,!=2.0.0, but none of the providers can be installed\\n']",
  "python39": "not solvable: ['win_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package python_abi-3.9-1_cp39 requires python 3.9.*, but none of the providers can be installed\\n', 'win_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package scipy-1.1.0-py35hc28095f_0 requires python >=3.5,<3.6.0a0, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"bgen-reader\" %}\n{% set version = \"4.0.8\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 50414918914b8cd893d0dfa7fef32ee1912ba1802ead37d9502b3d8936d8c68a\n\nbuild:\n  number: 0\n  skip: true  # [py<37]\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python\n    - setuptools >=49.2.0\n    - wheel >=0.34.2\n  run:\n    - appdirs >=1.4.3\n    - cachetools >=3.1.1\n    - cbgen >=1.0.0\n    - dask >=2.12.0\n    - numpy >=1.17.0\n    - pandas >=1.1.1\n    - pytest >=5.4.1\n    - python\n    - requests >=1.25.8\n    - texttable >=1.6.2\n    - tqdm >=4.43.0\n    - xarray >=0.16.0\n\ntest:\n  requires:\n    - pytest\n  imports:\n    - pandas\n    - bgen_reader\n  commands:\n    - python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"\n\nabout:\n  home: http://github.com/limix/{{ name }}-py\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.md\n  summary: A BGEN file format reader\n  description: |\n    BGEN is a file format for storing large genetic datasets.\n    It supports both unphased genotypes and phased haplotype data with variable\n    ploidy and number of alleles. It was designed to provides a compact data\n    representation without sacrificing variant access performance.\n  doc_url: https://bgen-reader.readthedocs.io\n  dev_url: https://github.com/limix/{{ name }}-py\n\nextra:\n  recipe-maintainers:\n    - Horta\n",
 "req": {
  "__set__": true,
  "elements": [
   "appdirs",
   "cachetools",
   "cbgen",
   "dask",
   "numpy",
   "pandas",
   "pip",
   "pytest",
   "python",
   "requests",
   "setuptools",
   "texttable",
   "tqdm",
   "wheel",
   "xarray"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "appdirs",
    "cachetools",
    "cbgen",
    "dask",
    "numpy",
    "pandas",
    "pytest",
    "python",
    "requests",
    "texttable",
    "tqdm",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "smithy_version": "3.12",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/b/bgen-reader/bgen-reader-4.0.8.tar.gz",
 "version": "4.0.8",
 "win_64_meta_yaml": {
  "about": {
   "description": "BGEN is a file format for storing large genetic datasets.\nIt supports both unphased genotypes and phased haplotype data with variable\nploidy and number of alleles. It was designed to provides a compact data\nrepresentation without sacrificing variant access performance.\n",
   "dev_url": "https://github.com/limix/bgen-reader-py",
   "doc_url": "https://bgen-reader.readthedocs.io",
   "home": "http://github.com/limix/bgen-reader-py",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.md",
   "summary": "A BGEN file format reader"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "Horta",
    "Horta",
    "Horta"
   ]
  },
  "package": {
   "name": "bgen-reader",
   "version": "4.0.8"
  },
  "requirements": {
   "host": [
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2",
    "pip",
    "python",
    "setuptools >=49.2.0",
    "wheel >=0.34.2"
   ],
   "run": [
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0",
    "appdirs >=1.4.3",
    "cachetools >=3.1.1",
    "cbgen >=1.0.0",
    "dask >=2.12.0",
    "numpy >=1.17.0",
    "pandas >=1.1.1",
    "pytest >=5.4.1",
    "python",
    "requests >=1.25.8",
    "texttable >=1.6.2",
    "tqdm >=4.43.0",
    "xarray >=0.16.0"
   ]
  },
  "source": {
   "sha256": "50414918914b8cd893d0dfa7fef32ee1912ba1802ead37d9502b3d8936d8c68a",
   "url": "https://pypi.io/packages/source/b/bgen-reader/bgen-reader-4.0.8.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\"",
    "python -c \"import sys; import pandas; import bgen_reader; sys.exit(bgen_reader.test())\""
   ],
   "imports": [
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader",
    "pandas",
    "bgen_reader"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "appdirs",
    "cachetools",
    "cbgen",
    "dask",
    "numpy",
    "pandas",
    "pytest",
    "python",
    "requests",
    "texttable",
    "tqdm",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 }
}