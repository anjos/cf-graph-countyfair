{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/241526851.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/262326511.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "BlasRebuild",
    "migrator_version": 0,
    "name": "blas2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "compiler_stack": "comp7",
  "provider": {
   "linux_aarch64": "default"
  }
 },
 "feedstock_name": "simbody",
 "hash_type": "sha256",
 "name": "simbody",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "simbody"
  ]
 },
 "pinning_version": "2019.03.17",
 "raw_meta_yaml": "{% set version = \"3.7\" %}\n\npackage:\n    name: simbody\n    version: {{ version }}\n\nsource:\n    fn: Simbody-{{ version }}.tar.gz\n    url: https://github.com/simbody/simbody/archive/Simbody-{{ version }}.tar.gz\n    sha256: d371a92d440991400cb8e8e2473277a75307abb916e5aabc14194bea841b804a\n    patches:\n      - 716.patch\n\nbuild:\n    number: 3\n    run_exports:\n        - {{ pin_subpackage('simbody', max_pin='x.x') }}\n    # NOTE : This is needed to ensure the paths to Simbody's binaries, like\n    # simbody-visualizer, are corrected.\n    detect_binary_files_with_prefix: true\n\n# NOTE: This installs Simbody and the optional visualizer on Linux, Windows,\n# and OSX. On Windows, we build against the openblas available in conda-forge,\n# which includes lapack, because the other blas/lapack packages do not provide\n# import libraries (*.lib). We only depend on Glut on Linux, because Glut is\n# included with Simbody for Windows and OSX includes a Glut implementation.\n# https://github.com/AnacondaRecipes/r-rgl-feedstock/blob/master/recipe/meta.yaml#L48-L67\nrequirements:\n    build:\n        # CMake 3.8 provides imported targets for OpenGL.\n        - cmake >=3.8\n        - ninja  # [win]\n        - make  # [unix]\n        - doxygen\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ cdt('xorg-x11-proto-devel') }}  # [linux]\n        - {{ cdt('mesa-libgl-devel') }}      # [linux]\n        - {{ cdt('libx11-devel') }}          # [linux]\n        - {{ cdt('libxext-devel') }}         # [linux]\n        - {{ cdt('libxrender-devel') }}      # [linux]\n        - {{ cdt('mesa-libegl-devel') }}     # [linux]\n        - {{ cdt('mesa-dri-drivers') }}      # [linux]\n        - {{ cdt('libxau-devel') }}          # [linux]\n        - {{ cdt('libdrm-devel') }}          # [linux]\n        - {{ cdt('libxcomposite-devel') }}   # [linux]\n        - {{ cdt('libxcursor-devel') }}      # [linux]\n        - {{ cdt('libxi-devel') }}           # [linux]\n        - {{ cdt('libxrandr-devel') }}       # [linux]\n        - {{ cdt('libxscrnsaver-devel') }}   # [linux]\n        - {{ cdt('libxtst-devel') }}         # [linux]\n        - {{ cdt('libselinux-devel') }}      # [linux]\n        - {{ cdt('libxdamage') }}            # [linux]\n        - {{ cdt('libxcb') }}                # [linux]\n        - {{ cdt('libx11-devel') }}          # [linux]\n        - {{ cdt('libxfixes-devel') }}       # [linux]\n        - {{ cdt('libsm-devel') }}           # [linux]\n        - {{ cdt('libice-devel') }}          # [linux]\n        - {{ cdt('libxt') }}                 # [linux]\n        - {{ cdt('libxt-devel') }}           # [linux]\n        - {{ cdt('libxcb') }}                # [linux]\n        - {{ cdt('libxau') }}                # [linux]\n        - {{ cdt('libxxf86vm') }}            # [linux]\n        - {{ cdt('expat') }}                 # [linux]\n    host:\n        - openblas  # [win]\n        - libblas  # [not win]\n        - liblapack  # [not win]\n        - libglu  # [linux]\n        - freeglut  # [linux]\n        - xorg-libxmu  # [linux]\n    run:\n        - openblas  # [win]\n        - libglu  # [linux]\n        - freeglut  # [linux]\n        # Keep compatibility with old versions of simbody that on Windows installed dirent.h \n        # see https://github.com/conda-forge/simbody-feedstock/issues/39\n        - dirent  # [win]\ntest:\n  commands:\n    - test -f $PREFIX/libexec/simbody/simbody-visualizer              # [linux]\n    - test -f $PREFIX/libexec/simbody/simbody-visualizer.app/Contents/MacOS/simbody-visualizer  # [osx]\n    - if not exist %LIBRARY_BIN%\\\\simbody-visualizer.exe exit 1       # [win]\n    - test -f $PREFIX/include/simbody/Simbody.h                       # [unix]\n    - test -f $PREFIX/include/simbody/SimTKcommon.h                   # [unix]\n    - test -f $PREFIX/include/simbody/SimTKlapack.h                   # [unix]\n    - test -f $PREFIX/include/simbody/SimTKmath.h                     # [unix]\n    - test -f $PREFIX/include/simbody/SimTKsimbody_aux.h              # [unix]\n    - test -f $PREFIX/include/simbody/SimTKsimbody.h                  # [unix]\n    - if not exist %LIBRARY_INC%\\\\Simbody.h exit 1                    # [win]\n    - if not exist %LIBRARY_INC%\\\\SimTKcommon.h exit 1                # [win]\n    - if not exist %LIBRARY_INC%\\\\SimTKlapack.h exit 1                # [win]\n    - if not exist %LIBRARY_INC%\\\\SimTKmath.h exit 1                  # [win]\n    - if not exist %LIBRARY_INC%\\\\SimTKsimbody_aux.h exit 1           # [win]\n    - if not exist %LIBRARY_INC%\\\\SimTKsimbody.h exit 1               # [win]\n    - test -f $PREFIX/lib/libSimTKcommon.so                           # [linux]\n    - test -f $PREFIX/lib/libSimTKmath.so                             # [linux]\n    - test -f $PREFIX/lib/libSimTKsimbody.so                          # [linux]\n    - test -f $PREFIX/lib/libSimTKcommon.dylib                        # [osx]\n    - test -f $PREFIX/lib/libSimTKmath.dylib                          # [osx]\n    - test -f $PREFIX/lib/libSimTKsimbody.dylib                       # [osx]\n    - if not exist %LIBRARY_BIN%\\\\SimTKcommon.dll exit 1              # [win]\n    - if not exist %LIBRARY_BIN%\\\\SimTKmath.dll exit 1                # [win]\n    - if not exist %LIBRARY_BIN%\\\\SimTKsimbody.dll exit 1             # [win]\n    # Regression test for https://github.com/conda-forge/simbody-feedstock/issues/39\n    - if exist %LIBRARY_INC%\\\\dirent.h exit 1                    # [win]\n  files:\n    - test\n  requires:\n    - cmake >=3.8\n    - make  # [unix]\n    - ninja  # [win]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n\nabout:\n    home: https://simtk.org/home/simbody\n    license: Apache-2.0\n    license_file: LICENSE.txt\n    dev_url: https://github.com/simbody/simbody\n    doc_url: https://simbody.github.io\n    summary: >\n        High-performance C++ multibody dynamics/physics library for simulating\n        articulated biomechanical and mechanical systems like vehicles, robots,\n        and the human skeleton.\n\nextra:\n    recipe-maintainers:\n        - moorepants\n        - chrisdembia\n",
 "smithy_version": "3.2.14",
 "strong_exports": false,
 "url": "https://github.com/simbody/simbody/archive/Simbody-3.7.tar.gz",
 "version": "3.7"
}