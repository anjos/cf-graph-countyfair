{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/940312301.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pyodc",
 "hash_type": "sha256",
 "name": "pyodc",
 "new_version": "1.1.3",
 "new_version_attempts": {
  "1.1.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyodc"
  ]
 },
 "pinning_version": "2022.05.18.07.20.58",
 "raw_meta_yaml": "{% set name = \"pyodc\" %}\n{% set version = \"1.1.2\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/ecmwf/{{ name }}/archive/refs/tags/{{ version }}.tar.gz\n  sha256: 72d30608a03209ea9213f7a0e577d06877a93e69b768c44ad2fada6d3bd36f6b\n\nbuild:\n  number: 1\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n    - cffi\n    - pandas\n\ntest:\n  imports:\n    - pyodc\n  requires:\n    - pip\n    - pytest\n    - odc  # [not win]\n  source_files:\n    - CHANGELOG.md\n    - codc\n    - tests\n    - pyodc\n    - README.md\n    - setup.py\n  commands:\n    - pip check\n    - ODC_DIR=$PREFIX python -c \"import codc\"  # [not win]\n    - ODC_DIR=$PREFIX python -m pytest  # [not win]\n\nabout:\n  home: https://pypi.org/project/pyodc/\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: 'A Python interface to odc for encoding/decoding ODB-2 files'\n  description: |\n    The package contains two different implementations of the same library:\n\n    * pyodc is a pure-python encoder and decoder for ODB-2 data, which encodes\n      data from, and decodes it into pandas data frames\n    * codc is an implementation of the same API as pyodc that depends on the\n      ECMWF odc library, and comes with _much_ better performance\n  doc_url: https://pyodc.readthedocs.io/en/latest/\n  dev_url: https://github.com/ecmwf/pyodc\n\nextra:\n  recipe-maintainers:\n    - simondsmart\n    - dvuckovic\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/ecmwf/pyodc/archive/refs/tags/1.1.2.tar.gz",
 "version": "1.1.2"
}