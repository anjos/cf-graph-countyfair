{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/320080931.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/340490465.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/415596571.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/504188160.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/627836264.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "fluidfft",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Fluidfft provides C++ classes and their Python wrapper classes written in\nCython useful to perform Fast Fourier Transform (FFT) with different\nlibraries\n",
   "doc_url": "https://fluidfft.readthedocs.io",
   "home": "https://foss.heptapod.net/fluiddyn/fluidfft",
   "license": "LicenseRef-CeCILL",
   "license_file": "LICENSE.txt",
   "summary": "Efficient and easy Fast Fourier Transform (FFT) for Python."
  },
  "build": {
   "entry_points": [
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run"
   ],
   "number": "101",
   "run_exports": [
    "fluidfft * mpi_mpich_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_mpich_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_mpich_*",
    "fluidfft * mpi_openmpi_*"
   ],
   "string": "nompi_h1234567_101"
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis"
   ]
  },
  "package": {
   "name": "fluidfft",
   "version": "0.3.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas"
   ],
   "run": [
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw"
   ]
  },
  "source": {
   "sha256": "9f1bb551a45a1ad196d8f1f8c81eb0611299f84a0320a1f910e54601e2bae39f",
   "url": "https://pypi.io/packages/source/f/fluidfft/fluidfft-0.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3"
   ],
   "imports": [
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "fftw",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pip",
    "python",
    "pythran",
    "transonic"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "fluiddyn",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pandas",
    "pyfftw",
    "python",
    "transonic"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Fluidfft provides C++ classes and their Python wrapper classes written in\nCython useful to perform Fast Fourier Transform (FFT) with different\nlibraries\n",
   "doc_url": "https://fluidfft.readthedocs.io",
   "home": "https://foss.heptapod.net/fluiddyn/fluidfft",
   "license": "LicenseRef-CeCILL",
   "license_file": "LICENSE.txt",
   "summary": "Efficient and easy Fast Fourier Transform (FFT) for Python."
  },
  "build": {
   "entry_points": [
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run"
   ],
   "number": "101",
   "run_exports": [
    "fluidfft * mpi_mpich_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_mpich_*"
   ],
   "string": "nompi_h1234567_101"
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis"
   ]
  },
  "package": {
   "name": "fluidfft",
   "version": "0.3.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas"
   ],
   "run": [
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw"
   ]
  },
  "source": {
   "sha256": "9f1bb551a45a1ad196d8f1f8c81eb0611299f84a0320a1f910e54601e2bae39f",
   "url": "https://pypi.io/packages/source/f/fluidfft/fluidfft-0.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3"
   ],
   "imports": [
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util"
   ]
  }
 },
 "name": "fluidfft",
 "new_version": "0.3.2",
 "new_version_attempts": {
  "0.3.1": 1,
  "0.3.2": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Fluidfft provides C++ classes and their Python wrapper classes written in\nCython useful to perform Fast Fourier Transform (FFT) with different\nlibraries\n",
   "doc_url": "https://fluidfft.readthedocs.io",
   "home": "https://foss.heptapod.net/fluiddyn/fluidfft",
   "license": "LicenseRef-CeCILL",
   "license_file": "LICENSE.txt",
   "summary": "Efficient and easy Fast Fourier Transform (FFT) for Python."
  },
  "build": {
   "entry_points": [
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run"
   ],
   "number": "1",
   "run_exports": [
    "fluidfft * mpi_mpich_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_openmpi_*",
    "fluidfft * mpi_mpich_*"
   ],
   "string": "mpi_mpich_h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis"
   ]
  },
  "package": {
   "name": "fluidfft",
   "version": "0.3.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "openmpi",
    "openssh",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "mpich",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "jinja2",
    "cython",
    "mpi4py",
    "pythran",
    "libblas",
    "libcblas"
   ],
   "run": [
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "openmpi",
    "mpi4py",
    "openssh",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_openmpi_*",
    "pyfftw",
    "python",
    "mpich",
    "mpi4py",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "fftw * mpi_mpich_*",
    "pyfftw"
   ]
  },
  "source": {
   "sha256": "9f1bb551a45a1ad196d8f1f8c81eb0611299f84a0320a1f910e54601e2bae39f",
   "url": "https://pypi.io/packages/source/f/fluidfft/fluidfft-0.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3"
   ],
   "imports": [
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft.fft2d.with_fftw2d",
    "fluidfft.fft3d.with_fftw3d",
    "fluidfft.fft2d.mpi_with_fftw1d",
    "fluidfft.fft3d.mpi_with_fftw1d",
    "fluidfft.fft2d.mpi_with_fftwmpi2d",
    "fluidfft.fft3d.mpi_with_fftwmpi3d"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "fftw",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pip",
    "python",
    "pythran",
    "transonic"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "fluiddyn",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pandas",
    "pyfftw",
    "python",
    "transonic"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "fluidfft"
  ]
 },
 "pinning_version": "2021.04.30.14.06.07",
 "raw_meta_yaml": "{% set name = \"fluidfft\" %}\n{% set version = \"0.3.2\" %}\n{% set build = 1 %}\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n{% if mpi == 'nompi' %}\n# prioritize nompi variant via build number\n{% set build = build + 100 %}\n{% endif %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 9f1bb551a45a1ad196d8f1f8c81eb0611299f84a0320a1f910e54601e2bae39f\n\nbuild:\n  number: {{ build }}\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\n\n  {% if mpi != 'nompi' %}\n\n  run_exports:\n    - {{ name }} * {{ mpi_prefix }}_*\n\n  {% endif %}\n\n  # skip: true  # [win and (mpi != 'nompi')]\n  skip: true  # [py<36 or (osx and py==36)]\n  entry_points:\n    - fluidfft-bench = fluidfft.bench:run\n    - fluidfft-bench-analysis = fluidfft.bench_analysis:run\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n  host:\n    - pip\n    - python\n    - {{ mpi }}  # [ mpi != 'nompi' ]\n    - openssh  # [ mpi == 'openmpi' ]\n    - transonic\n    - fftw\n    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - jinja2\n    - cython\n    - mpi4py  # [ mpi != 'nompi' ]\n    - pythran  # [ not win ]\n    - libblas\n    - libcblas\n  run:\n    - python\n    - {{ mpi }}  # [ mpi != 'nompi' ]\n    - mpi4py  # [ mpi != 'nompi' ]\n    - openssh  # [ mpi == 'openmpi' ]\n    - fluiddyn\n    - pandas\n    - transonic\n    - fftw\n    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - pyfftw\n\ntest:\n  imports:\n    - fluidfft\n    - fluidfft.bench\n    - fluidfft.bench_analysis\n    - fluidfft.fft2d\n    - fluidfft.fft3d\n    - fluidfft.test_init\n    - fluidfft.util\n    - fluidfft.fft2d.with_fftw2d  # [not win]\n    - fluidfft.fft3d.with_fftw3d  # [not win]\n    - fluidfft.fft2d.mpi_with_fftw1d  # [ mpi != 'nompi' ]\n    - fluidfft.fft3d.mpi_with_fftw1d  # [ mpi != 'nompi' ]\n    - fluidfft.fft2d.mpi_with_fftwmpi2d  # [ mpi != 'nompi' ]\n    - fluidfft.fft3d.mpi_with_fftwmpi3d  # [ mpi != 'nompi' ]\n  commands:\n    - fluidfft-bench\n    - fluidfft-bench-analysis\n    - fluidfft-bench 32 -d 3\n\nabout:\n  home: https://foss.heptapod.net/fluiddyn/fluidfft\n  license: LicenseRef-CeCILL\n  license_file: LICENSE.txt\n  summary: Efficient and easy Fast Fourier Transform (FFT) for Python.\n  description: |\n    Fluidfft provides C++ classes and their Python wrapper classes written in\n    Cython useful to perform Fast Fourier Transform (FFT) with different\n    libraries\n  doc_url: https://fluidfft.readthedocs.io\n\nextra:\n  recipe-maintainers:\n    - CyrilleBonamy\n    - paugier\n    - ashwinvis\n",
 "req": {
  "__set__": true,
  "elements": [
   "cxx_compiler_stub",
   "cython",
   "fftw",
   "fluiddyn",
   "jinja2",
   "libblas",
   "libcblas",
   "mpi4py",
   "mpich",
   "openmpi",
   "openssh",
   "pandas",
   "pip",
   "pyfftw",
   "python",
   "pythran",
   "transonic"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "cython",
    "fftw",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pip",
    "python",
    "pythran",
    "transonic"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "fftw",
    "fluiddyn",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pandas",
    "pyfftw",
    "python",
    "transonic"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "fftw",
    "fftw * mpi_mpich_*",
    "fftw * mpi_openmpi_*",
    "jinja2",
    "libblas",
    "libcblas",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pip",
    "python",
    "pythran",
    "transonic"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "fftw * mpi_mpich_*",
    "fftw * mpi_openmpi_*",
    "fluiddyn",
    "mpi4py",
    "mpich",
    "openmpi",
    "openssh",
    "pandas",
    "pyfftw",
    "python",
    "transonic"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/f/fluidfft/fluidfft-0.3.2.tar.gz",
 "version": "0.3.2",
 "win_64_meta_yaml": {
  "about": {
   "description": "Fluidfft provides C++ classes and their Python wrapper classes written in\nCython useful to perform Fast Fourier Transform (FFT) with different\nlibraries\n",
   "doc_url": "https://fluidfft.readthedocs.io",
   "home": "https://foss.heptapod.net/fluiddyn/fluidfft",
   "license": "LicenseRef-CeCILL",
   "license_file": "LICENSE.txt",
   "summary": "Efficient and easy Fast Fourier Transform (FFT) for Python."
  },
  "build": {
   "entry_points": [
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run",
    "fluidfft-bench = fluidfft.bench:run",
    "fluidfft-bench-analysis = fluidfft.bench_analysis:run"
   ],
   "number": "101",
   "string": "nompi_h1234567_101"
  },
  "extra": {
   "recipe-maintainers": [
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis",
    "CyrilleBonamy",
    "paugier",
    "ashwinvis"
   ]
  },
  "package": {
   "name": "fluidfft",
   "version": "0.3.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic",
    "fftw",
    "jinja2",
    "cython",
    "libblas",
    "libcblas"
   ],
   "run": [
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw",
    "python",
    "fluiddyn",
    "pandas",
    "transonic",
    "fftw",
    "pyfftw"
   ]
  },
  "source": {
   "sha256": "9f1bb551a45a1ad196d8f1f8c81eb0611299f84a0320a1f910e54601e2bae39f",
   "url": "https://pypi.io/packages/source/f/fluidfft/fluidfft-0.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3",
    "fluidfft-bench",
    "fluidfft-bench-analysis",
    "fluidfft-bench 32 -d 3"
   ],
   "imports": [
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util",
    "fluidfft",
    "fluidfft.bench",
    "fluidfft.bench_analysis",
    "fluidfft.fft2d",
    "fluidfft.fft3d",
    "fluidfft.test_init",
    "fluidfft.util"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "fftw",
    "jinja2",
    "libblas",
    "libcblas",
    "pip",
    "python",
    "transonic"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "fluiddyn",
    "pandas",
    "pyfftw",
    "python",
    "transonic"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}