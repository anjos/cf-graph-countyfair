{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1156230996.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156232149.json"
   },
   "data": {
    "bot_rerun": 1670621369.092475,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156254036.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156323872.json"
   },
   "data": {
    "bot_rerun": 1670621369.0926814,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156732916.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156809612.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "ale-py",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": null
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": null
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": null
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": null
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "ale-py",
 "new_version": "0.8.0",
 "osx_64_meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "llvm-tools",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": [
    "__osx >=10.15",
    "__osx >=10.15",
    "__osx >=10.15",
    "__osx >=10.15"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0003-build-shared-libs.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "llvm-tools",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ale-py"
  ]
 },
 "pinning_version": "2022.12.09.20.17.28",
 "raw_meta_yaml": "{% set version = \"0.8.0\" %}\n\npackage:\n  name: ale-py\n  version: {{ version }}\n\nsource:\n  url: https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99\n  patches:\n    # upstream avoids ninja on windows, but we don't need to\n    - patches/0001-unconditionally-use-ninja.patch\n    - patches/0002-unvendor-pybind11.patch\n    - patches/0003-build-shared-libs.patch  # [not win]\n    - patches/0004-avoid-vcpkg-toolchain.patch\n    - patches/0005-fix-python-executable.patch\n    - patches/0006-fix-installation-on-windows.patch\n\nbuild:\n  number: 1\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    # for llvm-ar\n    - llvm-tools             # [osx]\n    - cmake\n    - ninja\n    - pybind11                               # [build_platform != target_platform]\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n  host:\n    - python\n    - pybind11\n    - pip\n    - libiconv\n    - sdl2\n    - zlib\n  run:\n    - python\n    # not clear where these come from, but enforced by pip check\n    - importlib-metadata\n    - importlib-resources\n    - typing-extensions\n    - numpy\n  run_constrained:\n    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx and x86_64]\n\ntest:\n  imports:\n    - ale_py\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/mgbellemare/Arcade-Learning-Environment\n  license: GPL-2.0-only\n  license_family: GPL\n  license_file: LICENSE.md\n  summary: The Arcade Learning Environment (ALE) -- a platform for AI research.\n  description: |\n    The Arcade Learning Environment (ALE) is a simple framework that allows\n    researchers and hobbyists to develop AI agents for Atari 2600 games.\n  dev_url: https://github.com/mgbellemare/Arcade-Learning-Environment\n\nextra:\n  recipe-maintainers:\n    - h-vetinari\n    - Tobias-Fischer\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cxx_compiler_stub",
   "importlib-metadata",
   "importlib-resources",
   "libiconv",
   "llvm-tools",
   "ninja",
   "numpy",
   "pip",
   "pybind11",
   "python",
   "sdl2",
   "typing-extensions",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "llvm-tools",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.22.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "llvm-tools",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz",
 "version": "0.8.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "The Arcade Learning Environment (ALE) is a simple framework that allows\nresearchers and hobbyists to develop AI agents for Atari 2600 games.\n",
   "dev_url": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "home": "https://github.com/mgbellemare/Arcade-Learning-Environment",
   "license": "GPL-2.0-only",
   "license_family": "GPL",
   "license_file": "LICENSE.md",
   "summary": "The Arcade Learning Environment (ALE) -- a platform for AI research."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer",
    "h-vetinari",
    "Tobias-Fischer"
   ]
  },
  "package": {
   "name": "ale-py",
   "version": "0.8.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib",
    "python",
    "pybind11",
    "pip",
    "libiconv",
    "sdl2",
    "zlib"
   ],
   "run": [
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy",
    "python",
    "importlib-metadata",
    "importlib-resources",
    "typing-extensions",
    "numpy"
   ],
   "run_constrained": null
  },
  "source": {
   "patches": [
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch",
    "patches/0001-unconditionally-use-ninja.patch",
    "patches/0002-unvendor-pybind11.patch",
    "patches/0004-avoid-vcpkg-toolchain.patch",
    "patches/0005-fix-python-executable.patch",
    "patches/0006-fix-installation-on-windows.patch"
   ],
   "sha256": "9a9f1ad6cd61dfb26895314d409ba69da038b7def295b509964e579027fefd99",
   "url": "https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v0.8.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "ale_py",
    "ale_py",
    "ale_py",
    "ale_py"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libiconv",
    "pip",
    "pybind11",
    "python",
    "sdl2",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "importlib-metadata",
    "importlib-resources",
    "numpy",
    "python",
    "typing-extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}