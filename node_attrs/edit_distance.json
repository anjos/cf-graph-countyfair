{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/349123833.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "edit_distance",
 "hash_type": "sha256",
 "name": "edit_distance",
 "new_version": "1.0.4",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "edit_distance"
  ]
 },
 "pinning_version": "2019.12.02",
 "raw_meta_yaml": "{% set name = \"edit_distance\" %}\n{% set version = \"1.0.4\" %}\n{% set sha256 = \"89bc025a9683601cb08215672f49c513c8025b3c7e63a2f9f48fbcc034eae8a5\" %}\n\npackage:\n  name: '{{ name|lower }}'\n  version: '{{ version }}'\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  noarch: python\n  entry_points:\n    - edit-distance = edit_distance.code:main\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n\ntest:\n  imports:\n    - edit_distance\n  commands:\n    - edit-distance ${RECIPE_DIR}/meta.yaml ${RECIPE_DIR}/meta.yaml  # [not win]\n    - edit-distance %RECIPE_DIR%/meta.yaml %RECIPE_DIR%/meta.yaml  # [win]\n\nabout:\n  home: https://github.com/belambert/editdistance\n  license: BSD-2-Clause\n  license_family: BSD\n  license_file: '{{ environ[\"RECIPE_DIR\"] }}/LICENSE.txt'\n  summary: Computing edit distance on arbitrary Python sequences.\n  description: |\n    Python module for computing edit distances and alignments between sequences.\n    I needed a way to compute edit distances between sequences in Python. I \n    wasn't able to find any appropriate libraries that do this so I wrote my \n    own. There appear to be numerous edit distance libraries available for \n    computing edit distances between two strings, but not between two sequences.\n    This is written entirely in Python. This implementation could likely be \n    optimized to be faster within Python. And could probably be much faster if\n    implemented in C. \n    The library API is modeled after difflib.SequenceMatcher. This is very \n    similar to difflib, except that this module computes edit distance \n    (Levenshtein distance) rather than the Ratcliff and Oberhelp method \n    that Python's difflib uses.\n  doc_url: http://edit-distance.readthedocs.io/en/latest/\n  dev_url: https://github.com/belambert/edit-distance\n\nextra:\n  recipe-maintainers:\n    - CurtLH\n",
 "smithy_version": "3.6.3",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/e/edit_distance/edit_distance-1.0.4.tar.gz",
 "version": "1.0.4"
}