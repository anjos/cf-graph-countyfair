{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/850146044.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/851349689.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "hackrf",
 "hash_type": "sha256",
 "name": "hackrf-split",
 "new_version": "2021.03.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "hackrf",
   "libhackrf",
   "libhackrf0"
  ]
 },
 "pinning_version": "2022.02.13.04.39.31",
 "raw_meta_yaml": "{% set version = \"2021.03.1\" %}\n{% set lib_major_version = \"0\" %}\n\npackage:\n  name: hackrf-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/greatscottgadgets/hackrf/releases/download/v{{ version }}/hackrf-{{ version }}.tar.xz\n  sha256: a43e5080c11efdfe69ddebcc35a02b018e30e820de0e0ebdc7948cf7b0cd93a3\n  patches:\n    - 0001-Rename-hackrf.dll-to-hackrf-0.dll-on-Windows.patch\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - cmake\n    # libudev is on its own in CentOS 6, packaged with systemd in CentOS 7\n    - {{ cdt('libudev-devel') }}  # [linux and cdt_name=='cos6']\n    - ninja\n    - pkg-config\n  host:\n    - fftw\n    - libusb\n    # restrict to cos6-compatible libusb (and libudev)\n    - libusb-cos6  # [linux and cdt_name=='cos6']\n    - pthreads-win32  # [win]\n\noutputs:\n  - name: libhackrf{{ lib_major_version }}\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n      host:\n        - libusb\n        # restrict to cos6-compatible libusb (and libudev)\n        - libusb-cos6  # [linux and cdt_name=='cos6']\n        - pthreads-win32  # [win]\n      run:\n        - pthreads-win32  # [win]\n    test:\n      commands:\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libhackrf${SHLIB_EXT}.{{ lib_major_version }}  # [linux]\n        - test -f $PREFIX/lib/libhackrf.{{ lib_major_version }}${SHLIB_EXT}  # [osx]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\hackrf-{{ lib_major_version }}.dll exit 1  # [win]\n  - name: libhackrf\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libhackrf' + lib_major_version, max_pin=False) }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n      host:\n        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}\n      run:\n        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}\n    test:\n      commands:\n        # verify that headers get installed\n        - test -f $PREFIX/include/libhackrf/hackrf.h  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\libhackrf\\\\hackrf.h exit 1  # [win]\n\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libhackrf${SHLIB_EXT}.{{ lib_major_version }}  # [linux]\n        - test -f $PREFIX/lib/libhackrf.{{ lib_major_version }}${SHLIB_EXT}  # [osx]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\hackrf-{{ lib_major_version }}.dll exit 1  # [win]\n\n        # verify that pkgconfig files get installed\n        - test -f $PREFIX/lib/pkgconfig/libhackrf.pc  # [unix]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\pkgconfig\\\\libhackrf.pc exit 1  # [win]\n  - name: hackrf\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n      host:\n        - fftw\n        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}\n      run:\n        - {{ pin_subpackage('libhackrf' + lib_major_version, exact=True) }}\n    test:\n      commands:\n        # make it possible to check !ERRORLEVEL! after || on Windows\n        - setlocal EnableDelayedExpansion  # [win]\n\n        # verify that executables get installed\n        {% set cmds = [\"clock\", \"cpldjtag\", \"debug\", \"operacake\", \"spiflash\"] %}\n        {% set cmds = cmds + [\"sweep\", \"transfer\"] %}\n        {% for cmd in cmds %}\n        - hackrf_{{ cmd }} -h\n        {% endfor %}\n        # hackrf_info does not have help flag, exits 1 when device not found\n        - hackrf_info || ec=$?; if [ $ec -gt 1 ]; then exit $ec; fi  # [not win]\n        - hackrf_info || if !ERRORLEVEL! LEQ 1 cmd /c \"exit /b 0\"  # [win]\n\n        # verify that udev rule gets installed\n        - test -f $PREFIX/lib/udev/rules.d/53-hackrf.rules  # [linux]\n\nabout:\n  home: https://greatscottgadgets.com/hackrf\n  license: GPL-2.0-or-later\n  license_family: GPL\n  license_file: COPYING\n  summary: 'Host software for HackRF, a low cost, open source software radio platform.'\n  # The remaining entries in this section are optional, but recommended.\n  description: >\n    HackRF One from Great Scott Gadgets is a Software Defined Radio peripheral\n    capable of transmission or reception of radio signals from 1 MHz to 6 GHz.\n    Designed to enable test and development of modern and next generation radio\n    technologies, HackRF One is an open source hardware platform that can be\n    used as a USB peripheral or programmed for stand-alone operation.\n\n    The `libhackrf{{ lib_major_version }}` package contains the library for\n    HackRF devices, the `libhackrf` contains the development files for\n    compiling against the HackRF library, and the `hackrf` package contains\n    command line tools for using the devices.\n\n    For Linux users of `hackrf`, you will likely want to link the provided udev\n    rule into your system installation in order for the hardware to have the\n    correct permissions:\n\n        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/53-hackrf.rules /etc/udev/rules.d/\n        sudo udevadm control --reload\n        sudo udevadm trigger\n\n    Then, make sure your user account belongs to the plugdev group in order to\n    be able to access your device:\n\n        sudo usermod -a -G plugdev <user>\n\n    You may have to restart for this change to take effect.\n  doc_url: https://hackrf.readthedocs.io/en/latest/\n  dev_url: https://github.com/greatscottgadgets/hackrf\n\nextra:\n  feedstock-name: hackrf\n  recipe-maintainers:\n    - ryanvolz\n",
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "url": "https://github.com/greatscottgadgets/hackrf/releases/download/v2021.03.1/hackrf-2021.03.1.tar.xz",
 "version": "2021.03.1"
}