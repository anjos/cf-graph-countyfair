{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/420323222.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/420324355.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501883802.json"
   },
   "data": {
    "bot_rerun": 1603118416.8746378,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/506049711.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/555729430.json"
   },
   "data": {
    "bot_rerun": 1633309482.313121,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/571132272.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/748372223.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/748492903.json"
   },
   "data": {
    "bot_rerun": 1636025507.2829895,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/773137953.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/773257315.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/926486390.json"
   },
   "data": {
    "bot_rerun": 1655469143.435341,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/970623106.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/993246757.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "8.42.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1005869863.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "8.42.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "framel",
 "hash_type": "sha256",
 "name": "framel-split",
 "new_version": "8.42.3",
 "new_version_attempts": {
  "8.42.2": 1,
  "8.42.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "framel",
   "libframel",
   "python-framel"
  ]
 },
 "pinning_version": "2022.07.22.12.54.13",
 "pre_pr_migrator_attempts": {
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "python39": "not solvable: ['Encountered problems while solving.\\nProblem: package numpy-1.16.2-py27hde85f9e_1 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package numpy-base-1.16.0-py27ha711998_0 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package numpy-base-1.16.0-py27hde5b4d6_0 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"framel\" %}\n{% set version = \"8.42.2\" %}\n\n# handle Virgo version number format\n{% set semver_version = version|\n    replace('v', '', 1)|\n    replace('r', '.', 1)|\n    replace('p', '.', 1)\n %}\n\npackage:\n  name: {{ name|lower }}-split\n  version: {{ semver_version }}\n\nsource:\n  url: https://git.ligo.org/virgo/virgoapp/Fr/-/archive/{{ version }}/Fr-{{ version }}.tar.gz\n  sha256: c224bc34bb70565866af564eb8ab655ac150009b554819417ec2af6e216466bd\n  patches:\n    # mkdir on mingw only takes one argument\n    - mkdir.patch  # [win]\n\nbuild:\n  error_overdepending: true\n  error_overlinking: true\n  number: 0\n\nrequirements:\n  build:\n    - {{ compiler('c') }}  # [not win]\n    - {{ compiler('m2w64_c') }}  # [win]\n    - cmake\n    - make  # [not win]\n    - ninja  # [win]\n\noutputs:\n  - name: libframel\n    build:\n      run_exports:\n        - {{ pin_subpackage(\"libframel\", max_pin=\"x\") }}\n      ignore_run_exports:\n        - m2w64-gcc-libs  # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}  # [not win]\n        - {{ compiler('m2w64_c') }}  # [win]\n      run_constained:\n        - libframe >=9999\n    files:\n      - include/  # [not win]\n      - lib/libframel.*  # [not win]\n      - lib/pkgconfig/framel.pc  # [not win]\n      - Library/include/  # [win]\n      - Library/bin/libframel.dll  # [win]\n      - Library/lib/libframel.*  # [win]\n      - Library/lib/pkgconfig/framel.pc  # [win]\n    test:\n      requires:\n        - pkg-config  # [not win]\n      commands:\n        - test \"$(pkg-config --print-errors --modversion framel)\" == \"${PKG_VERSION}\"  # [not win]\n    about:\n      home: http://lappweb.in2p3.fr/virgo/FrameL/\n      license: LGPL-2.1-or-later\n      license_family: LGPL\n      license_file: LICENSE\n      summary: LIGO/Virgo Frame Library\n      description: |\n        A Common Data Frame Format for Interferometric Gravitational Wave\n        Detector has been developed by VIRGO and LIGO.\n        The Frame Library is a software dedicated to the frame manipulation\n        including file input/output.\n        This package provides the `libframel` shared library and development\n        files.\n\n  - name: framel\n    build:\n      ignore_run_exports:\n        - m2w64-gcc-libs  # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}  # [not win]\n        - {{ compiler('m2w64_c') }}  # [win]\n      host:\n        - {{ pin_subpackage(\"libframel\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libframel\", exact=True) }}\n      run_constained:\n        - libframe >=9999\n    files:\n      - bin/  # [not win]\n      - share/doc/  # [not win]\n      - Library/bin/Fr*  # [win]\n      - Library/share/doc/  # [win]\n    test:\n      source_files:\n        - data/test.gwf\n      commands:\n        - FrChannels data/test.gwf\n        - FrCheck -i data/test.gwf\n        - FrCopy -i data/test.gwf -o copy.gwf\n        - FrDiff -i1 data/test.gwf -i2 copy.gwf -t D1 -d 1\n        - FrDump -i data/test.gwf -t D1\n        - FrCopy -i data/test.gwf -o copy2.gwf -f 0 -l 1 -r 10\n        - FrTrend -s 1 -p trend- -d 5 -c D1 -f 925484670 -l 925484680 copy2.gwf\n    about:\n      home: http://lappweb.in2p3.fr/virgo/FrameL/\n      license: LGPL-2.1-or-later\n      license_family: LGPL\n      license_file: LICENSE\n      summary: LIGO/Virgo Frame Library\n      description: |\n        A Common Data Frame Format for Interferometric Gravitational Wave\n        Detector has been developed by VIRGO and LIGO.\n        The Frame Library is a software dedicated to the frame manipulation\n        including file input/output.\n        This package provides the FrameL command line utilities.\n\n  - name: python-framel\n    script: install-python.sh  # [not win]\n    script: install-python.bat  # [win]\n    build:\n      ignore_run_exports:\n        - python  # [osx]\n        - m2w64-gcc-libs  # [win]\n        - numpy\n      skip: true  # [python_impl != 'cpython']\n    requirements:\n      build:\n        - {{ compiler('c') }}  # [not win]\n        - {{ compiler('m2w64_c') }}  # [win]\n        - cmake >=3.16.0\n        - make  # [not win]\n        - ninja  # [win]\n        # extras for cross-compiling\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage('libframel', exact=True) }}\n        - libpython  # [win]\n        - numpy\n        - python\n      run:\n        - {{ pin_subpackage('libframel', exact=True) }}\n        - {{ pin_compatible('numpy') }}\n        - python\n    test:\n      requires:\n        - pip\n      source_files:\n        - data/test.gwf\n      imports:\n        - framel\n      commands:\n        - >\n          python -c \"from pathlib import Path; from numpy.testing import assert_array_equal; import framel; indata = framel.frgetvect1d(str(Path('data') / 'test.gwf'), 'D1'); framel.frputvect('test2.gwf', [{'name': 'A1:TEST', 'data': indata[0], 'start': indata[1], 'dx': indata[3], 'x_unit': indata[4], 'y_unit': indata[5]}]);\n          indata2 = framel.frgetvect1d('test2.gwf', 'A1:TEST'); assert_array_equal(indata[0], indata2[0], 'read-write data mismatch'); assert indata[1:] == indata2[1:], 'read-write metadata mismatch'; \"\n        - python -m pip check\n    about:\n      home: http://lappweb.in2p3.fr/virgo/FrameL/\n      license: LGPL-2.1-or-later\n      license_family: LGPL\n      license_file: LICENSE\n      summary: LIGO/Virgo Frame Library\n      description: |\n        A Common Data Frame Format for Interferometric Gravitational Wave\n        Detector has been developed by VIRGO and LIGO.\n        The Frame Library is a software dedicated to the frame manipulation\n        including file input/output.\n        This package provides the python bindings.\n\nabout:\n  home: http://lappweb.in2p3.fr/virgo/FrameL/\n  license: LGPL-2.1-or-later\n  license_family: LGPL\n  license_file: LICENSE\n  summary: LIGO/Virgo Frame Library\n  description: |\n    A Common Data Frame Format for Interferometric Gravitational Wave\n    Detector has been developed by VIRGO and LIGO.\n    The Frame Library is a software dedicated to the frame manipulation\n    including file input/output.\n    This recipe provides packages for the `libframel` shared library,\n    command line utilities, and python bindings.\n\nextra:\n  feedstock-name: framel\n  recipe-maintainers:\n    - duncanmmacleod\n    - anthchirp\n    - rhyspoulton\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://git.ligo.org/virgo/virgoapp/Fr/-/archive/8.42.2/Fr-8.42.2.tar.gz",
 "version": "8.42.2"
}