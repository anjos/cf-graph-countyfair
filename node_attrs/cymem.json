{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/196872676.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Compiler",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/217509187.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222722854.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222726680.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/335241770.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/335818385.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/340576171.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/388845062.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501127077.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513903619.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/533505067.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default",
   "win": "azure"
  }
 },
 "feedstock_name": "cymem",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "name": "cymem",
 "new_version": "2.0.5",
 "new_version_attempts": {
  "2.0.4": 1,
  "2.0.5": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cymem"
  ]
 },
 "pinning_version": "2020.12.06.16.40.53",
 "pre_pr_migrator_status": {
  "pypy37": "not solvable: master: ['linux_aarch64_python3.7.____73_pypy: Encountered problems while solving.\\nProblem: package pytest-5.3.5-py36h9f0ad1d_2 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set version = \"2.0.5\" %}\n{% set sha256sum = \"190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0\" %}\n\npackage:\n  name: cymem\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/c/cymem/cymem-{{ version }}.tar.gz\n  sha256: {{ sha256sum }}\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - cython\n    - pip\n    - python\n    - setuptools\n    - wheel\n\n  run:\n    - python\n\ntest:\n  requires:\n    - pytest\n  imports:\n    - cymem\n  commands:\n    - python -m pytest --tb=native --pyargs cymem\n\nabout:\n  home: https://github.com/explosion/cymem\n  license: MIT\n  license_file: LICENSE\n  summary: Manage calls to calloc/free through Cython\n  description: |\n    cymem provides two small memory-management helpers for Cython. They make it\n    easy to tie memory to a Python object\u2019s life-cycle, so that the memory is\n    freed when the object is garbage collected.\n\nextra:\n  recipe-maintainers:\n    - rmax\n    - h-vetinari\n    - ines\n    - honnibal\n    - adrianeboyd\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "pip",
   "python",
   "setuptools",
   "wheel"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz",
 "version": "2.0.5",
 "win_64_meta_yaml": {
  "about": {
   "description": "cymem provides two small memory-management helpers for Cython. They make it\neasy to tie memory to a Python object\u2019s life-cycle, so that the memory is\nfreed when the object is garbage collected.\n",
   "home": "https://github.com/explosion/cymem",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "Manage calls to calloc/free through Cython"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install --no-deps --ignore-installed ."
  },
  "extra": {
   "recipe-maintainers": [
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd",
    "rmax",
    "h-vetinari",
    "ines",
    "honnibal",
    "adrianeboyd"
   ]
  },
  "package": {
   "name": "cymem",
   "version": "2.0.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel",
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ],
   "run": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "190e15d9cf2c3bde60ae37bddbae6568a36044dc4a326d84081a5fa08818eee0",
   "url": "https://pypi.io/packages/source/c/cymem/cymem-2.0.5.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem",
    "python -m pytest --tb=native --pyargs cymem"
   ],
   "imports": [
    "cymem",
    "cymem",
    "cymem",
    "cymem"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "python",
    "setuptools",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 }
}