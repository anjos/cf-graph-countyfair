{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/900233773.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "triton",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives.\nThe aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.\n",
   "dev_url": "https://github.com/openai/triton",
   "doc_url": "https://triton-lang.org/",
   "home": "https://github.com/openai/triton",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Development repository for the Triton language and compiler"
  },
  "build": {
   "number": "0",
   "string": "cuda112py37h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "triton",
   "version": "1.1.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib"
   ],
   "run": [
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch"
   ],
   "sha256": "44040696460f1d02a7251dd59468d7405982b55e112a9999ec759718066f7708",
   "url": "https://github.com/openai/triton/archive/refs/tags/v1.1.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton"
   ],
   "requires": [
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy"
   ],
   "source_files": [
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libzlib",
    "llvmdev",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "filelock",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "scipy"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives.\nThe aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.\n",
   "dev_url": "https://github.com/openai/triton",
   "doc_url": "https://triton-lang.org/",
   "home": "https://github.com/openai/triton",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Development repository for the Triton language and compiler"
  },
  "build": {
   "number": "0",
   "string": "cuda112py37h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari",
    "erip",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "triton",
   "version": "1.1.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib",
    "python",
    "pip",
    "llvmdev =11",
    "libzlib"
   ],
   "run": [
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*",
    "python",
    "filelock",
    "pytorch =*=cuda*"
   ]
  },
  "source": {
   "patches": [
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch",
    "patches/0001-patch-include-paths-in-setup.py.patch",
    "patches/0002-add-missing-header.patch",
    "patches/0003-properly-point-to-triton-includes.patch",
    "patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch"
   ],
   "sha256": "44040696460f1d02a7251dd59468d7405982b55e112a9999ec759718066f7708",
   "url": "https://github.com/openai/triton/archive/refs/tags/v1.1.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton",
    "triton",
    "triton._C.libtriton"
   ],
   "requires": [
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy",
    "pip",
    "pytest",
    "scipy"
   ],
   "source_files": [
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test",
    "python/test"
   ]
  }
 },
 "name": "triton",
 "new_version": "1.1.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "triton"
  ]
 },
 "pinning_version": "2022.04.05.10.19.05",
 "pre_pr_migrator_attempts": {
  "python311": 4
 },
 "pre_pr_migrator_status": {
  "python311": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3610699297\">bot CI job</a>): main: ['linux_64_cuda_compiler_version10.2cxx_compiler_version7python3.11.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.0cxx_compiler_version9python3.11.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.1cxx_compiler_version10python3.11.____cpython: Encountered problems while solving:\\n  - nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n']"
 },
 "raw_meta_yaml": "{% set version = \"1.1.2\" %}\n\npackage:\n  name: triton\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openai/triton/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 44040696460f1d02a7251dd59468d7405982b55e112a9999ec759718066f7708\n  patches:\n    - patches/0001-patch-include-paths-in-setup.py.patch\n    - patches/0002-add-missing-header.patch\n    - patches/0003-properly-point-to-triton-includes.patch\n    - patches/0004-point-to-system-CUDA-instead-of-vendored-header.patch\n\nbuild:\n  number: 0\n  # TODO: windows support should be available from next version;\n  #       CPU-only support still under development\n  skip: true  # [win or cuda_compiler_version == \"None\"]\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - make\n    - cmake\n  host:\n    - python\n    - pip\n    - llvmdev =11\n    - libzlib\n  run:\n    - python\n    - filelock\n    - pytorch =*=cuda*\n\ntest:\n  imports:\n    - triton\n    - triton._C.libtriton\n  requires:\n    - pip\n    - pytest\n    - scipy\n  source_files:\n    - python/test\n  commands:\n    - pip check\n    # test suite essentially depends on availability of a physical GPU,\n    # see https://github.com/openai/triton/issues/466;\n    # - pytest -v python/test\n\nabout:\n  home: https://github.com/openai/triton\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Development repository for the Triton language and compiler'\n  description: |\n    This is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives.\n    The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.\n  doc_url: https://triton-lang.org/\n  dev_url: https://github.com/openai/triton\n\nextra:\n  recipe-maintainers:\n    - erip\n    - h-vetinari\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "filelock",
   "libzlib",
   "llvmdev",
   "make",
   "pip",
   "python",
   "pytorch"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libzlib",
    "llvmdev",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "filelock",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "scipy"
   ]
  }
 },
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libzlib",
    "llvmdev =11",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "filelock",
    "python",
    "pytorch =*=cuda*"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "scipy"
   ]
  }
 },
 "url": "https://github.com/openai/triton/archive/refs/tags/v1.1.2.tar.gz",
 "version": "1.1.2"
}