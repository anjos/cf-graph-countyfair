{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/335948996.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/386493272.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/395262912.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503019655.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/551478907.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.12.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560469656.json"
   },
   "data": {
    "bot_rerun": 1644156709.370443,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774872884.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "trio-asyncio",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Trio has native concepts of tasks and task cancellation. Asyncio is based on\ncallbacks and chaining Futures, albeit with nicer syntax, which make handling\nof failures and timeouts fundamentally less reliable, esp. in larger programs.\nThus, you really want to base your async project on Trio. On the other hand,\nthere are quite a few asyncio-enhanced libraries. You really don't want to\nre-invent any wheels in your project. Thus, being able to use asyncio\nlibraries from Trio is useful. Trio-Asyncio enables you to do that, and more.\n",
   "dev_url": "https://github.com/python-trio/trio-asyncio",
   "doc_url": "http://trio-asyncio.readthedocs.io/",
   "home": "https://github.com/python-trio/trio-asyncio",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.MIT",
   "summary": "A re-implementation of the asyncio mainloop on top of Trio"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz"
   ]
  },
  "package": {
   "name": "trio-asyncio",
   "version": "0.12.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner"
   ],
   "run": [
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome"
   ]
  },
  "source": {
   "sha256": "824be23b0c678c0df942816cdb57b92a8b94f264fffa89f04626b0ba2d009768",
   "url": "https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-0.12.0.tar.gz"
  },
  "test": {
   "imports": [
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "pip",
    "pytest-runner",
    "python",
    "trio"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "python",
    "trio"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Trio has native concepts of tasks and task cancellation. Asyncio is based on\ncallbacks and chaining Futures, albeit with nicer syntax, which make handling\nof failures and timeouts fundamentally less reliable, esp. in larger programs.\nThus, you really want to base your async project on Trio. On the other hand,\nthere are quite a few asyncio-enhanced libraries. You really don't want to\nre-invent any wheels in your project. Thus, being able to use asyncio\nlibraries from Trio is useful. Trio-Asyncio enables you to do that, and more.\n",
   "dev_url": "https://github.com/python-trio/trio-asyncio",
   "doc_url": "http://trio-asyncio.readthedocs.io/",
   "home": "https://github.com/python-trio/trio-asyncio",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.MIT",
   "summary": "A re-implementation of the asyncio mainloop on top of Trio"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz"
   ]
  },
  "package": {
   "name": "trio-asyncio",
   "version": "0.12.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner"
   ],
   "run": [
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome"
   ]
  },
  "source": {
   "sha256": "824be23b0c678c0df942816cdb57b92a8b94f264fffa89f04626b0ba2d009768",
   "url": "https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-0.12.0.tar.gz"
  },
  "test": {
   "imports": [
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio"
   ]
  }
 },
 "name": "trio-asyncio",
 "new_version": "0.12.0",
 "new_version_attempts": {
  "0.12.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Trio has native concepts of tasks and task cancellation. Asyncio is based on\ncallbacks and chaining Futures, albeit with nicer syntax, which make handling\nof failures and timeouts fundamentally less reliable, esp. in larger programs.\nThus, you really want to base your async project on Trio. On the other hand,\nthere are quite a few asyncio-enhanced libraries. You really don't want to\nre-invent any wheels in your project. Thus, being able to use asyncio\nlibraries from Trio is useful. Trio-Asyncio enables you to do that, and more.\n",
   "dev_url": "https://github.com/python-trio/trio-asyncio",
   "doc_url": "http://trio-asyncio.readthedocs.io/",
   "home": "https://github.com/python-trio/trio-asyncio",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.MIT",
   "summary": "A re-implementation of the asyncio mainloop on top of Trio"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz"
   ]
  },
  "package": {
   "name": "trio-asyncio",
   "version": "0.12.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner"
   ],
   "run": [
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome"
   ]
  },
  "source": {
   "sha256": "824be23b0c678c0df942816cdb57b92a8b94f264fffa89f04626b0ba2d009768",
   "url": "https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-0.12.0.tar.gz"
  },
  "test": {
   "imports": [
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "pip",
    "pytest-runner",
    "python",
    "trio"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "python",
    "trio"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "trio-asyncio"
  ]
 },
 "pinning_version": "2021.11.05.20.51.02",
 "raw_meta_yaml": "{% set name = \"trio-asyncio\" %}\n{% set version = \"0.12.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/trio_asyncio/trio_asyncio-{{ version }}.tar.gz\n  sha256: 824be23b0c678c0df942816cdb57b92a8b94f264fffa89f04626b0ba2d009768\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install . -vv\n  skip: true  # [py<35]\n\nrequirements:\n  host:\n    - python\n    - pip\n    - trio >=0.10.0\n    - async_generator >=1.6\n    - outcome\n    - contextvars >=2.1  # [py<37]\n    - pytest-runner\n  run:\n    - python\n    - trio >=0.10.0\n    - async_generator >=1.6\n    - outcome\n    - contextvars >=2.1  # [py<37]\n\ntest:\n  imports:\n    - trio_asyncio\n\nabout:\n  home: https://github.com/python-trio/trio-asyncio\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.MIT\n  summary: A re-implementation of the asyncio mainloop on top of Trio\n  description: |\n    Trio has native concepts of tasks and task cancellation. Asyncio is based on\n    callbacks and chaining Futures, albeit with nicer syntax, which make handling\n    of failures and timeouts fundamentally less reliable, esp. in larger programs.\n    Thus, you really want to base your async project on Trio. On the other hand,\n    there are quite a few asyncio-enhanced libraries. You really don't want to\n    re-invent any wheels in your project. Thus, being able to use asyncio\n    libraries from Trio is useful. Trio-Asyncio enables you to do that, and more.\n  doc_url: http://trio-asyncio.readthedocs.io/\n  dev_url: https://github.com/python-trio/trio-asyncio\n\nextra:\n  recipe-maintainers:\n    - scopatz\n",
 "req": {
  "__set__": true,
  "elements": [
   "async_generator",
   "outcome",
   "pip",
   "pytest-runner",
   "python",
   "trio"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "pip",
    "pytest-runner",
    "python",
    "trio"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "python",
    "trio"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "async_generator >=1.6",
    "outcome",
    "pip",
    "pytest-runner",
    "python",
    "trio >=0.10.0"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-0.12.0.tar.gz",
 "version": "0.12.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "Trio has native concepts of tasks and task cancellation. Asyncio is based on\ncallbacks and chaining Futures, albeit with nicer syntax, which make handling\nof failures and timeouts fundamentally less reliable, esp. in larger programs.\nThus, you really want to base your async project on Trio. On the other hand,\nthere are quite a few asyncio-enhanced libraries. You really don't want to\nre-invent any wheels in your project. Thus, being able to use asyncio\nlibraries from Trio is useful. Trio-Asyncio enables you to do that, and more.\n",
   "dev_url": "https://github.com/python-trio/trio-asyncio",
   "doc_url": "http://trio-asyncio.readthedocs.io/",
   "home": "https://github.com/python-trio/trio-asyncio",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.MIT",
   "summary": "A re-implementation of the asyncio mainloop on top of Trio"
  },
  "build": {
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "scopatz",
    "scopatz",
    "scopatz",
    "scopatz"
   ]
  },
  "package": {
   "name": "trio-asyncio",
   "version": "0.12.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner",
    "python",
    "pip",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "pytest-runner"
   ],
   "run": [
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome",
    "python",
    "trio >=0.10.0",
    "async_generator >=1.6",
    "outcome"
   ]
  },
  "source": {
   "sha256": "824be23b0c678c0df942816cdb57b92a8b94f264fffa89f04626b0ba2d009768",
   "url": "https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-0.12.0.tar.gz"
  },
  "test": {
   "imports": [
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio",
    "trio_asyncio"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "pip",
    "pytest-runner",
    "python",
    "trio"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "async_generator",
    "outcome",
    "python",
    "trio"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}