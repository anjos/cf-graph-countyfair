{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/612492774.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612519653.json"
   },
   "data": {
    "bot_rerun": 1617987798.3426826,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612527773.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612635108.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/722876020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/779878326.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "inpoly",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\npolygon (PSLG) embedded in the two-dimensional plane. General non-convex and\nmultiply-connected polygonal regions can be handled.\n",
   "dev_url": "https://github.com/dengwirda/inpoly-python",
   "doc_url": "https://github.com/dengwirda/inpoly-python/blob/master/README.md",
   "home": "https://github.com/dengwirda/inpoly-python",
   "license": "custom",
   "license_file": "LICENSE.md",
   "summary": "A fast point(s)-in-polygon routine for Python."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda"
   ]
  },
  "package": {
   "name": "inpoly",
   "version": "0.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch"
   ],
   "sha256": "a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f",
   "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3"
   ],
   "imports": [
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly"
   ],
   "requires": [
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base"
   ],
   "source_files": [
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\npolygon (PSLG) embedded in the two-dimensional plane. General non-convex and\nmultiply-connected polygonal regions can be handled.\n",
   "dev_url": "https://github.com/dengwirda/inpoly-python",
   "doc_url": "https://github.com/dengwirda/inpoly-python/blob/master/README.md",
   "home": "https://github.com/dengwirda/inpoly-python",
   "license": "custom",
   "license_file": "LICENSE.md",
   "summary": "A fast point(s)-in-polygon routine for Python."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda"
   ]
  },
  "package": {
   "name": "inpoly",
   "version": "0.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch"
   ],
   "sha256": "a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f",
   "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3"
   ],
   "imports": [
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly"
   ],
   "requires": [
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base"
   ],
   "source_files": [
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py"
   ]
  }
 },
 "name": "inpoly",
 "new_version": "0.2.0",
 "osx_64_meta_yaml": {
  "about": {
   "description": "INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\npolygon (PSLG) embedded in the two-dimensional plane. General non-convex and\nmultiply-connected polygonal regions can be handled.\n",
   "dev_url": "https://github.com/dengwirda/inpoly-python",
   "doc_url": "https://github.com/dengwirda/inpoly-python/blob/master/README.md",
   "home": "https://github.com/dengwirda/inpoly-python",
   "license": "custom",
   "license_file": "LICENSE.md",
   "summary": "A fast point(s)-in-polygon routine for Python."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda"
   ]
  },
  "package": {
   "name": "inpoly",
   "version": "0.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch"
   ],
   "sha256": "a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f",
   "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3"
   ],
   "imports": [
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly"
   ],
   "requires": [
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base"
   ],
   "source_files": [
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "inpoly"
  ]
 },
 "pinning_version": "2021.11.12.17.05.18",
 "raw_meta_yaml": "{% set name = \"inpoly\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/dengwirda/inpoly-python/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f\n  patches:\n    - 0001-remove-msh.patch\n    - 0002-save-plots.patch\n\nbuild:\n  number: 2\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - {{ compiler('c') }}\n\n  host:\n    - python\n    - cython\n    - pip\n    - numpy\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  requires:\n    - pip\n    - matplotlib-base\n  imports:\n    - inpoly\n  source_files:\n    - msh/*\n    - dat/*\n    - example.py\n  commands:\n    - pip check\n    - python example.py --IDnumber 1\n    - python example.py --IDnumber 2\n    - python example.py --IDnumber 3\n  \nabout:\n  home: https://github.com/dengwirda/inpoly-python\n  license: custom\n  license_file: LICENSE.md\n  summary: A fast point(s)-in-polygon routine for Python.\n  description: |\n    INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\n    polygon (PSLG) embedded in the two-dimensional plane. General non-convex and\n    multiply-connected polygonal regions can be handled.\n  doc_url: https://github.com/dengwirda/inpoly-python/blob/master/README.md\n  dev_url: https://github.com/dengwirda/inpoly-python\n\nextra:\n  recipe-maintainers:\n    - xylar\n    - dengwirda\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cython",
   "numpy",
   "pip",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "pip"
   ]
  }
 },
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "pip"
   ]
  }
 },
 "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz",
 "version": "0.2.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\npolygon (PSLG) embedded in the two-dimensional plane. General non-convex and\nmultiply-connected polygonal regions can be handled.\n",
   "dev_url": "https://github.com/dengwirda/inpoly-python",
   "doc_url": "https://github.com/dengwirda/inpoly-python/blob/master/README.md",
   "home": "https://github.com/dengwirda/inpoly-python",
   "license": "custom",
   "license_file": "LICENSE.md",
   "summary": "A fast point(s)-in-polygon routine for Python."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda",
    "xylar",
    "dengwirda"
   ]
  },
  "package": {
   "name": "inpoly",
   "version": "0.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy",
    "python",
    "cython",
    "pip",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch",
    "0001-remove-msh.patch",
    "0002-save-plots.patch"
   ],
   "sha256": "a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f",
   "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3",
    "pip check",
    "python example.py --IDnumber 1",
    "python example.py --IDnumber 2",
    "python example.py --IDnumber 3"
   ],
   "imports": [
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly",
    "inpoly"
   ],
   "requires": [
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base",
    "pip",
    "matplotlib-base"
   ],
   "source_files": [
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py",
    "msh/*",
    "dat/*",
    "example.py"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "pip"
   ]
  }
 }
}