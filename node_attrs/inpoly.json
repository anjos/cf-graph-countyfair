{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/612492774.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612519653.json"
   },
   "data": {
    "bot_rerun": 1617987798.3426826,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612527773.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612635108.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/722876020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/779878326.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "inpoly",
 "hash_type": "sha256",
 "name": "inpoly",
 "new_version": "0.2.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "inpoly"
  ]
 },
 "pinning_version": "2021.11.12.17.05.18",
 "raw_meta_yaml": "{% set name = \"inpoly\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/dengwirda/inpoly-python/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: a17ff303a24bc9d4a61be421a1cdbf62959edd7487c95a5785d917a0017e334f\n  patches:\n    - 0001-remove-msh.patch\n    - 0002-save-plots.patch\n\nbuild:\n  number: 3\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - {{ compiler('c') }}\n\n  host:\n    - python\n    - cython\n    - pip\n    - numpy\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  requires:\n    - pip\n    - matplotlib-base\n  imports:\n    - inpoly\n  source_files:\n    - msh/*\n    - dat/*\n    - example.py\n  commands:\n    - pip check\n    - python example.py --IDnumber 1\n    - python example.py --IDnumber 2\n    - python example.py --IDnumber 3\n  \nabout:\n  home: https://github.com/dengwirda/inpoly-python\n  license: custom\n  license_file: LICENSE.md\n  summary: A fast point(s)-in-polygon routine for Python.\n  description: |\n    INPOLY returns the \"inside/outside\" status for a set of vertices VERT and a general\n    polygon (PSLG) embedded in the two-dimensional plane. General non-convex and\n    multiply-connected polygonal regions can be handled.\n  doc_url: https://github.com/dengwirda/inpoly-python/blob/master/README.md\n  dev_url: https://github.com/dengwirda/inpoly-python\n\nextra:\n  recipe-maintainers:\n    - xylar\n    - dengwirda\n",
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "url": "https://github.com/dengwirda/inpoly-python/archive/refs/tags/v0.2.0.tar.gz",
 "version": "0.2.0"
}