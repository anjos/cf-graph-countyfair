{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "type_safe",
 "hash_type": "sha256",
 "name": "type_safe",
 "new_version": "0.2.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "type_safe"
  ]
 },
 "raw_meta_yaml": "{% set name = \"type_safe\" %}\n{% set version = \"0.2.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/foonathan/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 34d97123fb9bca04a333565c4a2498425d602ec0c759de4be1b8cfae77d05823\n\nbuild:\n  number: 0\n  ignore_run_exports_from:\n    # Since this package does not ship any compiled code, we do not need any\n    # compatibility with the compiler used at runtime.\n    - {{ compiler('cxx') }}\n\nrequirements:\n  build:\n    - cmake\n    # type_safe is header-only but its cmake setup is looking for a compiler to\n    # build some test programs (that are not installed.)\n    - {{ compiler('cxx') }}\n    - make  # [not win]\n  host:\n    # ensure that type_safe does not vendor debug_assert\n    - debug_assert >=1.3.3,<2\n  run:\n    # anything that uses type_safe headers is also going to need the debug_assert headers\n    - debug_assert >=1.3.3,<2\n\ntest:\n  commands:\n    - test -f $PREFIX/include/type_safe/optional.hpp            # [unix]\n    - if not exist %LIBRARY_INC%\\type_safe\\optional.hpp exit 1  # [win]\n\nabout:\n  home: https://github.com/foonathan/type_safe\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'zero overhead abstractions that use the C++ type system to prevent bugs'\n  doc_url: https://type_safe.foonathan.net/\n  dev_url: https://github.com/foonathan/type_safe\n\nextra:\n  recipe-maintainers:\n    - saraedum\n",
 "strong_exports": false,
 "url": "https://github.com/foonathan/type_safe/archive/refs/tags/v0.2.2.tar.gz",
 "version": "0.2.2"
}