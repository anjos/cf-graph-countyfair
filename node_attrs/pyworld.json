{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/753622337.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/754227450.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774792782.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/907853675.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/969279058.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "pyworld",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "PyWorld is a wrapper for WORLD, which is free software for\n high-quality speech analysis, manipulation and synthesis. It can\n estimate fundamental frequency (F0), aperiodicity and spectral\n envelope, and also generate the speech like input speech with only\n estimated parameters.\n",
   "home": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "PyWorld is a Python wrapper for WORLD vocoder."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan"
   ]
  },
  "package": {
   "name": "pyworld",
   "version": "0.3.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python"
   ],
   "run": [
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b",
   "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "PyWorld is a wrapper for WORLD, which is free software for\n high-quality speech analysis, manipulation and synthesis. It can\n estimate fundamental frequency (F0), aperiodicity and spectral\n envelope, and also generate the speech like input speech with only\n estimated parameters.\n",
   "home": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "PyWorld is a Python wrapper for WORLD vocoder."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan"
   ]
  },
  "package": {
   "name": "pyworld",
   "version": "0.3.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python"
   ],
   "run": [
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b",
   "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "pyworld",
 "new_version": "0.3.1",
 "new_version_attempts": {
  "0.3.1": 2
 },
 "new_version_errors": {
  "0.3.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '0.3.1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/pyworld-{{ version }}.tar.gz'\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "description": "PyWorld is a wrapper for WORLD, which is free software for\n high-quality speech analysis, manipulation and synthesis. It can\n estimate fundamental frequency (F0), aperiodicity and spectral\n envelope, and also generate the speech like input speech with only\n estimated parameters.\n",
   "home": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "PyWorld is a Python wrapper for WORLD vocoder."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan"
   ]
  },
  "package": {
   "name": "pyworld",
   "version": "0.3.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python"
   ],
   "run": [
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b",
   "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "PyWorld is a wrapper for WORLD, which is free software for\n high-quality speech analysis, manipulation and synthesis. It can\n estimate fundamental frequency (F0), aperiodicity and spectral\n envelope, and also generate the speech like input speech with only\n estimated parameters.\n",
   "home": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "PyWorld is a Python wrapper for WORLD vocoder."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan",
    "thewchan",
    "thewchan"
   ]
  },
  "package": {
   "name": "pyworld",
   "version": "0.3.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python"
   ],
   "run": [
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b",
   "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "pyworld",
    "pyworld",
    "pyworld"
   ],
   "requires": [
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyworld"
  ]
 },
 "pinning_version": "2022.06.15.16.25.59",
 "raw_meta_yaml": "{% set name = \"pyworld\" %}\n{% set version = \"0.3.0\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/pyworld-{{ version }}.tar.gz\n  sha256: e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b\n\nbuild:\n  number: 2\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n  host:\n    - numpy\n    - pip\n    - python\n  run:\n    - cython >=0.24.0\n    - python\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  imports:\n    - pyworld\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder\n  summary: PyWorld is a Python wrapper for WORLD vocoder.\n  license: MIT\n  license_file: LICENSE\n  description: |\n    PyWorld is a wrapper for WORLD, which is free software for\n     high-quality speech analysis, manipulation and synthesis. It can\n     estimate fundamental frequency (F0), aperiodicity and spectral\n     envelope, and also generate the speech like input speech with only\n     estimated parameters.\n\nextra:\n  recipe-maintainers:\n    - thewchan\n",
 "req": {
  "__set__": true,
  "elements": [
   "cxx_compiler_stub",
   "cython",
   "numpy",
   "pip",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "cython",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cython >=0.24.0",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz",
 "version": "0.3.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "PyWorld is a wrapper for WORLD, which is free software for\n high-quality speech analysis, manipulation and synthesis. It can\n estimate fundamental frequency (F0), aperiodicity and spectral\n envelope, and also generate the speech like input speech with only\n estimated parameters.\n",
   "home": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "PyWorld is a Python wrapper for WORLD vocoder."
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan",
    "thewchan"
   ]
  },
  "package": {
   "name": "pyworld",
   "version": "0.3.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python",
    "numpy",
    "pip",
    "python"
   ],
   "run": [
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy",
    "cython >=0.24.0",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "e19b5d8445e0c4fc45ded71863aeaaf2680064b4626b0e7c90f72e9ace9f6b5b",
   "url": "https://pypi.io/packages/source/p/pyworld/pyworld-0.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld",
    "pyworld"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}