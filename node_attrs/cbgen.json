{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/522078581.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/e8c45029-e4ab-438d-8eed-52a20ee5e175.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/554563200.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/705466160.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/778454384.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/834901724.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/906414185.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/995787026.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "cbgen",
 "hash_type": "sha256",
 "name": "cbgen",
 "new_version": "1.0.2",
 "new_version_attempts": {
  "1.0.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cbgen"
  ]
 },
 "pinning_version": "2022.07.12.18.44.47",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"cbgen\" %}\n{% set version = \"1.0.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: a9c7e03a3cc06ce64908edc8915f64a1d47912d4d42b8127b5b2afed94885e7c\n\nbuild:\n  number: 2\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  skip: true  # [py<37]\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cffi                                   # [build_platform != target_platform]\n    - {{ compiler('c') }}\n  host:\n    - bgen >=4.1.3\n    - cffi >=1.14.0\n    - pip\n    - python\n    - setuptools\n    - setuptools-scm >=4.1.2\n    - wheel >=0.34.2\n  run:\n    - appdirs >=1.4.3\n    - bgen >=4.1.3\n    - cffi >=1.14.0\n    - numpy >=1.17.0\n    - pooch >=1.1.1\n    - pytest >=5.4.1\n    - python\n\ntest:\n  requires:\n    - pytest\n  imports:\n    - cbgen\n  commands:\n    - python -c \"import sys; import cbgen; sys.exit(cbgen.test())\"\n\nabout:\n  home: https://github.com/limix/cbgen\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Python wrapper around a BGEN library'\n  description: |\n    BGEN is a file format for storing large genetic datasets. It supports both unphased\n    genotypes and phased haplotype data with variable ploidy and number of alleles. It\n    was designed to provide a compact data representation without sacrificing variant\n    access performance. This Python package is a wrapper around the bgen library, a\n    low-memory footprint reader that efficiently reads bgen files.\n  doc_url: https://cbgen.readthedocs.io/en/stable/\n  dev_url: https://github.com/limix/cbgen\n\nextra:\n  recipe-maintainers:\n    - Horta\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/c/cbgen/cbgen-1.0.1.tar.gz",
 "version": "1.0.1"
}