{
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-juliacall",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/Non-Contradiction/JuliaCall",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": [
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE"
   ],
   "summary": "Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'."
  },
  "build": {
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy"
   ]
  },
  "package": {
   "name": "r-juliacall",
   "version": "0.17.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ],
   "run": [
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ]
  },
  "source": {
   "sha256": "41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b",
   "url": [
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('JuliaCall')\"",
    "$R -e \"library('JuliaCall')\""
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "julia",
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/Non-Contradiction/JuliaCall",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": [
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE"
   ],
   "summary": "Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'."
  },
  "build": {
   "merge_build_host": true,
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy"
   ]
  },
  "package": {
   "name": "r-juliacall",
   "version": "0.17.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip"
   ],
   "host": [
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ],
   "run": [
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ]
  },
  "source": {
   "sha256": "41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b",
   "url": [
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('JuliaCall')\"",
    "$R -e \"library('JuliaCall')\"",
    "$R -e \"library('JuliaCall')\"",
    "$R -e \"library('JuliaCall')\"",
    "\"%R%\" -e \"library('JuliaCall')\"",
    "\"%R%\" -e \"library('JuliaCall')\""
   ]
  }
 },
 "name": "r-juliacall",
 "new_version": "0.17.4",
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/Non-Contradiction/JuliaCall",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": [
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE"
   ],
   "summary": "Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'."
  },
  "build": {
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy"
   ]
  },
  "package": {
   "name": "r-juliacall",
   "version": "0.17.4"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ],
   "run": [
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "julia",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ]
  },
  "source": {
   "sha256": "41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b",
   "url": [
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('JuliaCall')\"",
    "$R -e \"library('JuliaCall')\""
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "julia",
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-juliacall"
  ]
 },
 "raw_meta_yaml": "{% set version = '0.17.4' %}\n\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-juliacall\n  version: {{ version }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/JuliaCall_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/JuliaCall/JuliaCall_{{ version }}.tar.gz\n  sha256: 41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b\n\nbuild:\n  merge_build_host: True  # [win]\n  # If this is a new build for the same version, increment the build number.\n  number: 0\n  # no skip\n\n  # This is required to make R link correctly on Linux.\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\n# Suggests: testthat, rmarkdown, rappdirs\nrequirements:\n  build:\n    - {{ compiler('c') }}              # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ compiler('cxx') }}            # [not win]\n    - {{ compiler('m2w64_cxx') }}      # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n\n  host:\n    - r-base\n    - r-rcpp >=0.12.7\n    - r-knitr >=1.28\n\n  run:\n    - julia                        # [not win]\n    - r-base\n    - r-rcpp >=0.12.7\n    - r-knitr >=1.28\n\ntest:\n  commands:\n    # You can put additional test commands to be run here.\n    - $R -e \"library('JuliaCall')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('JuliaCall')\\\"\"  # [win]\n\n  # You can also put a file called run_test.py, run_test.sh, or run_test.bat\n  # in the recipe that will be run at test time.\n\n  # requires:\n    # Put any additional test requirements here.\n\nabout:\n  home: https://github.com/Non-Contradiction/JuliaCall\n  license: MIT\n  summary: Provides an R interface to 'Julia', which is a high-level, high-performance dynamic\n    programming language for numerical computing, see <https://julialang.org/> for more\n    information. It provides a high-level interface as well as a low-level interface.\n    Using the high level interface, you could call any 'Julia' function just like any\n    R function with automatic type conversion. Using the low level interface, you could\n    deal with C-level SEXP directly while enjoying the convenience of using a high-level\n    programming language like 'Julia'.\n  license_family: MIT\n  license_file:\n    - '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/MIT'\n    - LICENSE\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - l2dy\n\n# The original CRAN metadata for this package was:\n\n# Package: JuliaCall\n# Type: Package\n# Title: Seamless Integration Between R and 'Julia'\n# Version: 0.17.4\n# Date: 2021-05-14\n# Authors@R: c( person(\"Changcheng\", \"Li\", , \"cxl508@psu.edu\", c(\"aut\", \"cre\")), person(\"Randy\", \"Lai\", role = \"ctb\"), person(\"Dmitri\", \"Grominski\", role = \"ctb\"), person(\"Nagi\", \"Teramo\", role = \"ctb\") )\n# Description: Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'.\n# Depends: R (>= 3.4.0)\n# License: MIT + file LICENSE\n# URL: https://github.com/Non-Contradiction/JuliaCall\n# BugReports: https://github.com/Non-Contradiction/JuliaCall/issues\n# Encoding: UTF-8\n# Imports: utils, Rcpp (>= 0.12.7), knitr (>= 1.28)\n# RoxygenNote: 7.1.1\n# LinkingTo: Rcpp\n# NeedsCompilation: yes\n# ByteCompile: yes\n# SystemRequirements: Julia >= 0.6.0, RCall.jl\n# Suggests: testthat, rmarkdown, rappdirs\n# VignetteBuilder: knitr\n# Packaged: 2021-05-15 04:45:07 UTC; lch34\n# Author: Changcheng Li [aut, cre], Randy Lai [ctb], Dmitri Grominski [ctb], Nagi Teramo [ctb]\n# Maintainer: Changcheng Li <cxl508@psu.edu>\n# Repository: CRAN\n# Date/Publication: 2021-05-16 14:10:16 UTC\n\n# See\n# https://docs.conda.io/projects/conda-build for\n# more information about meta.yaml\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "coreutils",
   "cxx_compiler_stub",
   "filesystem",
   "julia",
   "m2w64_c_compiler_stub",
   "m2w64_cxx_compiler_stub",
   "make",
   "r-base",
   "r-knitr",
   "r-rcpp",
   "sed",
   "zip"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "julia",
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "coreutils",
    "cxx_compiler_stub",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-knitr >=1.28",
    "r-rcpp >=0.12.7"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "julia",
    "r-base",
    "r-knitr >=1.28",
    "r-rcpp >=0.12.7"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": [
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz"
 ],
 "version": "0.17.4",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/Non-Contradiction/JuliaCall",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": [
    "/lib/R/share/licenses/MIT",
    "LICENSE",
    "/lib/R/share/licenses/MIT",
    "LICENSE"
   ],
   "summary": "Provides an R interface to 'Julia', which is a high-level, high-performance dynamic programming language for numerical computing, see <https://julialang.org/> for more information. It provides a high-level interface as well as a low-level interface. Using the high level interface, you could call any 'Julia' function just like any R function with automatic type conversion. Using the low level interface, you could deal with C-level SEXP directly while enjoying the convenience of using a high-level programming language like 'Julia'."
  },
  "build": {
   "merge_build_host": true,
   "number": "0",
   "rpaths": [
    "lib/R/lib/",
    "lib/",
    "lib/R/lib/",
    "lib/"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "conda-forge/r",
    "l2dy",
    "conda-forge/r",
    "l2dy"
   ]
  },
  "package": {
   "name": "r-juliacall",
   "version": "0.17.4"
  },
  "requirements": {
   "build": [
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "filesystem",
    "make",
    "sed",
    "coreutils",
    "zip"
   ],
   "host": [
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ],
   "run": [
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28",
    "r-base",
    "r-rcpp >=0.12.7",
    "r-knitr >=1.28"
   ]
  },
  "source": {
   "sha256": "41d88228c004bbf7288200f391381a232f34f1dc8aa5cff7c43f10e751d5427b",
   "url": [
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/JuliaCall_0.17.4.tar.gz",
    "https://cran.r-project.org/src/contrib/Archive/JuliaCall/JuliaCall_0.17.4.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "\"%R%\" -e \"library('JuliaCall')\"",
    "\"%R%\" -e \"library('JuliaCall')\""
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "coreutils",
    "filesystem",
    "m2w64_c_compiler_stub",
    "m2w64_cxx_compiler_stub",
    "make",
    "sed",
    "zip"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "r-base",
    "r-knitr",
    "r-rcpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}