{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/731561881.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/785669784.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/910488959.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "mintpy",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The Miami INsar Time-series software in PYthon (MintPy as /m\u026Ant pa\u026A/) is an\nopen-source package for Interferometric Synthetic Aperture Radar (InSAR)\ntime series analysis. It reads the stack of interferograms (coregistered and\nunwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\nand produces three dimensional (2D in space and 1D in time) ground surface\ndisplacement in line-of-sight direction. It includes a routine time series\nanalysis (smallbaselineApp.py) and some independent toolbox.\n",
   "dev_url": "https://github.com/insarlab/mintpy",
   "doc_url": "https://mintpy.readthedocs.io",
   "home": "https://github.com/insarlab/mintpy",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Miami INsar Time-series software in PYthon"
  },
  "build": {
   "entry_points": [
    "add_attribute.py = mintpy.add_attribute:main",
    "add.py = mintpy.add:main",
    "asc_desc2horz_vert.py = mintpy.asc_desc2horz_vert:main",
    "dem_error.py = mintpy.dem_error:main",
    "dem_gsi.py = mintpy.dem_gsi:main",
    "diff.py = mintpy.diff:main",
    "generate_mask.py = mintpy.generate_mask:main",
    "geocode.py = mintpy.geocode:main",
    "ifgram_inversion.py = mintpy.ifgram_inversion:main",
    "ifgram_reconstruction.py = mintpy.ifgram_reconstruction:main",
    "image_math.py = mintpy.image_math:main",
    "image_stitch.py = mintpy.image_stitch:main",
    "info.py = mintpy.info:main",
    "load_data.py = mintpy.load_data:main",
    "load_gbis.py = mintpy.load_gbis:main",
    "local_oscilator_drift.py = mintpy.local_oscilator_drift:main",
    "lookup_geo2radar.py = mintpy.lookup_geo2radar:main",
    "mask.py = mintpy.mask:main",
    "modify_network.py = mintpy.modify_network:main",
    "multilook.py = mintpy.multilook:main",
    "multi_transect.py = mintpy.multi_transect:main",
    "plot_coherence_matrix.py = mintpy.plot_coherence_matrix:main",
    "plot_network.py = mintpy.plot_network:main",
    "plot_transection.py = mintpy.plot_transection:main",
    "prep_aria.py = mintpy.prep_aria:main",
    "prep_cosicorr.py = mintpy.prep_cosicorr:main",
    "prep_fringe.py = mintpy.prep_fringe:main",
    "prep_gamma.py = mintpy.prep_gamma:main",
    "prep_giant.py = mintpy.prep_giant:main",
    "prep_gmtsar.py = mintpy.prep_gmtsar:main",
    "prep_hyp3.py = mintpy.prep_hyp3:main",
    "prep_isce.py = mintpy.prep_isce:main",
    "prep_roipac.py = mintpy.prep_roipac:main",
    "prep_snap.py = mintpy.prep_snap:main",
    "reference_date.py = mintpy.reference_date:main",
    "reference_point.py = mintpy.reference_point:main",
    "remove_hdf5_dataset.py = mintpy.remove_hdf5_dataset:main",
    "remove_ramp.py = mintpy.remove_ramp:main",
    "save_gbis.py = mintpy.save_gbis:main",
    "save_gdal.py = mintpy.save_gdal:main",
    "save_gmt.py = mintpy.save_gmt:main",
    "save_hdfeos5.py = mintpy.save_hdfeos5:main",
    "save_kite.py = mintpy.save_kite:main",
    "save_kmz.py = mintpy.save_kmz:main",
    "save_kmz_timeseries.py = mintpy.save_kmz_timeseries:main",
    "save_qgis.py = mintpy.save_qgis:main",
    "save_roipac.py = mintpy.save_roipac:main",
    "smallbaselineApp.py = mintpy.smallbaselineApp:main",
    "solid_earth_tides.py = mintpy.solid_earth_tides:main",
    "spatial_average.py = mintpy.spatial_average:main",
    "spatial_filter.py = mintpy.spatial_filter:main",
    "subset.py = mintpy.subset:main",
    "temporal_average.py = mintpy.temporal_average:main",
    "temporal_derivative.py = mintpy.temporal_derivative:main",
    "temporal_filter.py = mintpy.temporal_filter:main",
    "timeseries2velocity.py = mintpy.timeseries2velocity:main",
    "timeseries_rms.py = mintpy.timeseries_rms:main",
    "tropo_gacos.py = mintpy.tropo_gacos:main",
    "tropo_phase_elevation.py = mintpy.tropo_phase_elevation:main",
    "tropo_pyaps3.py = mintpy.tropo_pyaps3:main",
    "tropo_pyaps.py = mintpy.tropo_pyaps:main",
    "tsview.py = mintpy.tsview:main",
    "unwrap_error_bridging.py = mintpy.unwrap_error_bridging:main",
    "unwrap_error_phase_closure.py = mintpy.unwrap_error_phase_closure:main",
    "view.py = mintpy.view:main"
   ],
   "noarch": "python",
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "jhkennedy",
    "jlrine2",
    "yunjunz"
   ]
  },
  "package": {
   "name": "mintpy",
   "version": "1.3.2"
  },
  "requirements": {
   "host": [
    "python >=3.6,<3.9",
    "pip"
   ],
   "run": [
    "python >=3.6,<3.9",
    "cartopy",
    "cvxopt",
    "dask >=1.0",
    "dask-jobqueue >=0.3",
    "defusedxml",
    "h5py <3",
    "joblib",
    "lxml",
    "matplotlib-base",
    "numpy",
    "pip",
    "pyproj",
    "scikit-image",
    "scipy",
    "pykml >=0.2",
    "pysolid",
    "pyaps3",
    "gdal >=3",
    "pyresample",
    "openmp"
   ]
  },
  "source": {
   "sha256": "6c1242dee74f13b96aa4b1f8d50c45ec486397796e4bd4bf3f67849f921bfe7f",
   "url": "https://github.com/insarlab/MintPy/archive/refs/tags/v1.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "smallbaselineApp.py --help",
    "view.py --help",
    "tsview.py --help",
    "info.py --help"
   ],
   "imports": [
    "mintpy"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "cvxopt",
    "dask",
    "dask-jobqueue",
    "defusedxml",
    "gdal",
    "h5py",
    "joblib",
    "lxml",
    "matplotlib-base",
    "numpy",
    "openmp",
    "pip",
    "pyaps3",
    "pykml",
    "pyproj",
    "pyresample",
    "pysolid",
    "python",
    "scikit-image",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The Miami INsar Time-series software in PYthon (MintPy as /m\u026Ant pa\u026A/) is an\nopen-source package for Interferometric Synthetic Aperture Radar (InSAR)\ntime series analysis. It reads the stack of interferograms (coregistered and\nunwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\nand produces three dimensional (2D in space and 1D in time) ground surface\ndisplacement in line-of-sight direction. It includes a routine time series\nanalysis (smallbaselineApp.py) and some independent toolbox.\n",
   "dev_url": "https://github.com/insarlab/mintpy",
   "doc_url": "https://mintpy.readthedocs.io",
   "home": "https://github.com/insarlab/mintpy",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Miami INsar Time-series software in PYthon"
  },
  "build": {
   "entry_points": [
    "add_attribute.py = mintpy.add_attribute:main",
    "add.py = mintpy.add:main",
    "asc_desc2horz_vert.py = mintpy.asc_desc2horz_vert:main",
    "dem_error.py = mintpy.dem_error:main",
    "dem_gsi.py = mintpy.dem_gsi:main",
    "diff.py = mintpy.diff:main",
    "generate_mask.py = mintpy.generate_mask:main",
    "geocode.py = mintpy.geocode:main",
    "ifgram_inversion.py = mintpy.ifgram_inversion:main",
    "ifgram_reconstruction.py = mintpy.ifgram_reconstruction:main",
    "image_math.py = mintpy.image_math:main",
    "image_stitch.py = mintpy.image_stitch:main",
    "info.py = mintpy.info:main",
    "load_data.py = mintpy.load_data:main",
    "load_gbis.py = mintpy.load_gbis:main",
    "local_oscilator_drift.py = mintpy.local_oscilator_drift:main",
    "lookup_geo2radar.py = mintpy.lookup_geo2radar:main",
    "mask.py = mintpy.mask:main",
    "modify_network.py = mintpy.modify_network:main",
    "multilook.py = mintpy.multilook:main",
    "multi_transect.py = mintpy.multi_transect:main",
    "plot_coherence_matrix.py = mintpy.plot_coherence_matrix:main",
    "plot_network.py = mintpy.plot_network:main",
    "plot_transection.py = mintpy.plot_transection:main",
    "prep_aria.py = mintpy.prep_aria:main",
    "prep_cosicorr.py = mintpy.prep_cosicorr:main",
    "prep_fringe.py = mintpy.prep_fringe:main",
    "prep_gamma.py = mintpy.prep_gamma:main",
    "prep_giant.py = mintpy.prep_giant:main",
    "prep_gmtsar.py = mintpy.prep_gmtsar:main",
    "prep_hyp3.py = mintpy.prep_hyp3:main",
    "prep_isce.py = mintpy.prep_isce:main",
    "prep_roipac.py = mintpy.prep_roipac:main",
    "prep_snap.py = mintpy.prep_snap:main",
    "reference_date.py = mintpy.reference_date:main",
    "reference_point.py = mintpy.reference_point:main",
    "remove_hdf5_dataset.py = mintpy.remove_hdf5_dataset:main",
    "remove_ramp.py = mintpy.remove_ramp:main",
    "save_gbis.py = mintpy.save_gbis:main",
    "save_gdal.py = mintpy.save_gdal:main",
    "save_gmt.py = mintpy.save_gmt:main",
    "save_hdfeos5.py = mintpy.save_hdfeos5:main",
    "save_kite.py = mintpy.save_kite:main",
    "save_kmz.py = mintpy.save_kmz:main",
    "save_kmz_timeseries.py = mintpy.save_kmz_timeseries:main",
    "save_qgis.py = mintpy.save_qgis:main",
    "save_roipac.py = mintpy.save_roipac:main",
    "smallbaselineApp.py = mintpy.smallbaselineApp:main",
    "solid_earth_tides.py = mintpy.solid_earth_tides:main",
    "spatial_average.py = mintpy.spatial_average:main",
    "spatial_filter.py = mintpy.spatial_filter:main",
    "subset.py = mintpy.subset:main",
    "temporal_average.py = mintpy.temporal_average:main",
    "temporal_derivative.py = mintpy.temporal_derivative:main",
    "temporal_filter.py = mintpy.temporal_filter:main",
    "timeseries2velocity.py = mintpy.timeseries2velocity:main",
    "timeseries_rms.py = mintpy.timeseries_rms:main",
    "tropo_gacos.py = mintpy.tropo_gacos:main",
    "tropo_phase_elevation.py = mintpy.tropo_phase_elevation:main",
    "tropo_pyaps3.py = mintpy.tropo_pyaps3:main",
    "tropo_pyaps.py = mintpy.tropo_pyaps:main",
    "tsview.py = mintpy.tsview:main",
    "unwrap_error_bridging.py = mintpy.unwrap_error_bridging:main",
    "unwrap_error_phase_closure.py = mintpy.unwrap_error_phase_closure:main",
    "view.py = mintpy.view:main"
   ],
   "noarch": "python",
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "jhkennedy",
    "jlrine2",
    "yunjunz"
   ]
  },
  "package": {
   "name": "mintpy",
   "version": "1.3.2"
  },
  "requirements": {
   "host": [
    "python >=3.6,<3.9",
    "pip"
   ],
   "run": [
    "python >=3.6,<3.9",
    "cartopy",
    "cvxopt",
    "dask >=1.0",
    "dask-jobqueue >=0.3",
    "defusedxml",
    "h5py <3",
    "joblib",
    "lxml",
    "matplotlib-base",
    "numpy",
    "pip",
    "pyproj",
    "scikit-image",
    "scipy",
    "pykml >=0.2",
    "pysolid",
    "pyaps3",
    "gdal >=3",
    "pyresample",
    "openmp"
   ]
  },
  "source": {
   "sha256": "6c1242dee74f13b96aa4b1f8d50c45ec486397796e4bd4bf3f67849f921bfe7f",
   "url": "https://github.com/insarlab/MintPy/archive/refs/tags/v1.3.2.tar.gz"
  },
  "test": {
   "commands": [
    "smallbaselineApp.py --help",
    "view.py --help",
    "tsview.py --help",
    "info.py --help"
   ],
   "imports": [
    "mintpy"
   ]
  }
 },
 "name": "mintpy",
 "new_version": "1.3.3",
 "new_version_attempts": {
  "1.3.2": 1,
  "1.3.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "mintpy"
  ]
 },
 "pinning_version": "2022.04.14.17.26.44",
 "raw_meta_yaml": "{% set name = \"MintPy\" %}\n{% set version = \"1.3.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/insarlab/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 6c1242dee74f13b96aa4b1f8d50c45ec486397796e4bd4bf3f67849f921bfe7f\n\nbuild:\n  noarch: python\n  number: 2\n  script: {{ PYTHON }} -m pip install . -vv\n  entry_points:\n    - add_attribute.py = mintpy.add_attribute:main\n    - add.py = mintpy.add:main\n    - asc_desc2horz_vert.py = mintpy.asc_desc2horz_vert:main\n    - dem_error.py = mintpy.dem_error:main\n    - dem_gsi.py = mintpy.dem_gsi:main\n    - diff.py = mintpy.diff:main\n    - generate_mask.py = mintpy.generate_mask:main\n    - geocode.py = mintpy.geocode:main\n    - ifgram_inversion.py = mintpy.ifgram_inversion:main\n    - ifgram_reconstruction.py = mintpy.ifgram_reconstruction:main\n    - image_math.py = mintpy.image_math:main\n    - image_stitch.py = mintpy.image_stitch:main\n    - info.py = mintpy.info:main\n    - load_data.py = mintpy.load_data:main\n    - load_gbis.py = mintpy.load_gbis:main\n    - local_oscilator_drift.py = mintpy.local_oscilator_drift:main\n    - lookup_geo2radar.py = mintpy.lookup_geo2radar:main\n    - mask.py = mintpy.mask:main\n    - modify_network.py = mintpy.modify_network:main\n    - multilook.py = mintpy.multilook:main\n    - multi_transect.py = mintpy.multi_transect:main\n    - plot_coherence_matrix.py = mintpy.plot_coherence_matrix:main\n    - plot_network.py = mintpy.plot_network:main\n    - plot_transection.py = mintpy.plot_transection:main\n    - prep_aria.py = mintpy.prep_aria:main\n    - prep_cosicorr.py = mintpy.prep_cosicorr:main\n    - prep_fringe.py = mintpy.prep_fringe:main\n    - prep_gamma.py = mintpy.prep_gamma:main\n    - prep_giant.py = mintpy.prep_giant:main\n    - prep_gmtsar.py = mintpy.prep_gmtsar:main\n    - prep_hyp3.py = mintpy.prep_hyp3:main\n    - prep_isce.py = mintpy.prep_isce:main\n    - prep_roipac.py = mintpy.prep_roipac:main\n    - prep_snap.py = mintpy.prep_snap:main\n    - reference_date.py = mintpy.reference_date:main\n    - reference_point.py = mintpy.reference_point:main\n    - remove_hdf5_dataset.py = mintpy.remove_hdf5_dataset:main\n    - remove_ramp.py = mintpy.remove_ramp:main\n    - save_gbis.py = mintpy.save_gbis:main\n    - save_gdal.py = mintpy.save_gdal:main\n    - save_gmt.py = mintpy.save_gmt:main\n    - save_hdfeos5.py = mintpy.save_hdfeos5:main\n    - save_kite.py = mintpy.save_kite:main\n    - save_kmz.py = mintpy.save_kmz:main\n    - save_kmz_timeseries.py = mintpy.save_kmz_timeseries:main\n    - save_qgis.py = mintpy.save_qgis:main\n    - save_roipac.py = mintpy.save_roipac:main\n    - smallbaselineApp.py = mintpy.smallbaselineApp:main\n    - solid_earth_tides.py = mintpy.solid_earth_tides:main\n    - spatial_average.py = mintpy.spatial_average:main\n    - spatial_filter.py = mintpy.spatial_filter:main\n    - subset.py = mintpy.subset:main\n    - temporal_average.py = mintpy.temporal_average:main\n    - temporal_derivative.py = mintpy.temporal_derivative:main\n    - temporal_filter.py = mintpy.temporal_filter:main\n    - timeseries2velocity.py = mintpy.timeseries2velocity:main\n    - timeseries_rms.py = mintpy.timeseries_rms:main\n    - tropo_gacos.py = mintpy.tropo_gacos:main\n    - tropo_phase_elevation.py = mintpy.tropo_phase_elevation:main\n    - tropo_pyaps3.py = mintpy.tropo_pyaps3:main\n    - tropo_pyaps.py = mintpy.tropo_pyaps:main\n    - tsview.py = mintpy.tsview:main\n    - unwrap_error_bridging.py = mintpy.unwrap_error_bridging:main\n    - unwrap_error_phase_closure.py = mintpy.unwrap_error_phase_closure:main\n    - view.py = mintpy.view:main\n\nrequirements:\n  host:\n    - python >=3.6,<3.9\n    - pip\n  run:\n    - python >=3.6,<3.9\n    - cartopy\n    - cvxopt\n    - dask >=1.0\n    - dask-jobqueue >=0.3\n    - defusedxml\n    - h5py <3\n    - joblib\n    - lxml\n    - matplotlib-base\n    - numpy\n    - pip\n    - pyproj\n    - scikit-image\n    - scipy\n    - pykml >=0.2\n    - pysolid\n    - pyaps3\n    - gdal >=3\n    - pyresample\n    - openmp\n\ntest:\n  imports:\n    - mintpy\n  commands:\n    - smallbaselineApp.py --help\n    - view.py --help\n    - tsview.py --help\n    - info.py --help\n\nabout:\n  home: https://github.com/insarlab/mintpy\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: Miami INsar Time-series software in PYthon\n  description: |\n    The Miami INsar Time-series software in PYthon (MintPy as /m\u026Ant pa\u026A/) is an\n    open-source package for Interferometric Synthetic Aperture Radar (InSAR)\n    time series analysis. It reads the stack of interferograms (coregistered and\n    unwrapped) in ISCE, ARIA, FRInGE, HyP3, GMTSAR, SNAP, GAMMA or ROI_PAC format,\n    and produces three dimensional (2D in space and 1D in time) ground surface\n    displacement in line-of-sight direction. It includes a routine time series\n    analysis (smallbaselineApp.py) and some independent toolbox.\n  doc_url: https://mintpy.readthedocs.io\n  dev_url: https://github.com/insarlab/mintpy\n\nextra:\n  recipe-maintainers:\n    - jhkennedy\n    - jlrine2\n    - yunjunz\n",
 "req": {
  "__set__": true,
  "elements": [
   "cartopy",
   "cvxopt",
   "dask",
   "dask-jobqueue",
   "defusedxml",
   "gdal",
   "h5py",
   "joblib",
   "lxml",
   "matplotlib-base",
   "numpy",
   "openmp",
   "pip",
   "pyaps3",
   "pykml",
   "pyproj",
   "pyresample",
   "pysolid",
   "python",
   "scikit-image",
   "scipy"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "openmp",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "cvxopt",
    "dask",
    "dask-jobqueue",
    "defusedxml",
    "gdal",
    "h5py",
    "joblib",
    "lxml",
    "matplotlib-base",
    "numpy",
    "openmp",
    "pip",
    "pyaps3",
    "pykml",
    "pyproj",
    "pyresample",
    "pysolid",
    "python",
    "scikit-image",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.6,<3.9"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "cvxopt",
    "dask >=1.0",
    "dask-jobqueue >=0.3",
    "defusedxml",
    "gdal >=3",
    "h5py <3",
    "joblib",
    "lxml",
    "matplotlib-base",
    "numpy",
    "openmp",
    "pip",
    "pyaps3",
    "pykml >=0.2",
    "pyproj",
    "pyresample",
    "pysolid",
    "python >=3.6,<3.9",
    "scikit-image",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/insarlab/MintPy/archive/refs/tags/v1.3.2.tar.gz",
 "version": "1.3.2"
}