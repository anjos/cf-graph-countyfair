{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/3838976c-7f6b-4df4-a42a-d52862bea241.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/988410580.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pyston_lite",
 "hash_type": "sha256",
 "name": "pyston_lite-split",
 "new_version": "3.9.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyston_lite",
   "pyston_lite_autoload"
  ]
 },
 "pinning_version": "2022.07.06.01.52.02",
 "raw_meta_yaml": "{% set name = \"pyston_lite\" %}\n{% set pyston_version = \"2.3.4\" %}\n\npackage:\n  name: {{ name|lower }}-split\n  version: {{ pyston_version }}\n\nsource:\n  - url: https://github.com/pyston/pyston/archive/pyston_{{ pyston_version }}.tar.gz\n    sha256: 9989ce0f3a83611b11f79121d29ceec84c3cb4b4a8c3de4f8d97eb42042f4cee\n  # pyston-lite uses a preprocessing script from inside the LuaJIT repository (that is not\n  # packaged as part of the luajit package), but only as a build tool (ie is not included\n  # in the built artifacts).\n  - url: https://github.com/LuaJIT/LuaJIT/archive/e2c312e0deb874aa5fa8ce502c08d87deb38e82f.tar.gz\n    sha256: bff4764c19466def90667d2f7fcbd0781b8e62476b12105868f8e44babd03f8e\n    folder: pyston/LuaJIT/\n\nbuild:\n  number: 1\n\n  skip: True  # [not linux]\n  skip: True  # [py!=38]\n\n# In theory the requirements can/should be specified per-output, but in practice\n# conda-build will produce a corrupt package if the compiler dependency is not\n# additionally specified at this top scope. It is required to declare the\n# compiler dependency both here and in the outputs: section as well; removing\n# either will cause the c compiler to not be installed.\n#\n# It's also required to specify a \"python\" dependency in this section so that\n# conda-build knows that this package is sensitive to the python version.\n# (It does not infer this from the py!=38 jinja selector)\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n    - python\n\noutputs:\n  - name: pyston_lite\n    # This 'script' line must go under 'outputs', not 'build'\n    script: build_pyston_lite.sh\n\n    # An \"build\" section is required, or else it seems to skip\n    # the build in certain build scenarios:\n    build:\n      # This build section cannot be empty or else it will crash the linter\n      script: true\n\n    requirements:\n      build:\n        # (See comment for the top-level requirements block)\n        - {{ compiler('c') }}\n        # NB: listing a \"python\" dependence in this section will cause the package to misbuild\n      host:\n        # Note: pinning to 3.8.* is required even with the skip py!=38 line above, which seems\n        # to not always be honored.\n        # pyston-lite is also tightly coupled to the CPython implementation, having compatibility\n        # requirements much higher than API compatibility, so pin it to CPython.\n        - python 3.8.* *_cpython\n        - make\n      run:\n        - python\n\n    test:\n      imports:\n        - pyston_lite\n\n  - name: pyston_lite_autoload\n\n    build:\n      # This 'script' line must go under 'build', not 'outputs'\n      script: cd pyston/pyston_lite/autoload; python setup.py install -v\n      noarch: python\n\n    requirements:\n      host:\n        - python\n      run:\n        - {{ pin_subpackage('pyston_lite', exact=True) }}\n\n    test:\n      commands:\n        - python -c \"import sys; assert 'pyston_lite' in sys.modules\"\n\nabout:\n  home: https://github.com/pyston/pyston\n  summary: 'A JIT for Python'\n  description: |\n      pyston-lite is the JIT component of Pyston, a faster implementation of Python.\n  license: PSF-2.0\n  license_file: LICENSE\n\nextra:\n  feedstock-name: pyston_lite\n  recipe-maintainers:\n    - kmod\n    - undingen\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/pyston/pyston/archive/pyston_2.3.4.tar.gz",
 "version": "2.3.4"
}