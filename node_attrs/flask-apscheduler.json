{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/203491115.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/203787350.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/203817191.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/235192631.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/592565196.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.12.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/594655546.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.12.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612939028.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.12.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/805828480.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.12.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/971544303.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.12.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "flask-apscheduler",
 "hash_type": "sha256",
 "name": "flask-apscheduler",
 "new_version": "1.12.4",
 "new_version_attempts": {
  "1.12.0": 1,
  "1.12.1": 1,
  "1.12.2": 1,
  "1.12.3": 1,
  "1.12.4": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "flask-apscheduler"
  ]
 },
 "pinning_version": "2022.06.19.12.27.44",
 "raw_meta_yaml": "{% set name = \"flask-apscheduler\" %}\n{% set pkg_name = \"Flask-APScheduler\" %}\n{% set version = \"1.12.3\" %}\n{% set sha256 = \"d60948d1f2be9eb4772f68c3308ba3f973755219d13947266f89292ad6df63fc\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ pkg_name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1\n  noarch: python\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n    - apscheduler >=3.2.0,<4.0.0\n    - flask >=0.10.1\n    - python-dateutil >=2.4.2\n\ntest:\n  imports:\n    - flask_apscheduler\n\nabout:\n  home: https://github.com/viniciuschiele/flask-apscheduler\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Flask-APScheduler is a Flask extension which adds support for the APScheduler\n  description: |\n    Flask-APScheduler is a Flask extension which adds support for the APScheduler.\n    Advanced Python Scheduler (APScheduler) is a Python library that lets you schedule your Python \n    code to be executed later, either just once or periodically. You can add new jobs or remove old \n    ones on the fly as you please. If you store your jobs in a database, they will also survive \n    scheduler restarts and maintain their state. When the scheduler is restarted, it will then run \n    all the jobs it should have run while it was offline [1].\n\n    Among other things, APScheduler can be used as a cross-platform, application specific replacement \n    to platform specific schedulers, such as the cron daemon or the Windows task scheduler. Please \n    note, however, that APScheduler is not a daemon or service itself, nor does it come with any \n    command line tools. It is primarily meant to be run inside existing applications. That said, \n    APScheduler does provide some building blocks for you to build a scheduler service or to run a \n    dedicated scheduler process.\n  doc_url: https://apscheduler.readthedocs.io\n  dev_url: https://github.com/viniciuschiele/flask-apscheduler\n\nextra:\n  recipe-maintainers:\n    - igortg\n    - lvoliveira\n    - edetec\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/f/flask-apscheduler/Flask-APScheduler-1.12.3.tar.gz",
 "version": "1.12.3"
}