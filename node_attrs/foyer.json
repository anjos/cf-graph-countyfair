{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/606385452.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/655345533.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/681311429.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/712677902.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/728831521.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783458145.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/860925325.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/949819626.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "foyer",
 "hash_type": "sha256",
 "name": "foyer",
 "new_version": "0.11.1",
 "new_version_attempts": {
  "0.10.0": 1,
  "0.11.0": 1,
  "0.11.1": 1,
  "0.8.0": 1,
  "0.9.0": 1,
  "0.9.2": 1,
  "0.9.3": 1,
  "0.9.4": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "foyer"
  ]
 },
 "pinning_version": "2022.05.27.19.22.16",
 "raw_meta_yaml": "{% set name = \"foyer\" %}\n{% set version = \"0.11.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/mosdef-hub/foyer/archive/{{ version }}.tar.gz\n  sha256: e33d69986923c923c003c077980c8b17e64ec963ad5be671a141b9eba94faa5d\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=3.6\n  run:\n    - numpy\n    - ele\n    - openmm >=7.7\n    - parmed >=3.4.3\n    - networkx >=2.5\n    - lark-parser\n    - requests\n    - lxml\n    - protobuf\n    - python >=3.6\n    - gmso >=0.6.0\n\ntest:\n  imports:\n    - foyer\n\nabout:\n  home: https://github.com/mosdef-hub/foyer\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.rst\n  summary: Atom-typing and force field dissemination.\n  description: |\n    Foyer is an open-source Python tool that enables users to define and apply\n    force field atom-typing rules in a format that is both human- and\n    machine-readable and provides a framework for force field dissemination,\n    thus eliminating ambiguity in atom-typing and improving reproducibility.\n    Foyer defines force fields in an XML format, where SMARTS strings are used\n    to define the chemical context of a particular atom type and \"overrides\"\n    are used to set rule precedence, rather than a rigid hierarchical scheme.\n  doc_url: https://foyer.mosdef.org/\n  dev_url: https://github.com/mosdef-hub/foyer\n\nextra:\n  recipe-maintainers:\n    - justinGilmer\n    - daico007\n    - umesh-timalsina\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/mosdef-hub/foyer/archive/0.11.1.tar.gz",
 "version": "0.11.1"
}