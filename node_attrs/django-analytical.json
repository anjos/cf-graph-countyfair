{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/880082794.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "django-analytical",
 "hash_type": "sha256",
 "name": "django-analytical",
 "new_version": "3.1.0",
 "new_version_attempts": {
  "3.1.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "django-analytical"
  ]
 },
 "pinning_version": "2022.03.15.07.59.01",
 "raw_meta_yaml": "{% set name = \"django-analytical\" %}\n{% set version = \"3.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 6127c9196c8de3bcb4626f420d2ae670a7703152b1841b1b3e852b31a9a9d44b\n\nbuild:\n  number: 0\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n    - django >=2.2,<4\n\ntest:\n  imports:\n    - analytical\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/jazzband/django-analytical\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n  summary: The django-analytical application integrates analytics services into a Django project.\n  description: |\n    Using an analytics service with a Django project means adding Javascript\n    tracking code to the project templates. Of course, every service has its\n    own specific installation instructions. Furthermore, you need to include\n    your unique identifiers, which then end up in the templates. Not very nice.\n    This application hides the details of the different analytics services\n    behind a generic interface, and keeps personal information and configuration\n    out of the templates. Its goal is to make the basic set-up very simple,\n    while allowing advanced users to customize tracking. Each service is set up\n    as recommended by the services themselves, using an asynchronous version of\n    the Javascript code if possible.\n  doc_url: https://django-analytical.readthedocs.io/en/latest/\n  dev_url: https://github.com/jazzband/django-analytical\n\nextra:\n  recipe-maintainers:\n    - swainn\n",
 "smithy_version": "3.18.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/d/django-analytical/django-analytical-3.1.0.tar.gz",
 "version": "3.1.0"
}