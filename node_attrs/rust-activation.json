{
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "rust-activation",
 "name": "rust-activation",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "rust-gnu_linux-64",
   "rust-gnu_linux-aarch64",
   "rust-gnu_linux-ppc64le",
   "rust-gnu_osx-64",
   "rust-gnu_osx-arm64",
   "rust-gnu_win-64",
   "rust_linux-64",
   "rust_linux-aarch64",
   "rust_linux-ppc64le",
   "rust_osx-64",
   "rust_osx-arm64",
   "rust_win-64"
  ]
 },
 "raw_meta_yaml": "{% if version is undefined %}\n{% set version = \"1.65.0\" %}\n{% endif %}\n\n{% if cross_target_platform is undefined %}\n{% set cross_target_platform = \"foo\" %}\n{% endif %}\n\npackage:\n  name: rust-activation\n  version: {{ version }}\n\nbuild:\n  number: 0\n\noutputs:\n  - name: rust_{{ cross_target_platform }}\n    script: build.sh  # [unix]\n    script: bld.bat  # [win]\n    build:\n      skip: True  # [win and vc<14]\n      # TODO: need more work to pass the LDFLAGS and need to use clang-cl\n      skip: True  # [cross_target_platform == \"win-64\" and unix]\n    requirements:\n      host:\n        - rust-std-{{ rust_arch }}\n      run:\n        - rust {{ version }}.*\n        - rust-std-{{ rust_arch }}  {{ version }}.*\n{% if cross_target_platform.startswith(\"linux\") %}\n        - gcc_{{ cross_target_platform }}\n{% elif cross_target_platform.startswith(\"osx\") %}\n        - clang_{{ cross_target_platform }}\n{% elif cross_target_platform.startswith(\"win\") %}\n        - clang_{{ cross_target_platform }}    # [unix]\n        - vs2019_{{ cross_target_platform }}   # [win]\n{% endif %}\n        - ld64_{{ target_platform }}  # [osx]\n    test:\n      requires:\n        - file  # [unix]\n      commands:\n        - echo {{ MACOSX_DEPLOYMENT_TARGET }}-{{ rust_arch_env }}-{{ rust_default_cc }}-{{ rust_arch_env_build }}-{{ rust_default_cc_build }}\n        - set \"REQUESTS_CA_BUNDLE=\"  # [win]\n        - set \"SSL_CERT_FILE=\"       # [win]\n        - unset REQUESTS_CA_BUNDLE  # [unix]\n        - unset SSL_CERT_FILE       # [unix]\n        - rustc --help\n        - rustdoc --help\n        - cargo --help\n        - cargo install --force xsv\n        - file $PREFIX/.cargo/bin/xsv  # [unix]\n        - file $PREFIX/.cargo/bin/xsv | grep \"Mach-O 64-bit arm64 executable\"  # [unix and cross_target_platform == \"osx-arm64\"]\n        - file $PREFIX/.cargo/bin/xsv | grep \"Mach-O 64-bit x86_64 executable\"  # [unix and cross_target_platform == \"osx-64\"]\n        - file $PREFIX/.cargo/bin/xsv | grep \"ELF 64-bit LSB pie executable, x86-64\"  # [unix and cross_target_platform == \"linux-64\"]\n        - file $PREFIX/.cargo/bin/xsv | grep \"ELF 64-bit LSB pie executable, ARM aarch64\"  # [unix and cross_target_platform == \"linux-aarch64\"]\n        - file $PREFIX/.cargo/bin/xsv | grep \"ELF 64-bit LSB pie executable, 64-bit PowerPC\"  # [unix and cross_target_platform == \"linux-ppc64le\"]\n\n  - name: rust-gnu_{{ target_platform }}\n    script: bld.bat\n    build:\n      skip: True  # [not win]\n      skip: True\n    requirements:\n      run:\n        - rust-gnu  {{ version }}.*\n        - m2w64-toolchain\n    test:\n      commands:\n        - set \"REQUESTS_CA_BUNDLE=\"  # [win]\n        - set \"SSL_CERT_FILE=\"       # [win]\n        - unset REQUESTS_CA_BUNDLE  # [unix]\n        - unset SSL_CERT_FILE       # [unix]\n        - rustc --help\n        - rustdoc --help\n        - cargo --help\n        - cargo install --force xsv\n\nabout:\n  home: https://www.rust-lang.org\n  summary: A safe systems programming language (conda activation scripts)\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  description: |\n    Rust is a systems programming language that runs blazingly fast,\n    prevents segfaults, and guarantees thread safety.\n  doc_url: https://doc.rust-lang.org/\n  doc_source_url: https://github.com/rust-lang/rust/tree/master/src/doc\n  dev_url: https://github.com/rust-lang\n\nextra:\n  recipe-maintainers:\n    - isuruf\n    - xhochy\n",
 "strong_exports": false,
 "version": "1.65.0"
}