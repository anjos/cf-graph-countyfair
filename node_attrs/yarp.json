{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/966049015.json"
   },
   "data": {
    "bot_rerun": 1655164851.5959306,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/966320751.json"
   },
   "data": {
    "bot_rerun": 1655206360.1024542,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/966338981.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "qt515"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/966344485.json"
   },
   "data": {
    "bot_rerun": 1655189353.437291,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/966575988.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/966832958.json"
   },
   "data": {
    "bot_rerun": 1655911807.1826615,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/974755668.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.7.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/975413767.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/984338995.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.7.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "yarp",
 "hash_type": "sha256",
 "name": "yarp",
 "new_version": "3.7.2",
 "new_version_attempts": {
  "3.7.1": 1,
  "3.7.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "yarp",
   "yarp-cxx",
   "yarp-python"
  ]
 },
 "pinning_version": "2022.06.30.11.45.20",
 "raw_meta_yaml": "{% set name = \"yarp\" %}\n{% set namecxx = \"yarp-cxx\" %}\n{% set namepython = \"yarp-python\" %}\n{% set version = \"3.7.2\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/robotology/yarp/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: bf16e70b26e9b33323e17c4a298499e50299641a7c384904b331f2fb247c84cf\n\nbuild:\n  number: 0\n\noutputs:\n  - name: {{ namecxx }}\n    script: build_cxx.sh  # [unix]\n    script: bld_cxx.bat  # [win]\n    build:\n      run_exports:\n        - {{ pin_subpackage(namecxx, max_pin='x.x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        # Visual Studio 2017 is not supported\n        - vs2019_win-64  # [win]\n        - cmake\n        - pkg-config\n        - ninja\n        - multisheller\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n        - {{ cdt('libxext') }}  # [linux]\n        - {{ cdt('libxcb') }}  # [linux]\n        - {{ cdt('libxfixes') }}  # [linux]\n        - {{ cdt('libxau') }}  # [linux]\n        - {{ cdt('expat') }}  # [linux]\n\n      host:\n        - ace\n        - tinyxml\n        - eigen\n        - sdl\n        - sqlite\n        - jpeg\n        - bash-completion  # [not win]\n        - libi2c  # [linux]\n        - ycm-cmake-modules\n        - robot-testing-framework\n        - xorg-libxfixes  # [linux]\n        - libpng\n        - libzlib\n        - soxr\n        - libedit  # [not win]\n        - libopencv\n        - portaudio\n        - qt-main\n\n      run:\n        # ycm and eigen are mentioned in the headers so needed when building\n        # against yarp-cxx\n        - ycm-cmake-modules\n        - eigen\n\n    test:\n      commands:\n        - yarp help\n        - test -f ${PREFIX}/include/yarp/os/all.h  # [not win]\n        - test -f ${PREFIX}/lib/libYARP_os.so  # [linux]\n        - test -f ${PREFIX}/lib/libYARP_os.dylib  # [osx]\n        - test -f ${PREFIX}/lib/cmake/YARP_os/YARP_osConfig.cmake  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\yarp\\\\os\\\\all.h exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\YARP_os.lib exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\YARP_os.dll exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\cmake\\\\YARP_os\\\\YARP_osConfig.cmake exit 1  # [win]\n\n  - name: {{ namepython }}\n    script: build_py.sh  # [unix]\n    script: bld_py.bat  # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - swig\n        - ninja\n        - cmake\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage(namecxx, exact=True) }}\n        - python\n        - pip\n        - openssl 1.1.1\n\n      run:\n        - {{ pin_subpackage(namecxx, exact=True) }}\n        - python\n        - numpy\n    test:\n      commands:\n        - test $(pip list | grep yarp | tr -s \" \" | grep $PKG_VERSION | wc -l) -eq 1  # [unix]\n        - pip check\n      requires:\n        - pip\n      imports:\n        - yarp\n\n  - name: {{ name }}\n    build:\n      run_exports:\n        - {{ pin_subpackage(namecxx, max_pin='x.x.x') }}\n    requirements:\n      run:\n        - {{ pin_subpackage(namecxx, exact=True) }}\n        - {{ pin_subpackage(namepython, max_pin='x.x.x') }}\n    test:\n      imports:\n        - yarp\n\nabout:\n  home: https://github.com/robotology/yarp\n  license: BSD-3-Clause AND MIT AND GPL-3.0-or-later\n  license_file:\n    - COPYING\n    - extern/thrift/LICENSES/BSD-3-Clause.txt\n    - extern/dirent/dirent/LICENSE\n    - extern/xmlrpcpp/xmlrpcpp/COPYING\n  summary: YARP is a library and toolkit for communication and device interfaces, used on everything from humanoids to embedded devices.\n\n\nextra:\n  recipe-maintainers:\n    - traversaro\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/robotology/yarp/archive/refs/tags/v3.7.2.tar.gz",
 "version": "3.7.2"
}