{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/919658844.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/921051903.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/963286393.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/995061343.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/996038725.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1015731178.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1035804660.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1045209551.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.11.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1068952325.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.11.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1107216058.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.12.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1150207033.json"
   },
   "data": {
    "bot_rerun": 1671109100.1236959,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.12.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1166779002.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.12.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: InvalidVersion(\"Invalid version: '3.8.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 200, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: InvalidVersion(\"Invalid version: '3.8.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.8.* *_cpython'\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "dials",
 "hash_type": "sha256",
 "name": "dials",
 "new_version": "3.12.1",
 "new_version_attempts": {
  "3.10.0": 1,
  "3.10.1": 1,
  "3.10.2": 1,
  "3.10.3": 1,
  "3.11.0": 1,
  "3.11.1": 1,
  "3.11.2": 0,
  "3.12.0": 1,
  "3.12.1": 2
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dials"
  ]
 },
 "pinning_version": "2022.12.15.08.47.10",
 "raw_meta_yaml": "{% set name = \"dials\" %}\n{% set version = \"3.11.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/dials/dials/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 3a3bb75fb82e175cd6ace8f5b2be0cee2f70d79d272ffb34420165f8b798daa1\n  folder: dials\n  patches:\n    - skip_model_background_test.diff\n    - skip_ssx_reduction.diff\n    - patch_convert_to_cbf.diff  # [win]\n    - patch_test_symmetry.diff\n    - patch_test_simple_integrate.diff\n\nbuild:\n  number: 0\n  skip: true  # [py<38]\n  osx_is_app: true\n  entry_points:\n    - cluster.dials.exec = dials.command_line.cluster_exec:run\n    - dev.dials.csv = dials.command_line.rl_csv:run\n    - dev.dials.show_extensions = dials.command_line.show_extensions:run\n    - dev.dials.ssx_index = dials.command_line.ssx_index:run\n    - dev.dials.ssx_integrate = dials.command_line.ssx_integrate:run\n    - dials.align_crystal = dials.command_line.align_crystal:run\n    - dials.anvil_correction = dials.command_line.anvil_correction:run\n    - dials.apply_mask = dials.command_line.apply_mask:run\n    - dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run\n    - dials.augment_spots = dials.command_line.augment_spots:run\n    - dials.background = dials.command_line.background:run\n    - dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run\n    - dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run\n    - dials.combine_experiments = dials.command_line.combine_experiments:run\n    - dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run\n    - dials.complete_full_sphere = dials.command_line.complete_full_sphere:run\n    - dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run\n    - dials.convert_to_cbf = dials.command_line.convert_to_cbf:run\n    - dials.cosym = dials.command_line.cosym:run\n    - dials.create_profile_model = dials.command_line.create_profile_model:run\n    - dials.damage_analysis = dials.command_line.damage_analysis:run\n    - dials.detect_blanks = dials.command_line.detect_blanks:run\n    - dials.estimate_gain = dials.command_line.estimate_gain:run\n    - dials.estimate_resolution = dials.command_line.estimate_resolution:run\n    - dials.export = dials.command_line.export:run\n    - dials.export_best = dials.command_line.export_best:run\n    - dials.export_bitmaps = dials.command_line.export_bitmaps:run\n    - dials.filter_reflections = dials.command_line.filter_reflections:run\n    - dials.find_bad_pixels = dials.command_line.find_bad_pixels:run\n    - dials.find_hot_pixels = dials.command_line.find_hot_pixels:run\n    - dials.find_rotation_axis = dials.command_line.find_rotation_axis:run\n    - dials.find_shared_models = dials.command_line.find_shared_models:run\n    - dials.find_spots = dials.command_line.find_spots:run\n    - dials.find_spots_client = dials.command_line.find_spots_client:run\n    - dials.find_spots_server = dials.command_line.find_spots_server:run\n    - dials.frame_orientations = dials.command_line.frame_orientations:run\n    - dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run\n    - dials.generate_mask = dials.command_line.generate_mask:run\n    - dials.geometry_viewer = dials.command_line.geometry_viewer:run\n    - dials.goniometer_calibration = dials.command_line.goniometer_calibration:run\n    - dials.image_viewer = dials.command_line.image_viewer:run\n    - dials.import = dials.command_line.dials_import:run\n    - dials.import_xds = dials.command_line.import_xds:run\n    - dials.index = dials.command_line.index:run\n    - dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run\n    - dials.integrate = dials.command_line.integrate:run\n    - dials.merge = dials.command_line.merge:run\n    - dials.merge_cbf = dials.command_line.merge_cbf:run\n    - dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run\n    - dials.missing_reflections = dials.command_line.missing_reflections:run\n    - dials.model_background = dials.command_line.model_background:run\n    - dials.modify_geometry = dials.command_line.modify_geometry:run\n    - dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run\n    - dials.plot_reflections = dials.command_line.plot_reflections:run\n    - dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run\n    - dials.plugins = dials.command_line.plugins:run\n    - dials.powder_calibrate = dials.command_line.powder_calibrate:run\n    - dials.predict = dials.command_line.predict:run\n    - dials.rbs = dials.command_line.refine_bravais_settings:run\n    - dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run\n    - dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run\n    - dials.refine = dials.command_line.refine:run\n    - dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run\n    - dials.refine_error_model = dials.command_line.refine_error_model:run\n    - dials.reflection_viewer = dials.command_line.reflection_viewer:run\n    - dials.reindex = dials.command_line.reindex:run\n    - dials.report = dials.command_line.report:run\n    - dials.rl_png = dials.command_line.rl_png:run\n    - dials.rlv = dials.command_line.reciprocal_lattice_viewer:run\n    - dials.rs_mapper = dials.command_line.rs_mapper:run\n    - dials.scale = dials.command_line.scale:run\n    - dials.search_beam_position = dials.command_line.search_beam_position:run\n    - dials.sequence_to_stills = dials.command_line.sequence_to_stills:run\n    - dials.shadow_plot = dials.command_line.shadow_plot:run\n    - dials.show = dials.command_line.show:run\n    - dials.slice_sequence = dials.command_line.slice_sequence:run\n    - dials.sort_reflections = dials.command_line.sort_reflections:run\n    - dials.split_experiments = dials.command_line.split_experiments:run\n    - dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run\n    - dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run\n    - dials.stereographic_projection = dials.command_line.stereographic_projection:run\n    - dials.stills_process = dials.command_line.stills_process:run\n    - dials.symmetry = dials.command_line.symmetry:run\n    - dials.two_theta_offset = dials.command_line.two_theta_offset:run\n    - dials.two_theta_refine = dials.command_line.two_theta_refine:run\n    - dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run\n    - dials.version = dials.command_line.version:run\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - boost <1.75\n    - boost-cpp <1.75\n    - cctbx-base\n    - dxtbx =3.11\n    - msgpack-c\n    - pip\n    - python\n  run:\n    - {{ pin_compatible('boost') }}\n    - {{ pin_compatible('cctbx-base') }}\n    - {{ pin_compatible('dxtbx') }}\n    - boost-cpp\n    - gemmi\n    - h5py\n    - jinja2\n    - matplotlib-base\n    - numpy\n    - orderedset\n    - pandas\n    - procrunner\n    - pycbf\n    - python\n    - scikit-learn\n    - scipy\n    - tabulate\n    - tqdm\n    - wxpython\n\ntest:\n  source_files:\n    - dials/tests\n    - dials/conftest.py\n  requires:\n    - dials-data\n    - pip\n    - pytest\n    - pytest-forked\n    - pytest-mock\n    - pytest-xdist\n  imports:\n    - dials\n  commands:\n    - pytest $SRC_DIR/dials/tests --regression -n auto  # [not win]\n    - pytest %SRC_DIR%/dials/tests --regression -n auto  # [win]\n    - pip check\n\nabout:\n  home: https://github.com/dials/dials\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dials/LICENSE\n  summary: Diffraction Integration for Advanced Light Sources\n  description: |\n    The DIALS project is a collaborative endeavour to develop new diffraction\n    integration software to meet the data analysis requirements presented by recent\n    advances in high performance pixel array detectors, new beamlines capable of\n    delivering micron and sub-micron focus and new light sources such as XFELs.\n  doc_url: https://dials.github.io/documentation/index.html\n  dev_url: https://github.com/dials/dials\n\nextra:\n  recipe-maintainers:\n    - anthchirp\n    - ndevenish\n    - rjgildea\n",
 "smithy_version": "3.22.1",
 "strong_exports": false,
 "url": "https://github.com/dials/dials/archive/refs/tags/v3.11.2.tar.gz",
 "version": "3.11.2"
}