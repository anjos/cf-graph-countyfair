{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/847988456.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/848094758.json"
   },
   "data": {
    "bot_rerun": 1645581986.882702,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/848174548.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/860847946.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.8.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/861758226.json"
   },
   "data": {
    "bot_rerun": 1646589758.6449811,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/872532927.json"
   },
   "data": {
    "bot_rerun": 1647352142.3921933,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/879658609.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/880763150.json"
   },
   "data": {
    "bot_rerun": 1648733455.078773,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/896597154.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/931354223.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.9.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/963289385.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/995028629.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/995936420.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1015527904.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "dxtbx",
 "hash_type": "sha256",
 "name": "dxtbx",
 "new_version": "3.10.3",
 "new_version_attempts": {
  "3.10.0": 1,
  "3.10.1": 1,
  "3.10.2": 1,
  "3.10.3": 1,
  "3.8.3": 1,
  "3.9.0": 1,
  "3.9.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dxtbx"
  ]
 },
 "pinning_version": "2022.08.01.12.11.42",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"dxtbx\" %}\n{% set version = \"3.10.3\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/cctbx/dxtbx/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 4fcd8f7cb59fb045d58ce286c62b8af0c2ba7ccbec15c532bb878dde6bd7f36a\n  folder: dxtbx\n  patches:\n    - patch_windows_entrypoint.diff  # [win]\n    - patch_nxmx_xfail.diff  # [win]\n\nbuild:\n  skip: true  # [py<38]\n  number: 0\n  entry_points:\n    - cxi.image2pickle = dxtbx.command_line.image2pickle:run\n    - cxi.image_average = dxtbx.command_line.image_average:run\n    - dev.dxtbx.debug_memory = dxtbx.command_line.debug_memory:run\n    - dev.dxtbx.read_sequence = dxtbx.command_line.read_sequence:run\n    - dxtbx.depends_on = dxtbx.command_line.depends_on:run\n    - dxtbx.detector_superpose = dxtbx.command_line.detector_superpose:run\n    - dxtbx.display_parallax_correction = dxtbx.command_line.display_parallax_correction:run\n    - dxtbx.dlsnxs2cbf = dxtbx.command_line.dlsnxs2cbf:run\n    - dxtbx.image2pickle = dxtbx.command_line.image2pickle:run\n    - dxtbx.image_average = dxtbx.command_line.image_average:run\n    - dxtbx.install_format = dxtbx.command_line.install_format:run\n    - dxtbx.overload = dxtbx.command_line.overload:run\n    - dxtbx.plot_detector_models = dxtbx.command_line.plot_detector_models:run\n    - dxtbx.print_header = dxtbx.command_line.print_header:run\n    - dxtbx.print_matching_images = dxtbx.command_line.print_matching_images:run\n    - dxtbx.radial_average = dxtbx.command_line.radial_average:run\n    - dxtbx.saturation = dxtbx.command_line.saturation:run\n    - dxtbx.show_mask_info = dxtbx.command_line.show_mask_info:run\n    - dxtbx.show_matching_formats = dxtbx.command_line.show_matching_formats:run\n    - dxtbx.show_registry = dxtbx.command_line.show_registry:run\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - pybind11                               # [build_platform != target_platform]\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - boost\n    - cctbx-base >=2022.5\n    - hdf5\n    - numpy\n    - pip\n    - pybind11\n    - python\n  run:\n    - {{ pin_compatible('boost') }}\n    - {{ pin_compatible('cctbx-base') }}\n    - {{ pin_compatible('hdf5') }}\n    - h5py\n    - hdf5plugin\n    - matplotlib-base\n    - {{ pin_compatible('numpy') }}\n    - pint\n    - procrunner\n    - pycbf\n    - python\n    - python-dateutil >=2.7.0\n    - scipy\n    - tqdm\n\ntest:\n  source_files:\n    - dxtbx/tests\n    - dxtbx/conftest.py\n  requires:\n    - dials-data\n    - pytest <7\n    - pytest-mock\n    - pip\n  imports:\n    - dxtbx.ext\n  commands:\n    - pytest $SRC_DIR/dxtbx/tests --regression  # [not win]\n    - pytest %SRC_DIR%/dxtbx/tests --regression  # [win]\n    - pip check\n\nabout:\n  home: https://github.com/cctbx/dxtbx\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dxtbx/LICENSE.txt\n  summary: Diffraction Experiment Toolbox\n  description: |\n    A cctbx-style toolbox to describe single-crystal diffraction experiments,\n    where a monochromatic beam is used to illuminate a sample which is rotated\n    during the exposure and diffraction recorded on a flat area detector.\n  doc_url: https://dials.github.io/documentation/index.html\n  dev_url: https://github.com/cctbx/dxtbx\n\nextra:\n  recipe-maintainers:\n    - ndevenish\n    - rjgildea\n    - anthchirp\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://github.com/cctbx/dxtbx/archive/refs/tags/v3.10.3.tar.gz",
 "version": "3.10.3"
}