{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/968706939.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1000310836.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "openmmtorchplugin",
 "hash_type": "sha256",
 "name": "openmmtorchplugin",
 "new_version": "1.0.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmmtorchplugin"
  ]
 },
 "pinning_version": "2022.07.18.11.18.34",
 "raw_meta_yaml": "{% set name = \"openmmtorchplugin\" %}\n{% set version = \"1.0.0\" %}\n\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/SCMusson/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 1a9197c32209eaa37b9dcb1a7ef6ed30841ea5beed124b902485c20f5dd92021\n\nbuild:\n  number: 1\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}   # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                 # [cuda_compiler_version == \"None\"]\n  skip: true  # [cuda_compiler_version in (undefined, 'None', '10.2')]\n  skip: true  # [not unix]\n  # Set rpaths we need to link against libtorch.so, but it is located in site-packages\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  run_exports:\n    - {{ pin_subpackage( name|lower ) }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n    - swig\n  host:\n    - openmm\n    - pip\n    - python\n    # First for global version pin, second for build variant\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n  run:\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - python\n  run_constrained:\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - torchintegratorplugin\n  commands:\n    - test -f $PREFIX/include/TorchIntegratorKernels.h  # [unix]\nabout:\n  home: https://github.com/SCMusson/openmmtorchplugin\n  license: GPL-3.0-only\n  license_file: LICENSE\n  summary: OpenMM plugin to get forces for neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to \n    access force and energy. It is implemented with PyTorch.\n  doc_url: https://github.com/SCMusson/openmmtorchplugin\n  dev_url: https://github.com/SCMusson/openmmtorchplugin\n\nextra:\n  recipe-maintainers:\n    - SCMusson\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/SCMusson/openmmtorchplugin/archive/v1.0.0.tar.gz",
 "version": "1.0.0"
}