{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/591784604.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/597554806.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602691486.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/689237500.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/693312972.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/756976408.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/773543170.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783790574.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/923939357.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "weldx",
 "hash_type": "sha256",
 "name": "weldx",
 "new_version": "0.6.1",
 "new_version_attempts": {
  "0.3.0": 1,
  "0.3.1": 1,
  "0.3.2": 1,
  "0.4.0": 1,
  "0.4.1": 1,
  "0.5.0": 1,
  "0.5.1": 1,
  "0.5.2": 1,
  "0.6.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "weldx"
  ]
 },
 "pinning_version": "2022.04.28.22.31.46",
 "raw_meta_yaml": "{% set name = \"weldx\" %}\n{% set version = \"0.6.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: d39cac0a6e2f1ada968372e78049723597f0b5418687c5d6473762046fbe7361 \n\nbuild:\n  number: 0\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - setuptools_scm\n    - python\n  run:\n    - python >=3.8,<3.11\n    - numpy >=1.20\n    - asdf >=2.8.2\n    - pandas >=1.0\n    - xarray >=0.19\n    - scipy >=1.4,!=1.6.0,!=1.6.1\n    - sympy >=1.6\n    - pint >=0.18\n    - pint-xarray >=0.2.1\n    - bottleneck >=1.3.3\n    - boltons\n    - bidict\n    - networkx >=2,!=2.7.0,<=2.8.0\n    - fs\n    - meshio\n    - psutil\n    - IPython\ntest:\n  requires:\n    - pip\n  imports:\n    - weldx\n    - weldx.visualization\n  commands:\n    - pip check\n    - welding_schema --help\n\nabout:\n  home: https://www.bam.de/Content/EN/Projects/WelDX/weldx.html\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Python API for the WelDX file format and standard\n  description: |\n    Scientific welding data covers a wide range of physical domains and\n    timescales and are measured using various different sensors. Complex and\n    highly specialized experimental setups at different welding institutes\n    complicate the exchange of welding research data further.\n\n    The WelDX research project aims to foster the exchange of scientific data\n    inside the welding community by developing and establishing a new open\n    source file format suitable for documentation of experimental welding data\n    and upholding associated quality standards. In addition to fostering\n    scientific collaboration inside the national and international welding\n    community an associated advisory committee will be established to oversee\n    the future development of the file format. The proposed file format will be\n    developed with regard to current needs of the community regarding\n    interoperability, data quality and performance and will be published under\n    an appropriate open source license. By using the file format objectivity,\n    comparability and reproducibility across different experimental setups can\n    be improved.\n  doc_url: https://weldx.readthedocs.io\n  dev_url: https://github.com/BAMWelDX/weldx/\n\nextra:\n  recipe-maintainers:\n    - marscher\n    - vhirtham\n    - CagtayFabry\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/w/weldx/weldx-0.6.1.tar.gz",
 "version": "0.6.1"
}