{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222719122.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/274179772.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/323360762.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/410458844.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/757641076.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/875788730.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/932745406.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/956215546.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "category_encoders",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url": "https://contrib.scikit-learn.org/categorical-encoding",
   "home": "https://github.com/scikit-learn-contrib/categorical_encoding",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "dist/LICENSE.md",
   "summary": "A collection sklearn transformers to encode categorical variables as numeric"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "cd dist && /usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install -vvv ."
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package": {
   "name": "category_encoders",
   "version": "2.4.1"
  },
  "requirements": {
   "host": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "pip",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ],
   "run": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "6e927c9681c68598980d2debed348c7ed39173c616ffe46936ac62c35086cbb4",
    "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.4.1.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "5d365116843c1d06a18d75a38482af05726a88b5ecb519c845a02f14010bd216",
    "url": "https://github.com/scikit-learn-contrib/category_encoders/archive/2.4.1.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "python -m pip check",
    "cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\""
   ],
   "imports": [
    "category_encoders"
   ],
   "requires": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ],
   "source_files": [
    "src/tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "patsy",
    "pip",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "patsy",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url": "https://contrib.scikit-learn.org/categorical-encoding",
   "home": "https://github.com/scikit-learn-contrib/categorical_encoding",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "dist/LICENSE.md",
   "summary": "A collection sklearn transformers to encode categorical variables as numeric"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "cd dist && /usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install -vvv ."
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package": {
   "name": "category_encoders",
   "version": "2.4.1"
  },
  "requirements": {
   "host": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "pip",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ],
   "run": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "6e927c9681c68598980d2debed348c7ed39173c616ffe46936ac62c35086cbb4",
    "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.4.1.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "5d365116843c1d06a18d75a38482af05726a88b5ecb519c845a02f14010bd216",
    "url": "https://github.com/scikit-learn-contrib/category_encoders/archive/2.4.1.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "python -m pip check",
    "cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\""
   ],
   "imports": [
    "category_encoders"
   ],
   "requires": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ],
   "source_files": [
    "src/tests"
   ]
  }
 },
 "name": "category_encoders",
 "new_version": "2.5.0",
 "new_version_attempts": {
  "2.2.2": 1,
  "2.3.0": 1,
  "2.4.0": 1,
  "2.4.1": 1,
  "2.5.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "category_encoders"
  ]
 },
 "pinning_version": "2022.06.02.10.52.40",
 "raw_meta_yaml": "{% set name = \"category_encoders\" %}\n{% set version = \"2.4.1\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n    sha256: 6e927c9681c68598980d2debed348c7ed39173c616ffe46936ac62c35086cbb4\n    folder: dist\n  - url: https://github.com/scikit-learn-contrib/{{ name }}/archive/{{ version }}.tar.gz\n    sha256: 5d365116843c1d06a18d75a38482af05726a88b5ecb519c845a02f14010bd216\n    folder: src\n\nbuild:\n  noarch: python\n  number: 0\n  script:\n    - cd dist && {{ PYTHON }} -m pip install -vvv .\n\nrequirements:\n  host:\n    - numpy >=1.14.0\n    - pandas >=0.21.1\n    - patsy >=0.5.1\n    - pip\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n  run:\n    - numpy >=1.14.0\n    - pandas >=0.21.1\n    - patsy >=0.5.1\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n\ntest:\n  source_files:\n    - src/tests\n  requires:\n    - cython\n    - pip\n    - pytest\n    - pytest-cov\n  imports:\n    - category_encoders\n  commands:\n    - python -m pip check\n    - cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\"\n\nabout:\n  home: https://github.com/scikit-learn-contrib/categorical_encoding\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dist/LICENSE.md\n  summary: A collection sklearn transformers to encode categorical variables as numeric\n  doc_url: https://contrib.scikit-learn.org/categorical-encoding\n  description: |-\n    A set of scikit-learn-style transformers for encoding categorical variables\n    into numeric with different techniques. While ordinal, one-hot, and hashing\n    encoders have similar equivalents in the existing scikit-learn version, the\n    transformers in this library all share a few useful properties:\n\n    - First-class support for pandas dataframes as an input (and optionally as\n      output)\n\n    - Can explicitly configure which columns in the data are encoded by name or\n      index, or infer non-numeric columns regardless of input type\n\n    - Can drop any columns with very low variance based on training set\n      optionally\n\n    - Portability: train a transformer on data, pickle it, reuse it later and\n      get the same thing out.\n\n    - Full compatibility with sklearn pipelines, input an array-like dataset\n      like any other transformer\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nirajd\n    - wdm0006\n",
 "req": {
  "__set__": true,
  "elements": [
   "numpy",
   "pandas",
   "patsy",
   "pip",
   "python",
   "scikit-learn",
   "scipy",
   "statsmodels"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "patsy",
    "pip",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "patsy",
    "python",
    "scikit-learn",
    "scipy",
    "statsmodels"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ]
  }
 },
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "pip",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.4.1.tar.gz",
 "version": "2.4.1"
}