{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222719122.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/274179772.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/323360762.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/410458844.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/757641076.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/875788730.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/932745406.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/956215546.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "category_encoders",
 "hash_type": "sha256",
 "name": "category_encoders",
 "new_version": "2.5.0",
 "new_version_attempts": {
  "2.2.2": 1,
  "2.3.0": 1,
  "2.4.0": 1,
  "2.4.1": 1,
  "2.5.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "category_encoders"
  ]
 },
 "pinning_version": "2022.06.02.10.52.40",
 "raw_meta_yaml": "{% set version = \"2.5.0\" %}\n\npackage:\n  name: category_encoders\n  version: {{ version }}\n\nsource:\n  - url: https://pypi.io/packages/source/c/category_encoders/category_encoders-{{ version }}.tar.gz\n    sha256: 64dc68cd30dea32a390b3eed880f6e365635118c916b082dde99b76741155c15\n    folder: dist\n  - url: https://github.com/scikit-learn-contrib/category_encoders/archive/{{ version }}.tar.gz\n    sha256: ff72d21ddf62d829f43375c67ea4934c82947f9a0c5cbf9114838624db941420\n    folder: src\n\nbuild:\n  noarch: python\n  number: 0\n  script:\n    - cd dist && {{ PYTHON }} -m pip install -vvv .\n\nrequirements:\n  host:\n    - numpy >=1.14.0\n    - pandas >=1.0.5\n    - patsy >=0.5.1\n    - pip\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n  run:\n    - numpy >=1.14.0\n    - pandas >=1.0.5\n    - patsy >=0.5.1\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n\ntest:\n  source_files:\n    - src/tests\n  requires:\n    - cython\n    - pip\n    - pytest\n    - pytest-cov\n  imports:\n    - category_encoders\n  commands:\n    - pip check\n    - cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\"\n\nabout:\n  home: https://github.com/scikit-learn-contrib/categorical_encoding\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dist/LICENSE.md\n  summary: A collection sklearn transformers to encode categorical variables as numeric\n  doc_url: https://contrib.scikit-learn.org/categorical-encoding\n  description: |-\n    A set of scikit-learn-style transformers for encoding categorical variables\n    into numeric with different techniques. While ordinal, one-hot, and hashing\n    encoders have similar equivalents in the existing scikit-learn version, the\n    transformers in this library all share a few useful properties:\n\n    - First-class support for pandas dataframes as an input (and optionally as\n      output)\n\n    - Can explicitly configure which columns in the data are encoded by name or\n      index, or infer non-numeric columns regardless of input type\n\n    - Can drop any columns with very low variance based on training set\n      optionally\n\n    - Portability: train a transformer on data, pickle it, reuse it later and\n      get the same thing out.\n\n    - Full compatibility with sklearn pipelines, input an array-like dataset\n      like any other transformer\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nirajd\n    - wdm0006\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.5.0.tar.gz",
 "version": "2.5.0"
}