{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/830763471.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/917499444.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "glog06"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/926285805.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "vlfeat0921"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/958313764.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "qt515"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "colmap",
 "hash_type": "sha256",
 "name": "colmap",
 "new_version": "3.7",
 "new_version_attempts": {
  "3.7": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "colmap"
  ]
 },
 "pinning_version": "2022.06.04.19.02.46",
 "raw_meta_yaml": "{% set name = \"colmap\" %}\n{% set version = \"3.7\" %}\n{% set build = 5 %}\n\n{% set processor = \"cpu\" if cuda_compiler_version == \"None\" else \"gpu\" %}  # [not osx]\n{% set processor = \"cpu\" %}  # [osx]\n\n# Prioritize gpu build if cudatoolkit can be installed (through __cuda virtual package)\n{% set build = build + 100 if processor == \"gpu\" else build %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/{{ name }}/{{ name }}/archive/{{ version }}.tar.gz\n    sha256: ceb7cca204550d65b890cd0082c66f4bc69193daf9da64616d8147a46b76cc55\n    patches:\n      - fix_build.patch\n\nbuild:\n  number: {{ build }}\n  skip: true  # [win or (osx and cuda_compiler_version != \"None\")]\n  string: {{ processor }}h{{ PKG_HASH }}_{{ build }}\n  run_exports:\n    - {{ pin_subpackage('colmap', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('c') }}\n    - {{ compiler('cuda') }}         # [not osx and cuda_compiler_version != \"None\"]\n    - cmake\n    - make                           # [unix]\n    - pkg-config\n    - ninja\n    - llvm-openmp                    # [osx]\n    - libgomp                        # [linux]\n    # x11 stuff\n    - {{ cdt('mesa-libgl-devel') }}  # [unix and not arm64]\n    - {{ cdt('mesa-dri-drivers') }}  # [unix and not arm64]\n    - {{ cdt('libselinux') }}        # [linux]\n    - {{ cdt('libxcb') }}            # [linux]\n    - {{ cdt('libxdamage') }}        # [linux]\n    - {{ cdt('libxfixes') }}         # [linux]\n    - {{ cdt('libxxf86vm') }}        # [linux]\n    - {{ cdt('libxext') }}           # [linux]\n    - {{ cdt('libxau') }}            # [linux]\n    - {{ cdt('expat-devel') }}       # [linux]\n    - sysroot_linux-64 2.17          # [linux64]\n  host:\n    # x11 stuff\n    - xorg-libxext                   # [unix]\n    - xorg-libxdmcp                  # [unix]\n    - xorg-libxau                    # [unix]\n    - libxcb                         # [unix]\n    - xorg-libxfixes                 # [unix]\n    - xorg-libxrender                # [unix]\n    - xorg-libx11                    # [unix]\n    - xorg-libice                    # [unix]\n    - xorg-libsm                     # [unix]\n    - libglu                         # [linux]\n    # deps\n    - boost-cpp\n    - suitesparse\n    - eigen\n    - freeimage\n    - glog\n    - gflags\n    - glew\n    - cgal-cpp\n    - ceres-solver\n    - qt-main\n    - git\n    - flann\n    - sqlite\n    - vlfeat\n    - gmp                            # [unix]\n  run:\n    - boost-cpp\n    - vlfeat\n    - flann\n    - xorg-libxext                   # [unix]\n    - xorg-libxdmcp                  # [unix]\n    - xorg-libxau                    # [unix]\n    - libxcb                         # [unix]\n    - xorg-libxfixes                 # [unix]\n    - xorg-libxrender                # [unix]\n    - xorg-libx11                    # [unix]\n    - xorg-libice                    # [unix]\n    - xorg-libsm                     # [unix]\n    - libglu                         # [linux]\n    - __cuda >={{ cuda_compiler_version }}  # [not osx and cuda_compiler_version != \"None\"]\n\ntest:\n  commands:\n    - if exist %PREFIX%\\\\Library\\\\bin\\\\colmap.exe (exit 0) else (exit 1)  # [win]\n    - test -f $PREFIX/bin/colmap  # [unix]\n    - test -f $PREFIX/lib/colmap/libcolmap.a  # [unix]\n    - test -f $PREFIX/lib/colmap/libcolmap_cuda.a  # [unix and cuda_compiler_version != \"None\"]\n    - test -f $PREFIX/share/colmap/COLMAPConfig.cmake  # [unix]\n\nabout:\n  home: https://colmap.github.io/\n  license: BSD-3-Clause\n  license_file:\n    - COPYING.txt\n    - lib/Graclus/LICENSE\n    - lib/LSD/LICENSE\n    - lib/PBA/LICENSE\n    - lib/PoissonRecon/LICENSE\n    - lib/SiftGPU/LICENSE\n  summary: COLMAP is a general-purpose Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline with a graphical and command-line interface.\n\nextra:\n  recipe-maintainers:\n    - Tobias-Fischer\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://github.com/colmap/colmap/archive/3.7.tar.gz",
 "version": "3.7"
}