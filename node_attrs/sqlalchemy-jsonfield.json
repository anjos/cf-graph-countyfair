{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1a3b46bd-1d0b-421b-9161-25be66e9fd2d.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/390150216.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/537141983.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "sqlalchemy-jsonfield",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "SqlAlchemy provides JSON field support for several database types\n(PostgreSQL and MySQL for now) and semi-working dict <-> JSON <-> VARCHAR\nexample, but... In real scenarios we have tests on sqlite, production on\nMySQL/MariaDB/Percona/PostgreSQL and some of them (modern Oracle MySQL &\nPostgreSQL) support JSON, some of them (SQLite, Percona & MariaDB) requires\ndata conversion to Text (not VARCHAR).\n\nAs addition, we have different levels of Unicode support on database and\nconnector side, so we may be interested to switch JSON encoding between d\neployments.\n",
   "dev_url": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "doc_url": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "home": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "SQLALchemy JSONField implementation for storing dicts at SQL independently\nfrom JSON type support.\n"
  },
  "build": {
   "noarch": "python",
   "number": "2",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar"
   ]
  },
  "package": {
   "name": "sqlalchemy-jsonfield",
   "version": "1.0.0"
  },
  "requirements": {
   "host": [
    "python >=3.5",
    "pip",
    "setuptools",
    "setuptools_scm"
   ],
   "run": [
    "python >=3.5",
    "sqlalchemy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-typing.patch"
   ],
   "sha256": "766d0b25bdebf53f67ccfaf9975987f921965987b37bae3a95ba6e7855afe98b",
   "url": "https://pypi.io/packages/source/S/SQLAlchemy-JSONField/SQLAlchemy-JSONField-1.0.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "sqlalchemy_jsonfield"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "sqlalchemy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "SqlAlchemy provides JSON field support for several database types\n(PostgreSQL and MySQL for now) and semi-working dict <-> JSON <-> VARCHAR\nexample, but... In real scenarios we have tests on sqlite, production on\nMySQL/MariaDB/Percona/PostgreSQL and some of them (modern Oracle MySQL &\nPostgreSQL) support JSON, some of them (SQLite, Percona & MariaDB) requires\ndata conversion to Text (not VARCHAR).\n\nAs addition, we have different levels of Unicode support on database and\nconnector side, so we may be interested to switch JSON encoding between d\neployments.\n",
   "dev_url": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "doc_url": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "home": "https://github.com/penguinolog/sqlalchemy_jsonfield",
   "license": "Apache-2.0",
   "license_family": "Apache",
   "license_file": "LICENSE",
   "summary": "SQLALchemy JSONField implementation for storing dicts at SQL independently\nfrom JSON type support.\n"
  },
  "build": {
   "noarch": "python",
   "number": "2",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar"
   ]
  },
  "package": {
   "name": "sqlalchemy-jsonfield",
   "version": "1.0.0"
  },
  "requirements": {
   "host": [
    "python >=3.5",
    "pip",
    "setuptools",
    "setuptools_scm"
   ],
   "run": [
    "python >=3.5",
    "sqlalchemy"
   ]
  },
  "source": {
   "patches": [
    "0001-remove-typing.patch"
   ],
   "sha256": "766d0b25bdebf53f67ccfaf9975987f921965987b37bae3a95ba6e7855afe98b",
   "url": "https://pypi.io/packages/source/S/SQLAlchemy-JSONField/SQLAlchemy-JSONField-1.0.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "sqlalchemy_jsonfield"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "name": "sqlalchemy-jsonfield",
 "new_version": "1.0.0",
 "new_version_attempts": {
  "1.0.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "sqlalchemy-jsonfield"
  ]
 },
 "pinning_version": "2020.12.11.09.47.37",
 "raw_meta_yaml": "{% set name = \"SQLAlchemy-JSONField\" %}\n{% set version = \"1.0.0\" %}\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 766d0b25bdebf53f67ccfaf9975987f921965987b37bae3a95ba6e7855afe98b\n  patches:\n    - 0001-remove-typing.patch\n\nbuild:\n  number: 2\n  script: {{ PYTHON }} -m pip install . -vv\n  noarch: python\n\n\nrequirements:\n  host:\n    - python >=3.5\n    - pip\n    - setuptools\n    - setuptools_scm\n  run:\n    - python >=3.5\n    - sqlalchemy\n\ntest:\n  imports:\n    - sqlalchemy_jsonfield\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/penguinolog/sqlalchemy_jsonfield\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: |\n    SQLALchemy JSONField implementation for storing dicts at SQL independently\n    from JSON type support.\n\n  description: |\n    SqlAlchemy provides JSON field support for several database types\n    (PostgreSQL and MySQL for now) and semi-working dict <-> JSON <-> VARCHAR\n    example, but... In real scenarios we have tests on sqlite, production on\n    MySQL/MariaDB/Percona/PostgreSQL and some of them (modern Oracle MySQL &\n    PostgreSQL) support JSON, some of them (SQLite, Percona & MariaDB) requires\n    data conversion to Text (not VARCHAR).\n\n    As addition, we have different levels of Unicode support on database and\n    connector side, so we may be interested to switch JSON encoding between d\n    eployments.\n  doc_url: https://github.com/penguinolog/sqlalchemy_jsonfield\n  dev_url: https://github.com/penguinolog/sqlalchemy_jsonfield\n\nextra:\n  recipe-maintainers:\n    - xylar\n",
 "req": {
  "__set__": true,
  "elements": [
   "pip",
   "python",
   "setuptools",
   "setuptools_scm",
   "sqlalchemy"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "sqlalchemy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.5",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python >=3.5",
    "sqlalchemy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/S/SQLAlchemy-JSONField/SQLAlchemy-JSONField-1.0.0.tar.gz",
 "version": "1.0.0"
}