{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/336094641.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501969737.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/581230426.json"
   },
   "data": {
    "bot_rerun": 1622574816.8486605,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/659291514.json"
   },
   "data": {
    "bot_rerun": 1636396431.1939623,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/683005524.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774899682.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/932885595.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pyca",
 "hash_type": "sha256",
 "name": "pyca",
 "new_version": "3.2.0",
 "new_version_attempts": {
  "3.2.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyca"
  ]
 },
 "pinning_version": "2022.05.09.07.08.30",
 "pre_pr_migrator_attempts": {
  "pypy37": 1
 },
 "pre_pr_migrator_status": {
  "pypy37": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1423274743\">bot CI job</a>): master: ['linux_64_numpy1.19python3.7.____73_pypy: Encountered problems while solving:\\n  - package python-3.7.10-0_73_pypy requires python_abi 3.7 *_pypy37_pp73, but none of the providers can be installed\\n', 'osx_64_numpy1.19python3.7.____73_pypy: Encountered problems while solving:\\n  - package python-3.7.9-4_73_pypy requires python_abi 3.7 *_pypy37_pp73, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"pyca\" %}\n{% set version = \"3.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/slaclab/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: 284829b102afbb4b1eb34ce18b84e209dad43bec614ea89c6776462620e52176\n  patches:\n    - 0001-setup.patch\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n  skip: true   # [win]\n  missing_dso_whitelist:\n    - '*/libca.*'\n    - '*/libCom.*'\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - python\n    - epicscorelibs\n    - numpy\n    - pip\n    - setuptools\n    - setuptools_dso\n  run:\n    - python\n    - epicscorelibs\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  imports:\n    - pyca\n    - psp\n\nabout:\n  home: https://github.com/slaclab/pyca\n  license: LicenseRef-BSD-3-Clause-SLAC\n  license_family: BSD\n  license_file: LICENSE.md\n  summary: PyCA - lightweight bindings for Python applications to access EPICS PVs.\n\n  description: |\n    PyCA (Python Channel Access) is a module that offers lightweight\n    bindings for Python applications to access EPICS PVs. It acts as\n    a channel access client, much like pyepics. The intention of the \n    module is to provide better performance for embedded applications,\n    rather than to provide an interactive interface. The most significant\n    gains will be found when monitoring large waveforms that need to be\n    processed before exposing them the Python layer.      \n  dev_url: https://github.com/slaclab/pyca\n\nextra:\n  recipe-maintainers:\n    - klauer\n    - zllentz\n    - zrylettc\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/slaclab/pyca/archive/3.2.0.tar.gz",
 "version": "3.2.0"
}