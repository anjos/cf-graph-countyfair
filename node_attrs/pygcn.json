{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.19"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/307704336.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.20"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/368408919.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/384536092.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/564343400.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/619864333.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/808802550.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1002601935.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pygcn",
 "hash_type": "sha256",
 "name": "pygcn",
 "new_version": "1.1.3",
 "new_version_attempts": {
  "1.1.0": 1,
  "1.1.1": 1,
  "1.1.2": 1,
  "1.1.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pygcn"
  ]
 },
 "pinning_version": "2022.07.20.11.32.46",
 "raw_meta_yaml": "{% set name = \"pygcn\" %}\n{% set version = \"1.1.3\" %}\n{% set sha256 = \"cc74d365e9b53bd909ec7c4c0d36badf327c848f1481909669f099526fde66dc\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vvv\n  entry_points:\n    - pygcn-listen = gcn.cmdline:listen_main\n    - pygcn-serve = gcn.cmdline:serve_main\n\nrequirements:\n  host:\n    - pip\n    - python >=3.7\n    - setuptools >=42\n    - setuptools-scm >=3.4\n    - wheel\n  run:\n    - lxml\n    - python >=3.7\n\ntest:\n  requires:\n    - pip\n    - pytest\n  imports:\n    - gcn\n    - gcn.handlers\n    - gcn.notice_types\n    - gcn.voeventclient\n  commands:\n    - python -m pip check\n    - python -m pytest --pyargs gcn\n    - pygcn-listen --help\n    - pygcn-serve --help\n\nabout:\n  home: https://github.com/lpsinger/pygcn\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE.md\n  summary: Anonymous VOEvent client for receiving GCN/TAN notices in XML format\n  description: |\n    The Gamma-ray Coordinates Network/Transient Astronomy Network (GCN/TAN),\n    is a system for distributing astronomical alerts, largely focused on\n    operations of and detections from high-energy satellite missions.\n\n    GCN/TAN disseminates both Notices (prompt, machine-readable alerts) and\n    Circulars (human-readable correspondence) through a handful of delivery\n    methods and formats.\n\n    This package implements a simple client that anonymously listens for\n    VOEvent XML format notices over the custom TCP/IP VOEvent Transport\n    Protocol.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - lpsinger\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/p/pygcn/pygcn-1.1.3.tar.gz",
 "version": "1.1.3"
}