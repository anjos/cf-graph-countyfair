{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/240004271.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/283404905.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "boost-1.70.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/283423110.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "boost-cpp-1.70.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "id": "9191db8f-396d-484a-a8de-764f8bb58d49",
    "merged_at": "never issued",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/3d64a5c5-856e-421a-996d-7647abd21ffd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/de0e4af9-7559-4c96-b6b8-ec37bc070368.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485592937.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": {
  "exception": "HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/conda-forge/multineat-feedstock (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)'))",
  "traceback": [
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 174, in _new_conn",
   "    conn = connection.create_connection(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/connection.py\", line 95, in create_connection",
   "    raise err",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/connection.py\", line 85, in create_connection",
   "    sock.connect(sa)",
   "socket.timeout: timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen",
   "    httplib_response = self._make_request(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 386, in _make_request",
   "    self._validate_conn(conn)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 1040, in _validate_conn",
   "    conn.connect()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 358, in connect",
   "    conn = self._new_conn()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 179, in _new_conn",
   "    raise ConnectTimeoutError(",
   "urllib3.exceptions.ConnectTimeoutError: (<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)')",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 440, in send",
   "    resp = conn.urlopen(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen",
   "    retries = retries.increment(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 592, in increment",
   "    raise MaxRetryError(_pool, url, error or ResponseError(cause))",
   "urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/conda-forge/multineat-feedstock (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)'))",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1133, in _run_migrator",
   "    migrator_uid, pr_json = run(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 201, in run",
   "    feedstock_dir, repo = get_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 305, in get_repo",
   "    _sync_default_branches(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 327, in _sync_default_branches",
   "    default_branch = gh.get_repo(f\"conda-forge/{reponame}\").default_branch",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/MainClass.py\", line 330, in get_repo",
   "    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 354, in requestJsonAndCheck",
   "    *self.requestJson(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 454, in requestJson",
   "    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 528, in __requestEncode",
   "    status, responseHeaders, output = self.__requestRaw(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 555, in __requestRaw",
   "    response = cnx.getresponse()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 127, in getresponse",
   "    r = verb(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in get",
   "    return self.request('GET', url, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 645, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 507, in send",
   "    raise ConnectTimeout(e, request=request)",
   "requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/conda-forge/multineat-feedstock (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)'))",
   ""
  ]
 },
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "multineat",
 "linux_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "name": "multineat",
 "new_version": false,
 "osx_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "multineat"
  ]
 },
 "pinning_version": "2020.09.11.19.40.57",
 "pre_pr_migrator_attempts": {
  "pypy": 1,
  "python310": 682,
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "pypy": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/943740893\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1132, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 226, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 261, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "python310": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1850891536\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 174, in _new_conn\n    conn = connection.create_connection(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/connection.py\", line 95, in create_connection\n    raise err\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/connection.py\", line 85, in create_connection\n    sock.connect(sa)\nsocket.timeout: timed out\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 386, in _make_request\n    self._validate_conn(conn)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 1040, in _validate_conn\n    conn.connect()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 358, in connect\n    conn = self._new_conn()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connection.py\", line 179, in _new_conn\n    raise ConnectTimeoutError(\nurllib3.exceptions.ConnectTimeoutError: (<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)')\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 440, in send\n    resp = conn.urlopen(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen\n    retries = retries.increment(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 592, in increment\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\nurllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/conda-forge/multineat-feedstock (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)'))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1133, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 201, in run\n    feedstock_dir, repo = get_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 305, in get_repo\n    _sync_default_branches(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 327, in _sync_default_branches\n    default_branch = gh.get_repo(f\"conda-forge/{reponame}\").default_branch\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/MainClass.py\", line 330, in get_repo\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 354, in requestJsonAndCheck\n    *self.requestJson(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 454, in requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 528, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 555, in __requestRaw\n    response = cnx.getresponse()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 127, in getresponse\n    r = verb(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in get\n    return self.request('GET', url, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 645, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 507, in send\n    raise ConnectTimeout(e, request=request)\nrequests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/conda-forge/multineat-feedstock (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff83d7b57c0>, 'Connection to api.github.com timed out. (connect timeout=15)'))\n",
  "python39": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/801086502\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1135, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 226, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 261, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "\n{% set name = \"multineat\" %}\n{% set version = \"0.5.2\" %}\n{% set sha256 = \"d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_tag: release/{{ version }}\n  git_url: https://github.com/MultiNEAT/MultiNEAT.git\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - python\n    - setuptools\n    - cmake\n    - psutil\n    - boost>=1.67\n    - boost-cpp>=1.67\n  run:\n    - python\n    - psutil\n    - boost>=1.67\n    - boost-cpp>=1.67\n    - numpy>=1.11.3\n    - matplotlib>=2.2\n    - opencv>=3.3\n    - psutil\n    - ipyparallel\n    - progressbar  # [py<=2.7]\n\ntest:\n  source_files:\n    - examples/TestTraits.py\n    - examples/NoveltySearch.py\n    - examples/TestNEAT_xor.py\n    - examples/TestHyperNEAT_xor.py\n\nabout:\n  home: http://MultiNEAT.com\n  license: LGPL-3.0\n  license_family: LGPL\n  license_file: LICENSE\n  summary: \n    Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others.\n  description: |\n    MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n  doc_url: http://multineat.com/docs.html\n  dev_url: https://github.com/MultiNEAT/MultiNEAT\n\nextra:\n  recipe-maintainers:\n    - anton-matosov\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost",
   "boost-cpp",
   "cmake",
   "ipyparallel",
   "matplotlib",
   "numpy",
   "opencv",
   "psutil",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.10",
 "strong_exports": false,
 "time": 1568135295.5254986,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost-cpp>=1.67",
    "boost>=1.67",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp>=1.67",
    "boost>=1.67",
    "ipyparallel",
    "matplotlib>=2.2",
    "numpy>=1.11.3",
    "opencv>=3.3",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": null,
 "version": "0.5.2",
 "win_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}