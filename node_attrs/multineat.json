{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/240004271.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/283404905.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "boost-1.70.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/283423110.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "boost-cpp-1.70.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "id": "9191db8f-396d-484a-a8de-764f8bb58d49",
    "merged_at": "never issued",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/3d64a5c5-856e-421a-996d-7647abd21ffd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/de0e4af9-7559-4c96-b6b8-ec37bc070368.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485592937.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": {
  "exception": "<class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
  "traceback": [
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 445, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 440, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 1347, in getresponse",
   "    response.begin()",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 307, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 268, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into",
   "    return self.read(nbytes, buffer)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read",
   "    return self._sslobj.read(len, buffer)",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 439, in send",
   "    resp = conn.urlopen(",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 755, in urlopen",
   "    retries = retries.increment(",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 532, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 735, in reraise",
   "    raise value",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 699, in urlopen",
   "    httplib_response = self._make_request(",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 447, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout",
   "    raise ReadTimeoutError(",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 195, in _request",
   "    return request_method(*args, **kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 555, in get",
   "    return self.request('GET', url, **kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/session.py\", line 174, in request",
   "    response = super(GitHubSession, self).request(*args, **kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 529, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1122, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 167, in run",
   "    feedstock_dir, repo = get_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 256, in get_repo",
   "    repo = gh.repository(\"conda-forge\", feedstock_reponame)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/github.py\", line 1986, in repository",
   "    json = self._json(self._get(url), 200)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 210, in _get",
   "    return self._request(\"get\", url, **kwargs)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 200, in _request",
   "    raise exceptions.ConnectionError(exc)",
   "github3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   ""
  ]
 },
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "multineat",
 "linux_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "name": "multineat",
 "new_version": false,
 "osx_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "multineat"
  ]
 },
 "pinning_version": "2020.09.11.19.40.57",
 "pre_pr_migrator_status": {
  "pypy": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/658102431\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1122, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 226, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 261, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "python39": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/658102431\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 445, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 440, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 1347, in getresponse\n    response.begin()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 307, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/http/client.py\", line 268, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nsocket.timeout: The read operation timed out\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 439, in send\n    resp = conn.urlopen(\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 755, in urlopen\n    retries = retries.increment(\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 532, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 735, in reraise\n    raise value\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 699, in urlopen\n    httplib_response = self._make_request(\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 447, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 195, in _request\n    return request_method(*args, **kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 555, in get\n    return self.request('GET', url, **kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/session.py\", line 174, in request\n    response = super(GitHubSession, self).request(*args, **kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 529, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1122, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 167, in run\n    feedstock_dir, repo = get_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 256, in get_repo\n    repo = gh.repository(\"conda-forge\", feedstock_reponame)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/github.py\", line 1986, in repository\n    json = self._json(self._get(url), 200)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 210, in _get\n    return self._request(\"get\", url, **kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 200, in _request\n    raise exceptions.ConnectionError(exc)\ngithub3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n"
 },
 "raw_meta_yaml": "\n{% set name = \"multineat\" %}\n{% set version = \"0.5.2\" %}\n{% set sha256 = \"d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_tag: release/{{ version }}\n  git_url: https://github.com/MultiNEAT/MultiNEAT.git\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - python\n    - setuptools\n    - cmake\n    - psutil\n    - boost>=1.67\n    - boost-cpp>=1.67\n  run:\n    - python\n    - psutil\n    - boost>=1.67\n    - boost-cpp>=1.67\n    - numpy>=1.11.3\n    - matplotlib>=2.2\n    - opencv>=3.3\n    - psutil\n    - ipyparallel\n    - progressbar  # [py<=2.7]\n\ntest:\n  source_files:\n    - examples/TestTraits.py\n    - examples/NoveltySearch.py\n    - examples/TestNEAT_xor.py\n    - examples/TestHyperNEAT_xor.py\n\nabout:\n  home: http://MultiNEAT.com\n  license: LGPL-3.0\n  license_family: LGPL\n  license_file: LICENSE\n  summary: \n    Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others.\n  description: |\n    MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n  doc_url: http://multineat.com/docs.html\n  dev_url: https://github.com/MultiNEAT/MultiNEAT\n\nextra:\n  recipe-maintainers:\n    - anton-matosov\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost",
   "boost-cpp",
   "cmake",
   "ipyparallel",
   "matplotlib",
   "numpy",
   "opencv",
   "psutil",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.10",
 "strong_exports": false,
 "time": 1568135295.5254986,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost-cpp>=1.67",
    "boost>=1.67",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp>=1.67",
    "boost>=1.67",
    "ipyparallel",
    "matplotlib>=2.2",
    "numpy>=1.11.3",
    "opencv>=3.3",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": null,
 "version": "0.5.2",
 "win_64_meta_yaml": {
  "about": {
   "description": "MultiNEAT is a portable software library for performing neuroevolution, a form of machine learning that trains neural networks with a genetic algorithm. It is based on NEAT, an advanced method for evolving neural networks through complexification. The neural networks in NEAT begin evolution with very simple genomes which grow over successive generations. The individuals in the evolving population are grouped by similarity into species, and each of them can compete only with the individuals in the same species.\n",
   "dev_url": "https://github.com/MultiNEAT/MultiNEAT",
   "doc_url": "http://multineat.com/docs.html",
   "home": "http://MultiNEAT.com",
   "license": "LGPL-3.0",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "summary": "Portable NeuroEvolution Library. Implements NEAT, rtNETA, HyperNEAT, Novelty Search and others."
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "anton-matosov",
    "anton-matosov"
   ]
  },
  "package": {
   "name": "multineat",
   "version": "0.5.2"
  },
  "requirements": {
   "build": [
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "python",
    "setuptools",
    "cmake",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67"
   ],
   "run": [
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel",
    "python",
    "psutil",
    "boost>=1.67",
    "boost-cpp>=1.67",
    "numpy>=1.11.3",
    "matplotlib>=2.2",
    "opencv>=3.3",
    "psutil",
    "ipyparallel"
   ]
  },
  "source": {
   "git_rev": "release/0.5.2",
   "git_url": "https://github.com/MultiNEAT/MultiNEAT.git"
  },
  "test": {
   "source_files": [
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py",
    "examples/TestTraits.py",
    "examples/NoveltySearch.py",
    "examples/TestNEAT_xor.py",
    "examples/TestHyperNEAT_xor.py"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cmake",
    "psutil",
    "python",
    "setuptools"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "ipyparallel",
    "matplotlib",
    "numpy",
    "opencv",
    "psutil",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}