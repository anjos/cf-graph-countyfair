{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/336095266.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/348480275.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "7.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/393007333.json"
   },
   "data": {
    "bot_rerun": 1597087705.4183836,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/422875843.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "7.4.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/465756378.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/499531590.json"
   },
   "data": {
    "bot_rerun": 1603118413.773306,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/502000610.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/506046480.json"
   },
   "data": {
    "bot_rerun": 1603192689.2663634,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/506713021.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/527680647.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "openmm",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*"
   ],
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "7.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd"
   ],
   "run": [
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system"
   ]
  },
  "source": {
   "sha256": "193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28",
   "url": "https://github.com/openmm/openmm/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU"
   ],
   "imports": [
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm"
   ],
   "requires": [
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl",
    "pocl"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "doxygen",
    "fftw",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pocl"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*"
   ],
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "7.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd"
   ],
   "run": [
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system"
   ]
  },
  "source": {
   "sha256": "193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28",
   "url": "https://github.com/openmm/openmm/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU"
   ],
   "imports": [
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm"
   ],
   "requires": [
    "pocl",
    "pocl",
    "pocl",
    "pocl"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "doxygen",
    "fftw",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pocl"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll"
   ],
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "7.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom"
   ],
   "host": [
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "ocl-icd",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader"
   ]
  },
  "source": {
   "sha256": "193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28",
   "url": "https://github.com/openmm/openmm/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU"
   ],
   "imports": [
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm"
   ],
   "requires": null
  }
 },
 "name": "openmm",
 "new_version": "7.4.2",
 "new_version_attempts": {
  "7.4.2": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*"
   ],
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "7.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14"
   ],
   "run": [
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy",
    "python",
    "fftw",
    "numpy"
   ]
  },
  "source": {
   "sha256": "193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28",
   "url": "https://github.com/openmm/openmm/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "test -f $PREFIX/lib/libOpenMM$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"",
    "cd ${CONDA_PREFIX}/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU"
   ],
   "imports": [
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm"
   ],
   "requires": null
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "doxygen",
    "fftw",
    "lxml",
    "numpy",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmm"
  ]
 },
 "pinning_version": "2020.11.25.17.00.45",
 "raw_meta_yaml": "{% set name = \"openmm\" %}\n{% set version = \"7.5.0\" %}\n# Make sure version and revision match according to the GitHub release!\n{% set revision = \"b49b82efb5a253a7c891ca084b3370e181de2ea3\" %}\n\n{% set build = 3 %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  # pre-rc\n  git_url: https://github.com/openmm/{{ name }}.git\n  git_rev: {{ revision }}\n\nbuild:\n  number: {{ build }}\n  string: \"py{{ PY_VER.replace('.', '') }}h{{ PKG_HASH }}_{{ build }}_{{ opencl_impl }}\"  # [osx]\n  track_features:  # make khronos low priority\n    - openmm_opencl_khronos  # [osx and (opencl_impl == 'khronos')]\n  skip: true  # [(cuda_compiler_version in (undefined, 'None') and (linux64 or win)) or ((cuda_compiler_version != '10.2') and (ppc64le))]\n  missing_dso_whitelist:\n    - \"*/libcuda.*\"    # [linux64 or ppc64le]\n    - \"*/libOpenCL.*\"  # [unix]\n    - \"*/nvcuda.dll\"   # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [linux64 or ppc64le or win]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make  # [unix]\n    - jom  # [win]\n\n  host:\n    - python\n    - fftw\n    - swig\n    - pthread-stubs\n    - lxml\n    - numpy\n    - cython\n    # needed for Python wrappers\n    - doxygen 1.8.14\n    # OpenCL ICD\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]\n\n  run:\n    - python\n    - fftw\n    - numpy\n    # OpenCL ICD\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]\n    - ocl_icd_wrapper_apple      # [osx and opencl_impl == 'khronos']\n\n  run_constrained:\n    - khronos-opencl-icd-loader  ==9999999999  # [osx and opencl_impl == 'apple']\n    - ocl_icd_wrapper_apple      ==9999999999  # [osx and opencl_impl == 'apple']\n\ntest:\n  requires:\n    - pocl  # [linux]\n  imports:\n    - simtk\n    - simtk.openmm\n  commands:\n    ## Are the key libraries built?\n    # Existence tests Unix\n    - test -f $PREFIX/lib/libOpenMM$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libOpenMMPME$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT  # [linux64 or ppc64le]\n    - test -f $PREFIX/lib/plugins/libOpenMMCudaCompiler$SHLIB_EXT  # [linux64 or ppc64le]\n    # Existence tests Windows\n    - if not exist %LIBRARY_LIB%/OpenMM.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1  # [win]\n\n    ## Do they work properly?\n    # Debug silent errors in plugin loading\n    - python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"\n    # Check that hardcoded library path was correctly replaced by conda-build\n    - python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"\n\n    # Check all platforms\n    - python -m simtk.testInstallation\n    # Linux64 / PPC see all 4 platforms, but CUDA is not usable because there's no GPU there\n    - python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 4, f'n_platforms ({n}) != 4'\"  # [linux64 or ppc64le]\n    # Windows will only see 2 because the driver nvcuda.dll is missing and that throws a 126 error\n    - python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"  # [win]\n    # MacOS / ARM only see 3 because CUDA is not available there\n    - python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 3, f'n_platforms ({n}) != 3'\"  # [osx or aarch64]\n\n    # Run a small MD\n    - cd ${CONDA_PREFIX}/share/openmm/examples  # [unix]\n    - cd %LIBRARY_PREFIX%/share/openmm/examples  # [win]\n    - python benchmark.py --test=rf --seconds=10 --platform=Reference\n    - python benchmark.py --test=rf --seconds=10 --platform=CPU\n\n    # Check version metadata looks ok\n    - python -c \"from simtk.openmm import Platform; v = Platform.getOpenMMVersion(); assert '{{ version }}' in (v, v+'.0'), v + '!={{ version }}'\"\n    - python -c \"from simtk.openmm.version import git_revision; r = git_revision; r == '{{ revision }}', r + '!={{ revision }}'\"\n\nabout:\n  home: http://openmm.org\n  license: LGPL-3.0-or-later\n  license_family: LGPL\n  license_file:\n    - docs-source/licenses/Licenses.txt\n    - docs-source/licenses/LGPL.txt\n    - docs-source/licenses/GPL.txt\n  summary: A high performance toolkit for molecular simulation.\n\n  description: |\n    OpenMM is a toolkit for molecular simulation. It can be used either as a\n    stand-alone application for running simulations, or as a library you call\n    from your own code. It provides a combination of extreme flexibility\n    (through custom forces and integrators), openness, and high performance\n    (especially on recent GPUs) that make it truly unique among simulation\n    codes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\n    platforms).\n  doc_url: http://docs.openmm.org\n  dev_url: https://github.com/openmm/openmm\n\nextra:\n  recipe-maintainers:\n    - jchodera\n    - jaimergp\n    - peastman\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cdt_stub",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "doxygen",
   "fftw",
   "jom",
   "khronos-opencl-icd-loader",
   "lxml",
   "make",
   "numpy",
   "ocl-icd",
   "ocl-icd-system",
   "pthread-stubs",
   "python",
   "swig"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "jom",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "doxygen",
    "fftw",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "fftw",
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "jom",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "doxygen 1.8.14",
    "fftw",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/openmm/openmm/archive/7.4.0.tar.gz",
 "version": "7.5.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll"
   ],
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "7.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom"
   ],
   "host": [
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "doxygen 1.8.14",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "fftw",
    "numpy",
    "khronos-opencl-icd-loader"
   ]
  },
  "source": {
   "sha256": "193a501d10ca713443e44e0d8972c5d3f30ee0ed116d59679d1cbdabd6b96b28",
   "url": "https://github.com/openmm/openmm/archive/2c36e9b34d046f09be4887ff60e7fdac02cf3cdb.tar.gz"
  },
  "test": {
   "commands": [
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU",
    "if not exist %LIBRARY_LIB%/OpenMM.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMPME.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCUDA.lib exit 1",
    "if not exist %LIBRARY_LIB%/plugins/OpenMMCudaCompiler.lib exit 1",
    "python -c \"import simtk.openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\\n')\"",
    "python -c \"import os, simtk.openmm.version as v; print(v.openmm_library_path); assert os.path.isdir(v.openmm_library_path), 'Directory does not exist'\"",
    "python -m simtk.testInstallation",
    "python -c \"from simtk.openmm import Platform as P; n = P.getNumPlatforms(); assert n == 2, f'n_platforms ({n}) != 2'\"",
    "cd %LIBRARY_PREFIX%/share/openmm/examples",
    "python benchmark.py --test=rf --seconds=10 --platform=Reference",
    "python benchmark.py --test=rf --seconds=10 --platform=CPU"
   ],
   "imports": [
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm",
    "simtk",
    "simtk.openmm"
   ],
   "requires": null
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "jom"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "doxygen",
    "fftw",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "khronos-opencl-icd-loader",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}