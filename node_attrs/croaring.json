{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/280007023.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.61"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/291211097.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.62"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/292609921.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.63"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/312888976.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.64"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/312915547.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.65"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/376303477.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.66"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/615481615.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/616203597.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/683864987.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/696540535.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "croaring",
 "hash_type": "sha256",
 "name": "croaring",
 "new_version": "0.6.0",
 "new_version_attempts": {
  "0.3.0": 1,
  "0.3.1": 1,
  "0.3.2": 1,
  "0.3.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "croaring"
  ]
 },
 "pinning_version": "2021.07.25.11.01.12",
 "raw_meta_yaml": "{% set name = \"CRoaring\" %}\n{% set version = \"0.2.66\" %}\n{% set sha256 = \"df98bd8f6ff09097ada529a004af758ff4d33faf6a06fadf8fad9a6533afc241\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/RoaringBitmap/CRoaring/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [win]\n  run_exports:\n    - {{ pin_subpackage('croaring', max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}    \n    - cmake\n\ntest:\n  commands:\n    # headers\n    - test -f $PREFIX/include/roaring/array_util.h                                   # [unix]\n    - test -f $PREFIX/include/roaring/bitset_util.h                                  # [unix]\n    - test -f $PREFIX/include/roaring/portability.h                                  # [unix]\n    - test -f $PREFIX/include/roaring/roaring_array.h                                # [unix]\n    - test -f $PREFIX/include/roaring/roaring_types.h                                # [unix]\n    - test -f $PREFIX/include/roaring/roaring_version.h                              # [unix]\n    - test -f $PREFIX/include/roaring/roaring.h                                      # [unix]\n    - test -f $PREFIX/include/roaring/utilasm.h                                      # [unix]\n    - test -f $PREFIX/include/roaring/containers/array.h                             # [unix]\n    - test -f $PREFIX/include/roaring/containers/bitset.h                            # [unix]\n    - test -f $PREFIX/include/roaring/containers/containers.h                        # [unix]\n    - test -f $PREFIX/include/roaring/containers/convert.h                           # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_andnot.h                      # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_equal.h                       # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_intersection.h                # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_negation.h                    # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_subset.h                      # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_union.h                       # [unix]\n    - test -f $PREFIX/include/roaring/containers/mixed_xor.h                         # [unix]\n    - test -f $PREFIX/include/roaring/containers/perfparameters.h                    # [unix]\n    - test -f $PREFIX/include/roaring/containers/run.h                               # [unix]\n    - test -f $PREFIX/include/roaring/misc/configreport.h                            # [unix]\n\n    # shared\n    - test -f $PREFIX/lib/libroaring${SHLIB_EXT}                                     # [unix]\n\nabout:\n  home: https://github.com/RoaringBitmap/CRoaring\n  license: Apache 2.0\n  license_family: APACHE\n  license_file: LICENSE\n  summary: |\n    Portable Roaring bitmaps in C (and C++) with full support for your favorite compiler (GNU GCC, LLVM's clang, Visual Studio). \n    Included in the Awesome C list of open source C software.\n\nextra:\n  recipe-maintainers:\n    - fabio-cumbo\n",
 "smithy_version": "3.10.3",
 "strong_exports": false,
 "url": "https://github.com/RoaringBitmap/CRoaring/archive/v0.2.66.tar.gz",
 "version": "0.2.66"
}