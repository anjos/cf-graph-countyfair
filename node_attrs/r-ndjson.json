{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/426224851.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "r400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/652983719.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "r410"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-ndjson",
 "hash_type": "sha256",
 "name": "r-ndjson",
 "new_version": "0.8.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-ndjson"
  ]
 },
 "pinning_version": "2021.05.25.06.47.12",
 "raw_meta_yaml": "{% set version = '0.8.0' %}\n\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-ndjson\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/ndjson_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/ndjson/ndjson_{{ version }}.tar.gz\n  sha256: 22a037dbad0ae17e0ac442f45370fa7b4c4cc23f66ef1a949fe4e910dd5b7f53\n\nbuild:\n  merge_build_host: True  # [win]\n  number: 3\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ compiler('c') }}              # [not win]\n    - {{ compiler('m2w64_c') }}        # [win]\n    - {{ compiler('cxx') }}            # [not win]\n    - {{ compiler('m2w64_cxx') }}      # [win]\n    - {{ posix }}filesystem        # [win]\n    - {{ posix }}make\n    - {{ posix }}sed               # [win]\n    - {{ posix }}coreutils         # [win]\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-rcpp\n    - r-data.table\n    - r-tibble\n  run:\n    - r-base\n    - {{ native }}gcc-libs         # [win]\n    - r-rcpp\n    - r-data.table\n    - r-tibble\n    - zlib\n\ntest:\n  commands:\n    - $R -e \"library('ndjson')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('ndjson')\\\"\"  # [win]\n\nabout:\n  home: http://gitlab.com/hrbrmstr/ndjson\n  license: MIT\n  summary: Streaming 'JSON' ('ndjson') has one 'JSON' record per-line and many modern 'ndjson'\n    files contain large numbers of records. These constructs may not be columnar in\n    nature, but it is often useful to read in these files and \"flatten\" the structure\n    out to enable working with the data in an R 'data.frame'-like context. Functions\n    are provided that make it possible to read in plain 'ndjson' files or compressed\n    ('gz') 'ndjson' files and either validate the format of the records or create \"flat\"\n    'data.table' structures from them.\n  license_family: MIT\n  license_file:\n    - '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/MIT'\n    - LICENSE\n\nextra:\n  recipe-maintainers:\n    - mxr-conda\n    - ndmaxar\n    - oblute\n    - rluria14\n    - conda-forge/r\n\n# The original CRAN metadata for this package was:\n\n# Package: ndjson\n# Type: Package\n# Title: Wicked-Fast Streaming 'JSON' ('ndjson') Reader\n# Version: 0.8.0\n# Date: 2019-11-13\n# Authors@R: c( person(\"Bob\", \"Rudis\", email = \"bob@rud.is\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0001-5670-2640\")), person(\"Niels\", \"Lohmann\", role = \"aut\", comment = \"C++ json parser\"), person(\"Deepak\", \"Bandyopadhyay\", role = \"aut\", comment = \"C++ gzstream\"), person(\"Lutz\", \"Kettner\", role = \"aut\", comment = \"C++ gzstream\"), person(\"Neal\", \"Fultz\", role = \"ctb\", comment = \"Rcpp integration\"), person(\"Maarten\", \"Demeyer\", role = \"ctb\", comment = \"dtplyr cleanup\"))\n# Maintainer: Bob Rudis <bob@rud.is>\n# Description: Streaming 'JSON' ('ndjson') has one 'JSON' record per-line and many modern 'ndjson' files contain large numbers of records. These constructs may not be columnar in nature, but it is often useful to read in these files and \"flatten\" the structure out to enable working with the data in an R 'data.frame'-like context. Functions are provided that make it possible to read in plain 'ndjson' files or compressed ('gz') 'ndjson' files and either validate the format of the records or create \"flat\" 'data.table' structures from them.\n# URL: http://gitlab.com/hrbrmstr/ndjson\n# BugReports: https://gitlab.com/hrbrmstr/ndjson/issues\n# SystemRequirements: zlib, C++14\n# NeedsCompilation: yes\n# License: MIT + file LICENSE\n# Encoding: UTF-8\n# Suggests: tinytest, covr\n# Depends: R (>= 3.2.0)\n# Imports: Rcpp, data.table, tibble\n# LinkingTo: Rcpp\n# RoxygenNote: 6.1.1\n# Packaged: 2019-11-13 14:54:51 UTC; hrbrmstr\n# Author: Bob Rudis [aut, cre] (<https://orcid.org/0000-0001-5670-2640>), Niels Lohmann [aut] (C++ json parser), Deepak Bandyopadhyay [aut] (C++ gzstream), Lutz Kettner [aut] (C++ gzstream), Neal Fultz [ctb] (Rcpp integration), Maarten Demeyer [ctb] (dtplyr cleanup)\n# Repository: CRAN\n# Date/Publication: 2019-11-13 15:20:02 UTC\n\n# See\n# https://docs.conda.io/projects/conda-build for\n# more information about meta.yaml\n",
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/ndjson_0.8.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/ndjson/ndjson_0.8.0.tar.gz"
 ],
 "version": "0.8.0"
}