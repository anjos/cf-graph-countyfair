{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/374549020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500667036.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "champ",
 "hash_type": "sha256",
 "name": "champ",
 "new_version": "2.1.1",
 "new_version_attempts": {
  "2.1.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "champ"
  ]
 },
 "pinning_version": "2020.10.08.20.29.16",
 "raw_meta_yaml": "{% set name = \"champ\" %}\n{% set version = \"2.1.0\" %}\n{% set sha256 = \"e4483770196c389800fb771721df0e29b008cb39837a94ee215690b51f71a7cb\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://files.pythonhosted.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n  number: 1\n  noarch: python\n\n\nrequirements:\n\n  host:\n    - python\n    - igraph\n    - setuptools\n    - pip\n\n  run:\n    - python\n    - python-igraph\n    - matplotlib-base\n    - numpy >=1.13\n    - scipy >=0.19\n    - pandas\n    - h5py\n    - seaborn\n    - tqdm\n    - louvain\n    - leidenalg\n    - scikit-learn\n    - future\n\n\ntest:\n  imports:\n    - champ\n\nabout:\n  home: https://github.com/wweir827/CHAMP\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'A modularity based tool for screening a set of partitions.'\n  description: |\n    Modularity based community detection for networks and filtering\n    based presence of domain of optimality within the resolution space.\n  doc_url: https://champ.readthedocs.io/en/latest\n\nextra:\n  recipe-maintainers: \n    - wweir827\n",
 "smithy_version": "3.8.0",
 "strong_exports": false,
 "url": "https://files.pythonhosted.org/packages/source/c/champ/champ-2.1.0.tar.gz",
 "version": "2.1.0"
}