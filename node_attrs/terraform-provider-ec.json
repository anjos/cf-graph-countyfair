{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/670165189.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/672202688.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/759097650.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/862598124.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/933066306.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "terraform-provider-ec",
 "hash_type": "sha256",
 "name": "terraform-provider-ec",
 "new_version": "0.4.1",
 "new_version_attempts": {
  "0.2.0": 1,
  "0.2.1": 1,
  "0.3.0": 1,
  "0.4.0": 1,
  "0.4.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "terraform-provider-ec"
  ]
 },
 "pinning_version": "2022.05.09.07.08.30",
 "raw_meta_yaml": "{% set provider = \"ec\" %}\n{% set goname = \"github.com/elastic/terraform-provider-\"+provider.lower() %}\n{% set version = \"0.4.1\" %}\n\n{% set name = goname.split('/')[-1] %}\n\n{% set x4_plugin = name + '_v' + version + \"_x4\"%}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://{{ goname }}/archive/v{{ version }}.tar.gz\n  sha256: 677c1a1aed436f8435364ffd719069e4d2a86f645a1f9fd12cbe9d820018e77b\n\nbuild:\n  number: 0\n  script:\n    - go build -v -o {{ target_gobin }}{{ x4_plugin }}{{ target_goexe }}\n\nrequirements:\n  build:\n    - {{ compiler('go') }} 1.16\n  run:\n    - terraform 0.13\n\ntest:\n  requires:   # [win]\n    - m2-bash       # [win]\n    - m2-coreutils  # [win]\n\n  commands:\n    # Create a sample init.tf loading the provider. Set source namespace since different than default 'hashicorp/'\n    - echo -e 'provider \"{{ provider|lower }}\" { version=\"{{ version }}\" }\\n\\nterraform {\\n required_providers {\\n {{ provider|lower }} = {\\n source=\"elastic/ec\"\\n version=\"{{ version }}\"\\n }\\n }\\n }' > init.tf  # [unix]\n    - (echo provider \"{{ provider|lower }}\" { version=\"{{ version }}\" } && echo. && echo terraform { && echo required_providers { && echo {{ provider|lower }} = { && echo source=\"elastic/ec\" && echo version=\"{{ version }}\" && echo } && echo } && echo }) > init.tf  # [win]\n\n    # Initialize\n    - terraform init\n\n    # Tests that init was successful\n    - test -f .terraform/plugins/registry.terraform.io/elastic/ec/{{ version }}/{{ target_goos }}_{{ target_goarch }}/LICENSE            # [unix]\n    - if not exist .terraform\\plugins\\registry.terraform.io\\elastic\\ec\\{{ version }}\\{{ target_goos }}_{{ target_goarch }}\\LICENSE exit 1  # [win]\n\n    # Test that the provider was not downloaded\n    - test ! -f .terraform/plugins/registry.terraform.io/elastic/ec/{{ version }}/{{ target_goos }}_{{ target_goarch }}/{{ x4_plugin }}{{ target_goexe }}        # [unix]\n    - if exist .terraform\\plugins\\registry.terraform.io\\elastic\\ec\\{{ version }}\\{{ target_goos }}_{{ target_goarch }}\\{{ x4_plugin }}{{ target_goexe }} exit 1  # [win]\nabout:\n  home: https://www.terraform.io\n  license: MPL-2.0\n  license_file: LICENSE\n  summary: Terraform provider for the Elastic Cloud API\n  doc_url: https://registry.terraform.io/providers/elastic/ec/latest/docs\n  dev_url: https://github.com/elastic/terraform-provider-ec\n\nextra:\n  recipe-maintainers:\n    - conda-forge/terraform\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/elastic/terraform-provider-ec/archive/v0.4.1.tar.gz",
 "version": "0.4.1"
}