{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/984454890.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "costa_variants",
 "hash_type": "sha256",
 "name": "costa_variants",
 "new_version": "2.1",
 "new_version_attempts": {
  "2.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "costa",
   "costa-scalapack"
  ]
 },
 "pinning_version": "2022.06.30.11.45.20",
 "raw_meta_yaml": "{% set name = \"costa\" %}\n{% set version = \"2.0\" %}\n\npackage:\n  name: {{ name }}_variants\n  version: {{ version }}\n\nsource:\n  url: https://github.com/eth-cscs/COSTA/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 0692a9c962282899894ccdbc7006216c835473a6999f1080c10bf94f23094521\n\nbuild:\n  number: 0\n  skip: True  # [win]\n\noutputs:\n  - name: costa\n    script: build-costa.sh\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake\n      host:\n        - {{ mpi }}\n        - libgomp      # [linux]\n        - llvm-openmp  # [osx]\n        - pkgconfig    # [osx]\n      run:\n        - {{ mpi }}\n    \n    test:\n      commands:\n        - test -f \"${PREFIX}/lib64/libcosta.a\"  # [linux]\n        - test -f \"${PREFIX}/lib/libcosta.a\"  # [osx]\n\n    about:\n      summary: Communication-Optimal Shuffle & Transpose Algorithm (COSTA)\n\n  - name: costa-scalapack\n    script: build-costa.sh\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake\n      host:\n        - {{ mpi }}\n        - scalapack\n        - libgomp      # [linux]\n        - llvm-openmp  # [osx]\n        - pkgconfig    # [osx]\n      run:\n        - {{ mpi }}\n        - scalapack\n    \n    test:\n      commands:\n        - test -f \"${PREFIX}/lib64/libcosta.a\"  # [linux]\n\n        - test -f \"${PREFIX}/lib64/libcosta_scalapack.a\"  # [linux]\n\n        - test -f \"${PREFIX}/lib64/libcosta_prefixed_scalapack.a\"  # [linux]\n\n        - test -f \"${PREFIX}/lib/libcosta.a\"  # [osx]\n        - test -f \"${PREFIX}/lib/libcosta_scalapack.a\"  # [osx]\n        - test -f \"${PREFIX}/lib/libcosta_prefixed_scalapack.a\"  # [osx]\n\n    about:\n      summary: COSTA with scalapack wrappers for drop-in replacement\n\n\nabout:\n  home: https://github.com/eth-cscs/COSTA\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Communication-Optimal Shuffle & Transpose Algorithm\n  description: |\n    COSTA is a communication-optimal, highly-optimised algorithm for data redistribution accross multiple processors, using MPI and OpenMP and offering the possibility to transpose and scale some or all data. It implements scalapack routines for matrix scale & transpose operations (sub(C) = alpha * sub(A)^T + beta * C, provided by pxtran(u)) and data redistribution (sub(C) = sub(A), provided by pxgemr2d) and outperforms other scalapack implementations by orders of magnitude in some cases. Unlike previous redistribution algorithms, COSTA will also propose the relabelling of MPI ranks that minimizes the data reshuffling cost, leaving to users to decide if they want to use it. This way, if the initial and the target data distributions differ up to a rank permutation, COSTA will perform no communication, whereas other algorithms will reshuffle all the data. Thanks to its optimizations, significant speedups will be achieved even if the proposed rank relabelling is not used.\n  doc_url: https://github.com/eth-cscs/COSTA\n  dev_url: https://github.com/eth-cscs/COSTA\n\nextra:\n  recipe-maintainers:\n    - kabicm\n    - ltalirz\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/eth-cscs/COSTA/archive/refs/tags/v2.0.tar.gz",
 "version": "2.0"
}