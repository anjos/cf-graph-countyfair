{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/6c1e778d-adaa-4acb-8f6f-fdbe1489bc8a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/426882627.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka14"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734c329f-54d4-46b9-adea-2d658c59a065.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp0171"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/449026399.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "ncurses62"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/453691873.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal31"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/456399791.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp100"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/473330390.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485684827.json"
   },
   "data": {
    "bot_rerun": 1602840208.9289517,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/504715035.json"
   },
   "data": {
    "bot_rerun": 1603301895.011969,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507239609.json"
   },
   "data": {
    "bot_rerun": 1603327970.9239395,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507741948.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/e5077835-03c0-48d3-8b7b-7c427f850f83.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/553766414.json"
   },
   "data": {
    "bot_rerun": 1613606766.809701,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/991f4253-b1ad-4f81-ac53-e840a4c355fd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/b4daf3ef-a651-4eb7-b58c-856bdb987bcb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp300"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/574755553.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/575048039.json"
   },
   "data": {
    "bot_rerun": 1617012559.8923514,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/577960830.json"
   },
   "data": {
    "bot_rerun": 1617012559.8925557,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/583960803.json"
   },
   "data": {
    "bot_rerun": 1617017678.219138,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/590097092.json"
   },
   "data": {
    "bot_rerun": 1617012559.8928735,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602606456.json"
   },
   "data": {
    "bot_rerun": 1620291287.1258543,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/0e056661-664a-4c49-9cdd-cd2c358ce3eb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0141"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602639636.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602675303.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602726068.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/621274776.json"
   },
   "data": {
    "bot_rerun": 1620291287.126354,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625289396.json"
   },
   "data": {
    "bot_rerun": 1620302744.5561347,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/631304207.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "tbb2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/df0ce987-0b81-474d-becd-56439a0e93e7.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/638390642.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "glog05"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/650787837.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal33"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/725b331d-fcee-4e63-aed0-c5b0d7465665.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp401"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/675057593.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0142"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/693044842.json"
   },
   "data": {
    "bot_rerun": 1629741153.416089,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/98c2bcec-eb05-406c-a319-97022d5a2748.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp500"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734298392.json"
   },
   "data": {
    "bot_rerun": 1632468512.43755,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka17"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/208209a6-ba46-47f3-b468-10f8954e898d.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0150"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/741999378.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka17"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/763807475.json"
   },
   "data": {
    "bot_rerun": 1635885325.1932833,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/769866768.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3100"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783865141.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp600"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/784627254.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal34"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/785074257.json"
   },
   "data": {
    "bot_rerun": 1638614516.0122485,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/792163694.json"
   },
   "data": {
    "bot_rerun": 1638614516.0125637,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/793133099.json"
   },
   "data": {
    "bot_rerun": 1638614516.0127468,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795081444.json"
   },
   "data": {
    "bot_rerun": 1638657594.3460891,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795089080.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795163800.json"
   },
   "data": {
    "bot_rerun": 1638664759.0497098,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795191872.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/827198362.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3102"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/849291119.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp700"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/867427451.json"
   },
   "data": {
    "bot_rerun": 1646183568.075747,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.10.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/869366272.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.10.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/896067811.json"
   },
   "data": {
    "bot_rerun": 1649088327.974092,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0160"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/899277463.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0160"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/900744549.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "glog06"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/914693638.json"
   },
   "data": {
    "bot_rerun": 1650573169.5475063,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/956279901.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal35"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/961029832.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3103"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/f2cecee9-3cc5-4456-abd5-2b4a7d91f743.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "openssl3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/e9ceb1fa-087c-4ad4-ae84-d80e92e767b4.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/2225d975-443d-438a-873e-9db58dd46d05.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp800"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/985592696.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/993625442.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "fmt9"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/995027805.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1010209660.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1023363640.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp900"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "omniscidb",
 "hash_type": "sha256",
 "name": "heavydb-ext",
 "new_version": "6.1.1",
 "new_version_attempts": {
  "5.10.0": 1,
  "5.10.1": 4,
  "5.10.2": 48,
  "5.3.0": 55,
  "5.3.1": 475,
  "5.3.2": 611,
  "5.4.0": 30,
  "5.4.1": 60,
  "5.5.0": 15,
  "5.5.1": 24,
  "5.5.2": 1,
  "5.6.0": 1,
  "5.7.0": 5,
  "5.7.1": 4,
  "5.8.0": 6,
  "5.8.1": 3,
  "5.9.0": 7,
  "6.0.0": 1,
  "6.1.0": 1,
  "6.1.1": 1
 },
 "new_version_errors": {
  "5.10.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.10.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.10.2": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.2' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.7.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.7.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.7.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.7.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.8.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.8.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.8.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.8.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.9.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.9.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "heavydb",
   "heavydb-common",
   "heavydbe",
   "pyheavydb",
   "pyheavydbe"
  ]
 },
 "pinning_version": "2022.08.11.00.12.17",
 "pre_pr_migrator_attempts": {
  "librdkafka16": 1,
  "libthrift0141": 1,
  "windows_cuda": 1
 },
 "pre_pr_migrator_status": {
  "librdkafka16": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/640172853\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h001c72f_19_cpu requires libthrift >=0.13.0,<0.14.0a0, but none of the providers can be installed\\n']",
  "libthrift0141": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/696948688\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h0c458ad_34_cpu requires zstd >=1.4.9,<1.5.0a0, but none of the providers can be installed\\n']",
  "windows_cuda": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1042, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 222, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 216, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set version = \"6.0.0\" %}  # PEP 386\n{% set source_version = version %}\n{% set base_version = version %}\n{% set number = \"2\" %}\n{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '11.0' %}\n{% set build_ext_version = \"1.0.0\" %}\n{% set build_ext = \"cuda\" if cuda_enabled else \"cpu\" %}\n{% set build_string = \"h{}_{}\".format(PKG_HASH, number) %}\n{% set build_string_ext = \"{}_{}\".format(build_string, build_ext) %}\n{% set py_build_string_ext = \"py{}{}_{}\".format(CONDA_PY, build_string, build_ext) %}\n{% set py_build_string = \"py{}{}\".format(CONDA_PY, build_string) %}\n{% set install_base = \"opt/heavyai\" %}\n{% set arrow_version = \"7.*\" %}\n{% set arrow_proc_version = \"3.*\" %}\n{% set pythrift_version = \"0.16.*\" %}\n{% set thrift_version = \"0.16.*\" %}\n# heavydb 6.0.0 is not LLVM 12 ready\n{% set llvm_version = \"11\" %}\n\npackage:\n  name: heavydb-ext\n  version: {{ version }}\n\nsource:\n  url: https://github.com/heavyai/heavydb/archive/v{{ source_version }}.tar.gz\n  sha256: a36d91227135e9ec8641b5f46e80927aaafce117f3446933dd7f392c9659996e\n  patches:\n    - 0003-Fix-HeavyDBE-build.patch\n    - 0004-Fix-Windows-build.patch  # [win]\n\nbuild:\n  number: {{ number }}\n  skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\")]\n\noutputs:\n\n  - name: heavydb-common\n    version: {{ version }}\n    script: build-heavydb.sh  # [linux64]\n    script: build-heavydb-common.bat  # [win]\n    build:\n      string: {{ build_string }}\n      # cpu-only heavydb-common for cuda is required only for\n      # building cuda-enabled heavydb\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\")]\n      skip: true  # [osx]\n      skip: true  # [win and cuda_compiler_version != \"None\"]\n      run_exports:\n        - {{ pin_subpackage('heavydb-common',  max_pin='x.x.x') }}\n      ignore_run_exports:\n        - arrow-cpp {{ arrow_version }}\n        - blosc\n        - double-conversion\n        - fmt\n        - geos\n        - glog\n        - libarchive\n        - libgdal\n        - libllvm{{ llvm_version }}\n        - libpng\n        - librdkafka\n        - libstdcxx-ng\n        - libthrift\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably...\n        - {{ compiler('c') }}\n        # go required for ThirdParty/generate_cert\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - ninja\n        - maven\n      host:\n        # heavydb-common does not depend on build_ext, arrow-cpp\n        # (and other dependencies) is required just for the presence\n        # so that one could run cmake for generating *.bc, and other\n        # common data files.\n        - arrow-cpp ={{ arrow_version }}=*cpu\n        - bisonpp  # [unix]\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex  # [unix]\n        - fmt\n        - geos\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libevent  # [win]\n        - libgdal\n        - libpng\n        - librdkafka\n        - tbb  # [win]\n        - tbb-devel  # [win]\n        - thrift-cpp {{ thrift_version }}\n        - winflexbison  # [win]\n    test:\n      commands:\n        # Test installation\n        # doc\n        - test -f ${PREFIX}/share/doc/heavyai/LICENSE.md  # [unix]\n        - if not exist %PREFIX%\\share\\doc\\heavyai\\LICENSE.md exit 1  # [win]\n        # data\n        - test -d ${PREFIX}/{{ install_base }}/ThirdParty/gdal-data  # [unix]\n        - if not exist %PREFIX%\\ThirdParty\\gdal-data exit 1  # [win]\n        # thrift\n        - test -f ${PREFIX}/{{ install_base }}/completion_hints.thrift  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/heavy.thrift  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/common.thrift  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/serialized_result_set.thrift  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/extension_functions.thrift  # [unix]\n        - if not exist %PREFIX%\\completion_hints.thrift exit 1  # [win]\n        - if not exist %PREFIX%\\heavy.thrift exit 1  # [win]\n        - if not exist %PREFIX%\\common.thrift exit 1  # [win]\n        - if not exist %PREFIX%\\QueryEngine/serialized_result_set.thrift exit 1  # [win]\n        - if not exist %PREFIX%\\QueryEngine/extension_functions.thrift exit 1  # [win]\n        # includes\n        - test -f ${PREFIX}/{{ install_base }}/Shared/funcannotations.h  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/Shared/InlineNullValues.h  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/Logger/Logger.h  # [unix]\n        - if not exist %PREFIX%\\Shared\\funcannotations.h exit 1  # [win]\n        - if not exist %PREFIX%\\Shared\\InlineNullValues.h exit 1  # [win]\n        - if not exist %PREFIX%\\Logger\\Logger.h exit 1  # [win]\n        # QE\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/heavydbTypes.h  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/GeosRuntime.bc  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/ExtensionFunctions.ast  # [unix]\n        - if not exist %PREFIX%\\QueryEngine\\heavydbTypes.h exit 1  # [win]\n        - if not exist %PREFIX%\\QueryEngine\\RuntimeFunctions.bc exit 1  # [win]\n        - if not exist %PREFIX%\\QueryEngine\\GeosRuntime.bc exit 1  # [win]\n        - if not exist %PREFIX%\\QueryEngine\\ExtensionFunctions.ast exit 1  # [win]\n        # jar\n        - test -f ${PREFIX}/{{ install_base }}/bin/heavyai-utility-{{ base_version }}.jar  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/heavyai-jdbc-{{ base_version }}.jar  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar  # [unix]\n        - if not exist %PREFIX%\\bin\\heavyai-utility-{{ base_version }}.jar exit 1  # [win]\n        - if not exist %PREFIX%\\bin\\heavyai-jdbc-{{ base_version }}.jar exit 1  # [win]\n        - if not exist %PREFIX%\\bin\\calcite-1.0-SNAPSHOT-jar-with-dependencies.jar exit 1  # [win]\n        # Unspecified\n        # startheavy and insert_sample_data are bash scripts\n        - test -f ${PREFIX}/{{ install_base }}/bin/startheavy  # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/heavydb_insert_sample_data  # [unix]\n        #\n        - test -f ${PREFIX}/{{ install_base }}/bin/generate_cert  # [unix]\n        - if not exist %PREFIX%\\bin\\generate_cert exit 1  # [win]\n\n  - name: heavydb\n    version: {{ version }}\n    script: build-heavydb.sh   # [linux64]\n    script: build-heavydb.bat  # [win]\n    build:\n      string: {{ build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\")]\n      skip: true  # [osx]\n      skip: true  # [win and cuda_compiler_version != \"None\"]\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - fmt\n        - gflags\n        - glog\n        - libclang-cpp\n        - libkml\n        - ncurses\n        - openldap\n        - zlib\n      run_exports:\n        - {{ pin_subpackage('heavydb',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp  # [unix]\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex  # [unix]\n        - fmt\n        - gflags\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libevent  # [win]\n        - libgdal\n        - libkml\n        - libpng\n        - librdkafka\n        - ncurses   # [unix]\n        - openldap  # [unix]\n        # Workaround https://github.com/mamba-org/boa/issues/119 :\n        - openssl 1.1.1*\n        - snappy\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n        - winflexbison  # [win]\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - boost-cpp\n        - bzip2\n        # omnscidb Load-time UDF support calls clang++\n        - gxx_{{ target_platform }}  # [not win]\n        - libclang-cpp {{ llvm_version }}\n        - ncurses  # [not win]\n        - openjdk 8.*\n        - xz\n        - zlib\n        - {{ pin_subpackage('heavydb-common',  max_pin='x.x.x') }}\n      run_constrained:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, \"None\")]\n\n    test:\n      commands:\n        # binary\n        - test -f ${PREFIX}/{{ install_base }}/bin/heavydb         # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/initheavy       # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/heavysql        # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/KafkaImporter   # [unix]\n        - test -f ${PREFIX}/{{ install_base }}/bin/StreamImporter  # [unix]\n        - if not exist %PREFIX%\\bin\\heavydb.exe exit 1             # [win]\n        - if not exist %PREFIX%\\bin\\initheavy.exe exit 1           # [win]\n        - if not exist %PREFIX%\\bin\\heavysql.exe exit 1            # [win]\n\n        # Verify the activation scripts are in-place.\n        {% for state in [\"activate\", \"deactivate\"] %}\n        - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"  # [unix]\n        {% endfor %}\n        # Try using the activation scripts.\n        - |\n          if [[ -x \"$(command -v heavysql)\" ]]                                                 # [unix]\n          then                                                                                # [unix]\n            echo \"Found heavysql in PATH\"                                                     # [unix]\n          else                                                                                # [unix]\n            echo \"heavysql not found in PATH(=$PATH)\" && exit 1                               # [unix]\n          fi                                                                                  # [unix]\n          source ${PREFIX}/etc/conda/deactivate.d/{{ PKG_NAME }}_deactivate.sh                # [unix]\n          if [[ -x \"$(command -v heavysql)\" ]]                                                 # [unix]\n          then                                                                                # [unix]\n            echo \"Unexpectedly found heavysql in PATH(=$PATH) after deactivation\"  && exit 1  # [unix]\n          else                                                                                # [unix]\n            echo \"heavysql not in PATH after deactivation\"                                    # [unix]\n          fi                                                                                  # [unix]\n          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh                    # [unix]\n        # Test installation\n        - heavysql -v              # [unix]\n        - which initheavy    # [unix]\n        - which heavydb    # [unix]\n        - heavysql.exe -v          # [win]\n        - |\n          if [ -x \"$(command -v nvidia-smi)\" ]; then  # [unix and cuda_compiler_version not in (undefined, \"None\")]\n            mkdir data && initheavy data              # [unix and cuda_compiler_version not in (undefined, \"None\")]\n            heavydb --version                         # [unix and cuda_compiler_version not in (undefined, \"None\")]\n            rm -rf data                               # [unix and cuda_compiler_version not in (undefined, \"None\")]\n          fi                                          # [unix and cuda_compiler_version not in (undefined, \"None\")]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/cuda_mapd_rt.fatbin  # [unix and cuda_compiler_version not in (undefined, \"None\")]\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/CudaTableFunctions.a  # [unix and cuda_compiler_version not in (undefined, \"None\")]\n        # these are provided by heavydb-common package:\n        - which heavydb_insert_sample_data  # [unix]\n        - which startheavy  # [unix]\n\n    about:\n      home: https://heavy.ai\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The HeavyDB database\n\n      description: |\n        HeavyDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n\n        This recipe provides both CUDA enabled and CUDA disabled heavydb\n        packages.\n      doc_url: https://docs.heavy.ai/\n      dev_url: https://github.com/heavyai/heavydb\n\n  - name: pyheavydb\n    version: {{ version }}\n    build:\n      skip: true  # [cuda_compiler_version in (\"11.0\",)]\n      noarch: python\n      script: python -m pip install -vv --no-deps python/.\n      run_exports:\n        - {{ pin_subpackage('pyheavydb',  max_pin='x.x.x') }}\n    requirements:\n      host:\n        - pip\n        - python >=3.7\n        - flit-core\n      run:\n        - python >=3.7\n        - importlib_metadata\n        - packaging\n        - numpy >=1.16\n        - thrift {{ pythrift_version }}\n        - sqlalchemy >=1.3\n        - requests >=2.23.0\n\n    about:\n      home: https://github.com/heavyai/heavydb\n      license: Apache-2.0\n      license_family: Apache\n      license_file: ./python/LICENSE.md\n      summary: A python DB API 2 compatible client for HeavyDB (formerly OmniSci and MapD).\n      description: |\n        A python DB API 2 compatible client HeavyDB (formerly OmniSci and MapD).\n      doc_url: https://pyheavydb.readthedocs.io\n      dev_url: https://github.com/heavyai/heavydb\n\n    test:\n      imports:\n        - heavydb\n      commands:\n        - pip check\n      requires:\n        - pip\n\n  - name: heavydbe\n    version: {{ version }}\n    script: build-heavydb.sh\n    build:\n      string: {{ build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      skip: true\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - fmt\n        - glog\n        - libclang-cpp\n        - librdkafka\n        - ncurses\n        - zlib\n      rpaths:\n        - lib/\n        # fixes \"not found\" in `ldd $PREFIX/lib/libDBEngine.so` output\n        - {{ install_base }}/lib\n      run_exports:\n        - {{ pin_subpackage('heavydbe',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex\n        - fmt\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libpng\n        - librdkafka\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - boost-cpp\n        - bzip2\n        # omnscidb Load-time UDF support calls clang++\n        - gxx_{{ target_platform }}\n        - {{ pin_compatible('libclang-cpp', max_pin='x.x') }}\n        - ncurses\n        - openjdk 8.*\n        - xz\n        - zlib\n        - {{ pin_subpackage('heavydb-common',  max_pin='x.x.x') }}\n      run_constrained:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, \"None\")]\n\n    test:\n      commands:\n        # Test installation\n        - test -f ${PREFIX}/lib/libDBEngine.so\n        # Verify the activation scripts are in-place.\n        {% for state in [\"activate\", \"deactivate\"] %}\n        - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"\n        {% endfor %}\n        - |\n          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh\n          test -n \"${HEAVYAI_ROOT_PATH+x}\"\n          ldd ${PREFIX}/lib/libDBEngine.so\n\n    about:\n      home: https://heavy.ai\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The HeavyDB database\n\n      description: |\n        HeavyDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n      doc_url: https://docs.heavy.ai/\n      dev_url: https://github.com/heavyai/heavydb\n\n  - name: pyheavydbe\n    version: {{ version }}\n    script: build-heavydb.sh\n    build:\n      string: {{ py_build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      skip: true  # temporarily skipping pyheavydbe build\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - arrow-cpp {{ arrow_version }}\n        - blosc\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - double-conversion\n        - fmt\n        - glog\n        - libarchive\n        - libgdal\n        - libllvm{{ llvm_version }}\n        - libpng\n        - librdkafka\n        - libthrift {{ thrift_version }}\n        - pyarrow {{ arrow_version }}\n        - python\n        - tbb\n      run_exports:\n        - {{ pin_subpackage('pyheavydbe',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - cython\n        - double-conversion\n        - flex\n        - fmt\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libpng\n        - librdkafka\n        - numpy\n        - pip\n        - pyarrow ={{ arrow_version }}=*{{ build_ext }}\n        - python\n        - pytest\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n        - {{ pin_subpackage('heavydbe', exact=True) }}\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - pyarrow ={{ arrow_version }}=*{{ build_ext }}\n        - python\n        - tbb4py\n        - {{ pin_subpackage('heavydbe', exact=True) }}\n    test:\n      requires:\n        - pytest\n        - numpy\n        - pandas\n      imports:\n        - heavydbe\n      source_files:\n        - Embedded/test/test_exceptions.py\n      commands:\n        - pytest -sv Embedded/test/test_exceptions.py\n\n    about:\n      home: https://heavy.ai\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The HeavyDB database\n\n      description: |\n        HeavyDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n      doc_url: https://docs.heavy.ai/\n      dev_url: https://github.com/heavyai/heavydb\n\nabout:\n  home: https://heavy.ai\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE.md\n  summary: The HeavyDB database\n\n  description: |\n    HeavyDB is an in-memory, column store, SQL relational database\n    that was designed from the ground up to run on GPUs.\n\n    This recipe provides the following packages:\n      heavydb-common CUDA-enabled heavydb, cpu and cuda builds\n      pyheavydb Python connector\n      heavydbe embedding library, cpu and cuda builds\n      pyheavydbe-embedded Python extension module\n  doc_url: https://docs.heavy.ai/\n  dev_url: https://github.com/heavyai/heavydb\n\nextra:\n  recipe-maintainers:\n    - guilhermeleobas\n    - pearu\n    - tupui\n    - andrewseidl\n    - jclay\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://github.com/heavyai/heavydb/archive/v6.0.0.tar.gz",
 "version": "6.0.0"
}