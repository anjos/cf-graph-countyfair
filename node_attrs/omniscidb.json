{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/6c1e778d-adaa-4acb-8f6f-fdbe1489bc8a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/426882627.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka14"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734c329f-54d4-46b9-adea-2d658c59a065.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp0171"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/449026399.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "ncurses62"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/453691873.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal31"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/456399791.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp100"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/473330390.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485684827.json"
   },
   "data": {
    "bot_rerun": 1602840208.9289517,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/504715035.json"
   },
   "data": {
    "bot_rerun": 1603301895.011969,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507239609.json"
   },
   "data": {
    "bot_rerun": 1603327970.9239395,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507741948.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/e5077835-03c0-48d3-8b7b-7c427f850f83.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/553766414.json"
   },
   "data": {
    "bot_rerun": 1613606766.809701,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/991f4253-b1ad-4f81-ac53-e840a4c355fd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/b4daf3ef-a651-4eb7-b58c-856bdb987bcb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp300"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/574755553.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/575048039.json"
   },
   "data": {
    "bot_rerun": 1617012559.8923514,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/577960830.json"
   },
   "data": {
    "bot_rerun": 1617012559.8925557,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/583960803.json"
   },
   "data": {
    "bot_rerun": 1617017678.219138,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/590097092.json"
   },
   "data": {
    "bot_rerun": 1617012559.8928735,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602606456.json"
   },
   "data": {
    "bot_rerun": 1620291287.1258543,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/0e056661-664a-4c49-9cdd-cd2c358ce3eb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0141"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602639636.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602675303.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602726068.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/621274776.json"
   },
   "data": {
    "bot_rerun": 1620291287.126354,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625289396.json"
   },
   "data": {
    "bot_rerun": 1620302744.5561347,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/631304207.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "tbb2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/df0ce987-0b81-474d-becd-56439a0e93e7.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/638390642.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "glog05"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/650787837.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal33"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/725b331d-fcee-4e63-aed0-c5b0d7465665.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp401"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/675057593.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0142"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/693044842.json"
   },
   "data": {
    "bot_rerun": 1629741153.416089,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/98c2bcec-eb05-406c-a319-97022d5a2748.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp500"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734298392.json"
   },
   "data": {
    "bot_rerun": 1632468512.43755,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka17"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/208209a6-ba46-47f3-b468-10f8954e898d.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0150"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/741999378.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka17"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/763807475.json"
   },
   "data": {
    "bot_rerun": 1635885325.1932833,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/769866768.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3100"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783865141.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp600"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/784627254.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal34"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/785074257.json"
   },
   "data": {
    "bot_rerun": 1638614516.0122485,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/792163694.json"
   },
   "data": {
    "bot_rerun": 1638614516.0125637,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/793133099.json"
   },
   "data": {
    "bot_rerun": 1638614516.0127468,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795081444.json"
   },
   "data": {
    "bot_rerun": 1638657594.3460891,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795089080.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795163800.json"
   },
   "data": {
    "bot_rerun": 1638664759.0497098,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/795191872.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/827198362.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "geos3102"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/849291119.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp700"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "omniscidb",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides the following packages:\n  omniscidb-commong\n  CUDA-enabled omniscidb, cpu and cuda builds\n  pyomniscdb\n  omniscidb embedding library, cpu and cuda builds\n  omniscidb-embedded Python extension module\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "geos",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libstdcxx-ng",
      "libthrift"
     ],
     "run_exports": [
      "omniscidb-common"
     ],
     "string": "h1234567_0"
    },
    "name": "omniscidb-common",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "geos",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "thrift-cpp 0.15.*"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/share/doc/omnisci/LICENSE.md",
      "test -d ${PREFIX}/opt/omnisci/ThirdParty/gdal-data",
      "test -f ${PREFIX}/opt/omnisci/completion_hints.thrift",
      "test -f ${PREFIX}/opt/omnisci/omnisci.thrift",
      "test -f ${PREFIX}/opt/omnisci/common.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/serialized_result_set.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/extension_functions.thrift",
      "test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h",
      "test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h",
      "test -f ${PREFIX}/include/omnisci/Logger/Logger.h",
      "test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/ExtensionFunctions.ast",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-utility-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-jdbc-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/startomnisci",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_insert_sample_data",
      "test -f ${PREFIX}/opt/omnisci/bin/generate_cert"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit",
      "fmt",
      "gflags",
      "glog",
      "libclang-cpp",
      "libkml",
      "ncurses",
      "openldap",
      "zlib"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "run_exports": [
      "omniscidb"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "gflags",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl 1.1.1*",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp 11",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cuda",
      "cudatoolkit >=11.0"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_server",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_initdb",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisql",
      "test -f ${PREFIX}/opt/omnisci/bin/KafkaImporter",
      "test -f ${PREFIX}/opt/omnisci/bin/StreamImporter",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "if [ -x \"$(command -v nvidia-smi)\" ]; then\n  mkdir data && omnisci_initdb data\n  omnisci_server --version\n  rm -rf data\nfi\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "noarch": "python",
     "run_exports": [
      "pyomniscidb"
     ],
     "skip": true,
     "string": "py39h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.15.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit",
      "fmt",
      "glog",
      "libclang-cpp",
      "librdkafka",
      "ncurses",
      "zlib"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "rpaths": [
      "lib/",
      "opt/omnisci/lib"
     ],
     "run_exports": [
      "omniscidbe"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cuda",
      "cudatoolkit >=11.0"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/lib/libDBEngine.so",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "source ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\ntest -n \"${OMNISCI_ROOT_PATH+x}\"\nldd ${PREFIX}/lib/libDBEngine.so\n"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "cudatoolkit",
      "double-conversion",
      "fmt",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libthrift 0.15.*",
      "pyarrow 6.*",
      "python",
      "tbb"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "run_exports": [
      "pyomniscidbe"
     ],
     "string": "py39h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "pyomniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "cython",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "numpy",
      "pyarrow =6.*=*cuda",
      "python",
      "pytest",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*",
      "omniscidbe"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "pyarrow =6.*=*cuda",
      "python",
      "tbb4py",
      "omniscidbe"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "pytest -sv Embedded/test/test_exceptions.py"
     ],
     "imports": [
      "omniscidbe"
     ],
     "requires": [
      "pytest",
      "numpy",
      "pandas"
     ],
     "source_files": [
      "Embedded/test/test_exceptions.py"
     ]
    },
    "version": "5.10.1"
   },
   {
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "geos",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libstdcxx-ng",
      "libthrift"
     ],
     "run_exports": [
      "omniscidb-common"
     ],
     "string": "h1234567_0"
    },
    "name": "omniscidb-common",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "geos",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "thrift-cpp 0.15.*"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/share/doc/omnisci/LICENSE.md",
      "test -d ${PREFIX}/opt/omnisci/ThirdParty/gdal-data",
      "test -f ${PREFIX}/opt/omnisci/completion_hints.thrift",
      "test -f ${PREFIX}/opt/omnisci/omnisci.thrift",
      "test -f ${PREFIX}/opt/omnisci/common.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/serialized_result_set.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/extension_functions.thrift",
      "test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h",
      "test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h",
      "test -f ${PREFIX}/include/omnisci/Logger/Logger.h",
      "test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/ExtensionFunctions.ast",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-utility-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-jdbc-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/startomnisci",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_insert_sample_data",
      "test -f ${PREFIX}/opt/omnisci/bin/generate_cert"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "fmt",
      "gflags",
      "glog",
      "libclang-cpp",
      "libkml",
      "ncurses",
      "openldap",
      "zlib"
     ],
     "missing_dso_whitelist": null,
     "run_exports": [
      "omniscidb"
     ],
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "gflags",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl 1.1.1*",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp 11",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_server",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_initdb",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisql",
      "test -f ${PREFIX}/opt/omnisci/bin/KafkaImporter",
      "test -f ${PREFIX}/opt/omnisci/bin/StreamImporter",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "noarch": "python",
     "run_exports": [
      "pyomniscidb"
     ],
     "string": "py39h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.15.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "fmt",
      "glog",
      "libclang-cpp",
      "librdkafka",
      "ncurses",
      "zlib"
     ],
     "missing_dso_whitelist": null,
     "rpaths": [
      "lib/",
      "opt/omnisci/lib"
     ],
     "run_exports": [
      "omniscidbe"
     ],
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/lib/libDBEngine.so",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "source ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\ntest -n \"${OMNISCI_ROOT_PATH+x}\"\nldd ${PREFIX}/lib/libDBEngine.so\n"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libthrift 0.15.*",
      "pyarrow 6.*",
      "python",
      "tbb"
     ],
     "missing_dso_whitelist": null,
     "run_exports": [
      "pyomniscidbe"
     ],
     "string": "py39h1234567_0_cpu",
     "track_features": null
    },
    "name": "pyomniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "cython",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "numpy",
      "pyarrow =6.*=*cpu",
      "python",
      "pytest",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*",
      "omniscidbe"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "pyarrow =6.*=*cpu",
      "python",
      "tbb4py",
      "omniscidbe"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "pytest -sv Embedded/test/test_exceptions.py"
     ],
     "imports": [
      "omniscidbe"
     ],
     "requires": [
      "pytest",
      "numpy",
      "pandas"
     ],
     "source_files": [
      "Embedded/test/test_exceptions.py"
     ]
    },
    "version": "5.10.1"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.10.1"
  },
  "source": {
   "patches": [
    "0001-Fix-DBE-build.patch",
    "0001-Fix-DBE-build.patch"
   ],
   "sha256": "73340011e93cc76f644e60a45e0205bba7684c969af43bf675026675029387c6",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.10.1.tar.gz"
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "cython",
    "double-conversion",
    "flex",
    "fmt",
    "geos",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "numpy",
    "omniscidbe",
    "openldap",
    "openssl",
    "packaging",
    "pyarrow",
    "pytest",
    "python",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "arrow-cpp-proc",
    "boost-cpp",
    "bzip2",
    "gxx_linux-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "omniscidb-common",
    "omniscidbe",
    "openjdk",
    "packaging",
    "pyarrow",
    "python",
    "requests",
    "setuptools",
    "sqlalchemy",
    "tbb4py",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides the following packages:\n  omniscidb-commong\n  CUDA-enabled omniscidb, cpu and cuda builds\n  pyomniscdb\n  omniscidb embedding library, cpu and cuda builds\n  omniscidb-embedded Python extension module\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "geos",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libstdcxx-ng",
      "libthrift"
     ],
     "run_exports": [
      "omniscidb-common"
     ],
     "string": "h1234567_0"
    },
    "name": "omniscidb-common",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "geos",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "thrift-cpp 0.15.*"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/share/doc/omnisci/LICENSE.md",
      "test -d ${PREFIX}/opt/omnisci/ThirdParty/gdal-data",
      "test -f ${PREFIX}/opt/omnisci/completion_hints.thrift",
      "test -f ${PREFIX}/opt/omnisci/omnisci.thrift",
      "test -f ${PREFIX}/opt/omnisci/common.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/serialized_result_set.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/extension_functions.thrift",
      "test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h",
      "test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h",
      "test -f ${PREFIX}/include/omnisci/Logger/Logger.h",
      "test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/ExtensionFunctions.ast",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-utility-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-jdbc-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/startomnisci",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_insert_sample_data",
      "test -f ${PREFIX}/opt/omnisci/bin/generate_cert"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit",
      "fmt",
      "gflags",
      "glog",
      "libclang-cpp",
      "libkml",
      "ncurses",
      "openldap",
      "zlib"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "run_exports": [
      "omniscidb"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "gflags",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl 1.1.1*",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp 11",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cuda",
      "cudatoolkit >=11.0"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_server",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_initdb",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisql",
      "test -f ${PREFIX}/opt/omnisci/bin/KafkaImporter",
      "test -f ${PREFIX}/opt/omnisci/bin/StreamImporter",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "if [ -x \"$(command -v nvidia-smi)\" ]; then\n  mkdir data && omnisci_initdb data\n  omnisci_server --version\n  rm -rf data\nfi\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "noarch": "python",
     "run_exports": [
      "pyomniscidb"
     ],
     "skip": true,
     "string": "py39h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.15.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit",
      "fmt",
      "glog",
      "libclang-cpp",
      "librdkafka",
      "ncurses",
      "zlib"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "rpaths": [
      "lib/",
      "opt/omnisci/lib"
     ],
     "run_exports": [
      "omniscidbe"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cuda",
      "cudatoolkit >=11.0"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/lib/libDBEngine.so",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "source ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\ntest -n \"${OMNISCI_ROOT_PATH+x}\"\nldd ${PREFIX}/lib/libDBEngine.so\n"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "cudatoolkit",
      "double-conversion",
      "fmt",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libthrift 0.15.*",
      "pyarrow 6.*",
      "python",
      "tbb"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "run_exports": [
      "pyomniscidbe"
     ],
     "string": "py39h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "pyomniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "cython",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "numpy",
      "pyarrow =6.*=*cuda",
      "python",
      "pytest",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*",
      "omniscidbe"
     ],
     "run": [
      "arrow-cpp-proc 3.* cuda",
      "pyarrow =6.*=*cuda",
      "python",
      "tbb4py",
      "omniscidbe"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "pytest -sv Embedded/test/test_exceptions.py"
     ],
     "imports": [
      "omniscidbe"
     ],
     "requires": [
      "pytest",
      "numpy",
      "pandas"
     ],
     "source_files": [
      "Embedded/test/test_exceptions.py"
     ]
    },
    "version": "5.10.1"
   },
   {
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "geos",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libstdcxx-ng",
      "libthrift"
     ],
     "run_exports": [
      "omniscidb-common"
     ],
     "string": "h1234567_0"
    },
    "name": "omniscidb-common",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "geos",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "thrift-cpp 0.15.*"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/share/doc/omnisci/LICENSE.md",
      "test -d ${PREFIX}/opt/omnisci/ThirdParty/gdal-data",
      "test -f ${PREFIX}/opt/omnisci/completion_hints.thrift",
      "test -f ${PREFIX}/opt/omnisci/omnisci.thrift",
      "test -f ${PREFIX}/opt/omnisci/common.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/serialized_result_set.thrift",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/extension_functions.thrift",
      "test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h",
      "test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h",
      "test -f ${PREFIX}/include/omnisci/Logger/Logger.h",
      "test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/RuntimeFunctions.bc",
      "test -f ${PREFIX}/opt/omnisci/QueryEngine/ExtensionFunctions.ast",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-utility-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci-jdbc-5.10.1.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar",
      "test -f ${PREFIX}/opt/omnisci/bin/startomnisci",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_insert_sample_data",
      "test -f ${PREFIX}/opt/omnisci/bin/generate_cert"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "fmt",
      "gflags",
      "glog",
      "libclang-cpp",
      "libkml",
      "ncurses",
      "openldap",
      "zlib"
     ],
     "missing_dso_whitelist": null,
     "run_exports": [
      "omniscidb"
     ],
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "gflags",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl 1.1.1*",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp 11",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_server",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisci_initdb",
      "test -f ${PREFIX}/opt/omnisci/bin/omnisql",
      "test -f ${PREFIX}/opt/omnisci/bin/KafkaImporter",
      "test -f ${PREFIX}/opt/omnisci/bin/StreamImporter",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "noarch": "python",
     "run_exports": [
      "pyomniscidb"
     ],
     "string": "py39h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.15.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "fmt",
      "glog",
      "libclang-cpp",
      "librdkafka",
      "ncurses",
      "zlib"
     ],
     "missing_dso_whitelist": null,
     "rpaths": [
      "lib/",
      "opt/omnisci/lib"
     ],
     "run_exports": [
      "omniscidbe"
     ],
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp",
      "ncurses",
      "openjdk 8.*",
      "xz",
      "zlib",
      "omniscidb-common"
     ],
     "run_constrained": [
      "arrow-cpp-proc 3.* cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f ${PREFIX}/lib/libDBEngine.so",
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "source ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\ntest -n \"${OMNISCI_ROOT_PATH+x}\"\nldd ${PREFIX}/lib/libDBEngine.so\n"
     ]
    },
    "version": "5.10.1"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "arrow-cpp 6.*",
      "blosc",
      "double-conversion",
      "fmt",
      "glog",
      "libarchive",
      "libgdal",
      "libllvm11",
      "libpng",
      "librdkafka",
      "libthrift 0.15.*",
      "pyarrow 6.*",
      "python",
      "tbb"
     ],
     "missing_dso_whitelist": null,
     "run_exports": [
      "pyomniscidbe"
     ],
     "string": "py39h1234567_0_cpu",
     "track_features": null
    },
    "name": "pyomniscidbe",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev 11",
      "clangxx 11",
      "cmake",
      "llvmdev 11",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =6.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev 11",
      "cython",
      "double-conversion",
      "flex",
      "fmt",
      "glog",
      "llvmdev 11",
      "llvm 11",
      "libarchive",
      "libgdal",
      "libpng",
      "librdkafka",
      "numpy",
      "pyarrow =6.*=*cpu",
      "python",
      "pytest",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.15.*",
      "omniscidbe"
     ],
     "run": [
      "arrow-cpp-proc 3.* cpu",
      "pyarrow =6.*=*cpu",
      "python",
      "tbb4py",
      "omniscidbe"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "pytest -sv Embedded/test/test_exceptions.py"
     ],
     "imports": [
      "omniscidbe"
     ],
     "requires": [
      "pytest",
      "numpy",
      "pandas"
     ],
     "source_files": [
      "Embedded/test/test_exceptions.py"
     ]
    },
    "version": "5.10.1"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.10.1"
  },
  "source": {
   "patches": [
    "0001-Fix-DBE-build.patch",
    "0001-Fix-DBE-build.patch"
   ],
   "sha256": "73340011e93cc76f644e60a45e0205bba7684c969af43bf675026675029387c6",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.10.1.tar.gz"
  }
 },
 "name": "omniscidb-ext",
 "new_version": "5.10.2",
 "new_version_attempts": {
  "5.10.0": 1,
  "5.10.1": 4,
  "5.10.2": 13,
  "5.3.0": 55,
  "5.3.1": 475,
  "5.3.2": 611,
  "5.4.0": 30,
  "5.4.1": 60,
  "5.5.0": 15,
  "5.5.1": 24,
  "5.5.2": 1,
  "5.6.0": 1,
  "5.7.0": 5,
  "5.7.1": 4,
  "5.8.0": 6,
  "5.8.1": 3,
  "5.9.0": 7
 },
 "new_version_errors": {
  "5.10.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.10.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.10.2": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.10.2' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.7.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.7.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.7.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.7.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.8.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.8.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.8.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.8.1' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n",
  "5.9.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5.9.0' to make sure they exist!\n\nWe also found the following errors:\n\n - recipe did not appear to change even though the bot said it should have\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "omniscidb",
   "omniscidb-common",
   "omniscidbe",
   "pyomniscidb",
   "pyomniscidbe"
  ]
 },
 "pinning_version": "2022.02.12.08.56.54",
 "pre_pr_migrator_attempts": {
  "librdkafka16": 1,
  "libthrift0141": 1,
  "windows_cuda": 1
 },
 "pre_pr_migrator_status": {
  "librdkafka16": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/640172853\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h001c72f_19_cpu requires libthrift >=0.13.0,<0.14.0a0, but none of the providers can be installed\\n']",
  "libthrift0141": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/696948688\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h0c458ad_34_cpu requires zstd >=1.4.9,<1.5.0a0, but none of the providers can be installed\\n']",
  "windows_cuda": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1042, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 222, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 216, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set version = \"5.10.1\" %}  # PEP 386\n{% set source_version = \"5.10.1\" %}\n{% set base_version = \"5.10.1\" %}\n{% set number = \"0\" %}\n{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '11.0' %}\n{% set build_ext_version = \"1.0.0\" %}\n{% set build_ext = \"cuda\" if cuda_enabled else \"cpu\" %}\n{% set build_string = \"h{}_{}\".format(PKG_HASH, number) %}\n{% set build_string_ext = \"{}_{}\".format(build_string, build_ext) %}\n{% set py_build_string_ext = \"py{}{}_{}\".format(CONDA_PY, build_string, build_ext) %}\n{% set py_build_string = \"py{}{}\".format(CONDA_PY, build_string) %}\n{% set install_base = \"opt/omnisci\" %}\n{% set arrow_version = \"6.*\" %}\n{% set arrow_proc_version = \"3.*\" %}\n{% set pythrift_version = \"0.15.*\" %}\n{% set thrift_version = \"0.15.*\" %}\n# omniscidb 5.10 is not LLVM 12 ready\n{% set llvm_version = \"11\" %}\n\npackage:\n  name: omniscidb-ext\n  version: {{ version }}\n\nsource:\n  url: https://github.com/omnisci/omniscidb/archive/v{{ source_version }}.tar.gz\n  sha256: 73340011e93cc76f644e60a45e0205bba7684c969af43bf675026675029387c6\n  patches:\n    - 0001-Fix-DBE-build.patch\n\nbuild:\n  number: {{ number }}\n  skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\")]\n\noutputs:\n\n  - name: omniscidb-common\n    version: {{ version }}\n    script: build-omniscidb.sh\n    build:\n      string: {{ build_string }}\n      # cpu-only omniscidb-common for cuda is required only for\n      # building cuda-enabled omniscidb\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      run_exports:\n        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}\n      ignore_run_exports:\n        - arrow-cpp {{ arrow_version }}\n        - blosc\n        - double-conversion\n        - fmt\n        - geos\n        - glog\n        - libarchive\n        - libgdal\n        - libllvm{{ llvm_version }}\n        - libpng\n        - librdkafka\n        - libstdcxx-ng\n        - libthrift\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably...\n        - {{ compiler('c') }}\n        # go required for ThirdParty/generate_cert\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - ninja\n        - maven\n      host:\n        # omniscidb-common does not depend on build_ext, arrow-cpp\n        # (and other dependencies) is required just for the presence\n        # so that one could run cmake for generating *.bc, and other\n        # common data files.\n        - arrow-cpp ={{ arrow_version }}=*cpu\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex\n        - fmt\n        - geos\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libpng\n        - librdkafka\n        - thrift-cpp {{ thrift_version }}\n    test:\n      commands:\n        # Test installation\n        # doc\n        - test -f ${PREFIX}/share/doc/omnisci/LICENSE.md\n        # data\n        - test -d ${PREFIX}/{{ install_base }}/ThirdParty/gdal-data\n        # thrift\n        - test -f ${PREFIX}/{{ install_base }}/completion_hints.thrift\n        - test -f ${PREFIX}/{{ install_base }}/omnisci.thrift\n        - test -f ${PREFIX}/{{ install_base }}/common.thrift\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/serialized_result_set.thrift\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/extension_functions.thrift\n        # includes\n        - test -f ${PREFIX}/include/omnisci/Shared/funcannotations.h\n        - test -f ${PREFIX}/include/omnisci/Shared/InlineNullValues.h\n        - test -f ${PREFIX}/include/omnisci/Logger/Logger.h\n        # QE\n        - test -f ${PREFIX}/include/omnisci/QueryEngine/OmniSciTypes.h\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/RuntimeFunctions.bc\n        - test -f ${PREFIX}/{{ install_base }}/QueryEngine/ExtensionFunctions.ast\n        # jar\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-utility-{{ base_version }}.jar\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci-jdbc-{{ base_version }}.jar\n        - test -f ${PREFIX}/{{ install_base }}/bin/calcite-1.0-SNAPSHOT-jar-with-dependencies.jar\n        # Unspecified\n        - test -f ${PREFIX}/{{ install_base }}/bin/startomnisci\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_insert_sample_data\n        #\n        - test -f ${PREFIX}/{{ install_base }}/bin/generate_cert\n\n  - name: omniscidb\n    version: {{ version }}\n    script: build-omniscidb.sh\n    build:\n      string: {{ build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - fmt\n        - gflags\n        - glog\n        - libclang-cpp\n        - libkml\n        - ncurses\n        - openldap\n        - zlib\n      run_exports:\n        - {{ pin_subpackage('omniscidb',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex\n        - fmt\n        - gflags\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libkml\n        - libpng\n        - librdkafka\n        - ncurses\n        - openldap\n        # Workaround https://github.com/mamba-org/boa/issues/119 :\n        - openssl 1.1.1*\n        - snappy\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - boost-cpp\n        - bzip2\n        # omnscidb Load-time UDF support calls clang++\n        - gxx_{{ target_platform }}\n        - libclang-cpp {{ llvm_version }}\n        - ncurses\n        - openjdk 8.*\n        - xz\n        - zlib\n        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}\n      run_constrained:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, \"None\")]\n\n    test:\n      commands:\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_server\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisci_initdb\n        - test -f ${PREFIX}/{{ install_base }}/bin/omnisql\n        - test -f ${PREFIX}/{{ install_base }}/bin/KafkaImporter\n        - test -f ${PREFIX}/{{ install_base }}/bin/StreamImporter\n\n        # Verify the activation scripts are in-place.\n        {% for state in [\"activate\", \"deactivate\"] %}\n        - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"\n        {% endfor %}\n        # Try using the activation scripts.\n        - |\n          if [[ -x \"$(command -v omnisql)\" ]]\n          then\n            echo \"Found omnisql in PATH\"\n          else\n            echo \"omnisql not found in PATH(=$PATH)\" && exit 1\n          fi\n          source ${PREFIX}/etc/conda/deactivate.d/{{ PKG_NAME }}_deactivate.sh\n          if [[ -x \"$(command -v omnisql)\" ]]\n          then\n            echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\n          else\n            echo \"omnisql not in PATH after deactivation\"\n          fi\n          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh\n        # Test installation\n        - omnisql -v\n        - which omnisci_initdb\n        - which omnisci_server\n        - |\n          if [ -x \"$(command -v nvidia-smi)\" ]; then  # [cuda_compiler_version not in (undefined, \"None\")]\n            mkdir data && omnisci_initdb data\n            omnisci_server --version\n            rm -rf data\n          fi                                          # [cuda_compiler_version not in (undefined, \"None\")]\n        # these are provided by omniscidb-common package:\n        - which omnisci_insert_sample_data\n        - which startomnisci\n\n    about:\n      home: https://www.omnisci.com/\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The OmniSci database\n\n      description: |\n        OmniSciDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n\n        This recipe provides both CUDA enabled and CUDA disabled omniscidb\n        packages.\n      doc_url: https://www.omnisci.com/docs/latest/\n      dev_url: https://github.com/omnisci/omniscidb\n\n  - name: pyomniscidb\n    version: {{ version }}\n    script: build-pyomniscidb.sh\n    build:\n      skip: true  # [cuda_compiler_version in (\"11.0\",)]\n      string: {{ py_build_string }}\n      noarch: python\n      run_exports:\n        - {{ pin_subpackage('pyomniscidb',  max_pin='x.x.x') }}\n    requirements:\n      host:\n        - python\n        - setuptools_scm\n        - packaging >=20.0\n      run:\n        - python\n        - setuptools\n        - {{ pin_compatible('numpy', lower_bound='1.16') }}\n        - thrift {{ pythrift_version }}\n        - packaging >=20.0\n        - sqlalchemy >=1.3\n        - requests\n\n    about:\n      home: http://github.com/omnisci/pyomnisci\n      license: Apache-2.0\n      license_family: Apache\n      license_file: ./python/LICENSE.md\n      summary: A python DB API 2 compatible client for OmniSci (formerly MapD).\n      description: |\n        A python DB API 2 compatible client for OmniSci (formerly MapD).\n      doc_url: https://pyomnisci.readthedocs.io\n      dev_url: https://github.com/omnisci/pyomnisci\n\n    test:\n      imports:\n        - omnisci.cursor\n\n  - name: omniscidbe\n    version: {{ version }}\n    script: build-omniscidb.sh\n    build:\n      string: {{ build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - fmt\n        - glog\n        - libclang-cpp\n        - librdkafka\n        - ncurses\n        - zlib\n      rpaths:\n        - lib/\n        # fixes \"not found\" in `ldd $PREFIX/lib/libDBEngine.so` output\n        - {{ install_base }}/lib\n      run_exports:\n        - {{ pin_subpackage('omniscidbe',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - double-conversion\n        - flex\n        - fmt\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libpng\n        - librdkafka\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - boost-cpp\n        - bzip2\n        # omnscidb Load-time UDF support calls clang++\n        - gxx_{{ target_platform }}\n        - {{ pin_compatible('libclang-cpp', max_pin='x.x') }}\n        - ncurses\n        - openjdk 8.*\n        - xz\n        - zlib\n        - {{ pin_subpackage('omniscidb-common',  max_pin='x.x.x') }}\n      run_constrained:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - cudatoolkit >=11.0  # [cuda_compiler_version not in (undefined, \"None\")]\n\n    test:\n      commands:\n        # Test installation\n        - test -f ${PREFIX}/lib/libDBEngine.so\n        # Verify the activation scripts are in-place.\n        {% for state in [\"activate\", \"deactivate\"] %}\n        - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"\n        {% endfor %}\n        - |\n          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh\n          test -n \"${OMNISCI_ROOT_PATH+x}\"\n          ldd ${PREFIX}/lib/libDBEngine.so\n\n    about:\n      home: https://www.omnisci.com/\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The OmniSci database\n\n      description: |\n        OmniSciDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n      doc_url: https://www.omnisci.com/docs/latest/\n      dev_url: https://github.com/omnisci/omniscidb\n\n  - name: pyomniscidbe\n    version: {{ version }}\n    script: build-omniscidb.sh\n    build:\n      string: {{ py_build_string_ext }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"11.0\") or not linux64]\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - arrow-cpp {{ arrow_version }}\n        - blosc\n        - cudatoolkit    # [cuda_compiler_version not in (undefined, \"None\")]\n        - double-conversion\n        - fmt\n        - glog\n        - libarchive\n        - libgdal\n        - libllvm{{ llvm_version }}\n        - libpng\n        - librdkafka\n        - libthrift {{ thrift_version }}\n        - pyarrow {{ arrow_version }}\n        - python\n        - tbb\n      run_exports:\n        - {{ pin_subpackage('pyomniscidbe',  max_pin='x.x.x') }}\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        - clangdev {{ llvm_version }}\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx {{ llvm_version }}\n        - cmake\n        - llvmdev {{ llvm_version }}\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp ={{ arrow_version }}=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev {{ llvm_version }}\n        - cython\n        - double-conversion\n        - flex\n        - fmt\n        - glog\n        - llvmdev {{ llvm_version }}\n        - llvm {{ llvm_version }}\n        - libarchive\n        - libgdal\n        - libpng\n        - librdkafka\n        - numpy\n        - pyarrow ={{ arrow_version }}=*{{ build_ext }}\n        - python\n        - pytest\n        - tbb\n        - tbb-devel\n        - thrift-cpp {{ thrift_version }}\n        - {{ pin_subpackage('omniscidbe', exact=True) }}\n      run:\n        - arrow-cpp-proc {{ arrow_proc_version }} {{ build_ext }}\n        - pyarrow ={{ arrow_version }}=*{{ build_ext }}\n        - python\n        - tbb4py\n        - {{ pin_subpackage('omniscidbe', exact=True) }}\n    test:\n      requires:\n        - pytest\n        - numpy\n        - pandas\n      imports:\n        - omniscidbe\n      source_files:\n        - Embedded/test/test_exceptions.py\n      commands:\n        - pytest -sv Embedded/test/test_exceptions.py\n\n    about:\n      home: https://www.omnisci.com/\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The OmniSci database\n\n      description: |\n        OmniSciDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n      doc_url: https://www.omnisci.com/docs/latest/\n      dev_url: https://github.com/omnisci/omniscidb\n\nabout:\n  home: https://www.omnisci.com/\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE.md\n  summary: The OmniSci database\n\n  description: |\n    OmniSciDB is an in-memory, column store, SQL relational database\n    that was designed from the ground up to run on GPUs.\n\n    This recipe provides the following packages:\n      omniscidb-commong\n      CUDA-enabled omniscidb, cpu and cuda builds\n      pyomniscdb\n      omniscidb embedding library, cpu and cuda builds\n      omniscidb-embedded Python extension module\n  doc_url: https://www.omnisci.com/docs/latest/\n  dev_url: https://github.com/omnisci/omniscidb\n\nextra:\n  recipe-maintainers:\n    - xmnlab\n    - pearu\n    - andrewseidl\n    - jclay\n",
 "req": {
  "__set__": true,
  "elements": [
   "arrow-cpp",
   "arrow-cpp-proc",
   "bisonpp",
   "blosc",
   "boost-cpp",
   "bzip2",
   "c_compiler_stub",
   "cgo_compiler_stub",
   "clangdev",
   "clangxx",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "double-conversion",
   "flex",
   "fmt",
   "geos",
   "gflags",
   "glog",
   "gxx_linux-64",
   "libarchive",
   "libclang-cpp",
   "libgdal",
   "libkml",
   "libpng",
   "librdkafka",
   "llvm",
   "llvmdev",
   "make",
   "maven",
   "ncurses",
   "ninja",
   "numpy",
   "omniscidb-common",
   "omniscidbe",
   "openjdk",
   "openldap",
   "openssl",
   "packaging",
   "pyarrow",
   "pytest",
   "python",
   "requests",
   "setuptools",
   "setuptools_scm",
   "snappy",
   "sqlalchemy",
   "tbb",
   "tbb-devel",
   "tbb4py",
   "thrift",
   "thrift-cpp",
   "xz",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "c_compiler_stub",
    "clangdev",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "double-conversion",
    "flex",
    "fmt",
    "geos",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "numpy",
    "omniscidbe",
    "openldap",
    "openssl",
    "packaging",
    "pyarrow",
    "pytest",
    "python",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "arrow-cpp-proc",
    "boost-cpp",
    "bzip2",
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "gxx_linux-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "omniscidb-common",
    "omniscidbe",
    "openjdk",
    "packaging",
    "pyarrow",
    "python",
    "requests",
    "setuptools",
    "sqlalchemy",
    "tbb4py",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pytest"
   ]
  }
 },
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev 11",
    "clangxx 11",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev 11",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp =6.*=*cpu",
    "arrow-cpp =6.*=*cuda",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev 11",
    "cython",
    "double-conversion",
    "flex",
    "fmt",
    "geos",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm 11",
    "llvmdev 11",
    "ncurses",
    "numpy",
    "omniscidbe",
    "openldap",
    "openssl 1.1.1*",
    "packaging >=20.0",
    "pyarrow =6.*=*cpu",
    "pyarrow =6.*=*cuda",
    "pytest",
    "python",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp 0.15.*"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "arrow-cpp-proc 3.* cpu",
    "arrow-cpp-proc 3.* cuda",
    "boost-cpp",
    "bzip2",
    "gxx_linux-64",
    "libclang-cpp",
    "libclang-cpp 11",
    "ncurses",
    "numpy",
    "omniscidb-common",
    "omniscidbe",
    "openjdk 8.*",
    "packaging >=20.0",
    "pyarrow =6.*=*cpu",
    "pyarrow =6.*=*cuda",
    "python",
    "requests",
    "setuptools",
    "sqlalchemy >=1.3",
    "tbb4py",
    "thrift 0.15.*",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "pytest"
   ]
  }
 },
 "url": "https://github.com/omnisci/omniscidb/archive/v5.10.1.tar.gz",
 "version": "5.10.1"
}