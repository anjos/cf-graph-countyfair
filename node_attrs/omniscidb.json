{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/6c1e778d-adaa-4acb-8f6f-fdbe1489bc8a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/426882627.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka14"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734c329f-54d4-46b9-adea-2d658c59a065.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp0171"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/449026399.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "ncurses62"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/453691873.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal31"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/456399791.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp100"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/473330390.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp101"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485684827.json"
   },
   "data": {
    "bot_rerun": 1602840208.9289517,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/504715035.json"
   },
   "data": {
    "bot_rerun": 1603301895.011969,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507239609.json"
   },
   "data": {
    "bot_rerun": 1603327970.9239395,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/507741948.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/e5077835-03c0-48d3-8b7b-7c427f850f83.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp200"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/553766414.json"
   },
   "data": {
    "bot_rerun": 1613606766.809701,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/991f4253-b1ad-4f81-ac53-e840a4c355fd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/b4daf3ef-a651-4eb7-b58c-856bdb987bcb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp300"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/574755553.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/575048039.json"
   },
   "data": {
    "bot_rerun": 1617012559.8923514,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/577960830.json"
   },
   "data": {
    "bot_rerun": 1617012559.8925557,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/583960803.json"
   },
   "data": {
    "bot_rerun": 1617017678.219138,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/590097092.json"
   },
   "data": {
    "bot_rerun": 1617012559.8928735,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602606456.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/0e056661-664a-4c49-9cdd-cd2c358ce3eb.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libthrift0141"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602639636.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602675303.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "librdkafka16"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/602726068.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gdal32"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/621274776.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625289396.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "arrow_cpp400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "omniscidb",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cuda",
      "cudatoolkit >=10.2"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "if [ -x \"$(command -v nvidia-smi)\" ]; then\n  mkdir data && omnisci_initdb data\n  omnisci_server --version\n  rm -rf data\nfi\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "skip": true,
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.5.2"
  },
  "source": {
   "sha256": "a9b2b8aa167120cb26c7b897593980422d5ed859a732b5465009a5fbb2784476",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.5.2.tar.gz"
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "openldap",
    "openssl",
    "packaging",
    "python",
    "rbc",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "bzip2",
    "gxx_linux-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "openjdk",
    "packaging",
    "python",
    "rbc",
    "requests",
    "setuptools",
    "sqlalchemy",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": [
      "*/libcuda.*"
     ],
     "string": "h1234567_0_cuda",
     "track_features": [
      "arrow-cuda"
     ]
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cuda",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cuda",
      "cudatoolkit >=10.2"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "if [ -x \"$(command -v nvidia-smi)\" ]; then\n  mkdir data && omnisci_initdb data\n  omnisci_server --version\n  rm -rf data\nfi\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "skip": true,
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_linux-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py36h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py37h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py37h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py36h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.5.2"
  },
  "source": {
   "sha256": "a9b2b8aa167120cb26c7b897593980422d5ed859a732b5465009a5fbb2784476",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.5.2.tar.gz"
  }
 },
 "name": "omniscidb-ext",
 "new_version": "5.6.0",
 "new_version_attempts": {
  "5.3.0": 55,
  "5.3.1": 475,
  "5.3.2": 611,
  "5.4.0": 30,
  "5.4.1": 60,
  "5.5.0": 15,
  "5.5.1": 24,
  "5.5.2": 1,
  "5.6.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py36h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_osx-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py37h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.5.2"
  },
  "source": {
   "sha256": "a9b2b8aa167120cb26c7b897593980422d5ed859a732b5465009a5fbb2784476",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.5.2.tar.gz"
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "openldap",
    "openssl",
    "packaging",
    "python",
    "rbc",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "bzip2",
    "gxx_osx-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "openjdk",
    "packaging",
    "python",
    "rbc",
    "requests",
    "setuptools",
    "sqlalchemy",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "omniscidb",
   "pyomniscidb"
  ]
 },
 "pinning_version": "2021.04.28.12.37.37",
 "pre_pr_migrator_status": {
  "cuda110": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1042, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 222, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 216, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "librdkafka16": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/640172853\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h001c72f_19_cpu requires libthrift >=0.13.0,<0.14.0a0, but none of the providers can be installed\\n']",
  "libthrift0141": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/696948688\">bot CI job</a>): master: ['linux_64_cuda_compiler_versionNone: Encountered problems while solving.\\nProblem: package arrow-cpp-1.0.1-py36h0c458ad_34_cpu requires zstd >=1.4.9,<1.5.0a0, but none of the providers can be installed\\n']",
  "version": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1079, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 224, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 224, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "windows_cuda": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1042, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 222, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 216, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set version = \"5.5.2\" %}\n{% set number = \"0\" %}\n{% set cuda_enabled = cuda_compiler_version is not undefined and cuda_compiler_version == '10.2' %}\n{% set build_ext_version = \"1.0.0\" %}\n{% set build_ext = \"cuda\" if cuda_enabled else \"cpu\" %}\n{% set build_string = \"h{}_{}_{}\".format(PKG_HASH, number, build_ext) %}\n{% set py_build_string = \"py{}h{}_{}\".format(CONDA_PY, PKG_HASH, number) %}\n\npackage:\n  name: omniscidb-ext\n  version: {{ version }}\n\nsource:\n  url: https://github.com/omnisci/omniscidb/archive/v{{ version }}.tar.gz\n  sha256: a9b2b8aa167120cb26c7b897593980422d5ed859a732b5465009a5fbb2784476\n\nbuild:\n  number: {{ number }}\n  skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"10.2\")]\n\noutputs:\n\n  - name: omniscidb\n    version: {{ version }}\n    script: build-omniscidb.sh\n    build:\n      string: {{ build_string }}\n      skip: true  # [cuda_compiler_version not in (undefined, \"None\", \"10.2\") or not linux64]\n      missing_dso_whitelist:\n        - '*/libcuda.*'  # [cuda_compiler_version not in (undefined, \"None\")]\n      track_features:\n        {{ \"- arrow-cuda\" if cuda_enabled else \"\" }}\n      ignore_run_exports:\n        - cudatoolkit\n\n    requirements:\n      build:\n        # c compiler is specified here to get run constraint pins correct, presumably..\n        - {{ compiler('c') }}\n        - {{ compiler('cgo') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler(\"cuda\") }}  # [cuda_compiler_version not in (undefined, \"None\")]\n        # omniscidb 5.5 is not LLVM 12 ready\n        - clangdev <12\n        # clang++ is used for generating the bytecodes of extension functions\n        - clangxx <12\n        - cmake\n        - llvmdev <12\n        - make\n        - ninja\n        - maven\n      host:\n        - arrow-cpp =2.*=*{{ build_ext }}\n        - bisonpp\n        - blosc\n        - boost-cpp\n        - clangdev <12\n        - double-conversion\n        - flex\n        - gflags\n        - glog\n        - llvmdev <12\n        - llvm <12\n        - libarchive\n        - libgdal\n        - libkml\n        - libpng\n        - librdkafka\n        - ncurses\n        - openldap\n        - openssl\n        - snappy\n        - tbb\n        - tbb-devel\n        - thrift-cpp 0.13\n      run:\n        - boost-cpp\n        - bzip2\n        # omnscidb Load-time UDF support calls clang++\n        - gxx_{{ target_platform }}\n        - libclang-cpp <12\n        - ncurses\n        - openjdk 8\n        - xz\n        - zlib\n      run_constrained:\n        - arrow-cpp-proc * {{ build_ext }}\n        - cudatoolkit >=10.2  # [cuda_compiler_version not in (undefined, \"None\")]\n\n    test:\n      commands:\n        # Verify the activation scripts are in-place.\n        {% for state in [\"activate\", \"deactivate\"] %}\n        - test -f \"${PREFIX}/etc/conda/{{ state }}.d/{{ PKG_NAME }}_{{ state }}.sh\"\n        {% endfor %}\n        # Try using the activation scripts.\n        - |\n          if [[ -x \"$(command -v omnisql)\" ]]\n          then\n            echo \"Found omnisql in PATH\"\n          else\n            echo \"omnisql not found in PATH(=$PATH)\" && exit 1\n          fi\n          source ${PREFIX}/etc/conda/deactivate.d/{{ PKG_NAME }}_deactivate.sh\n          if [[ -x \"$(command -v omnisql)\" ]]\n          then\n            echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\n          else\n            echo \"omnisql not in PATH after deactivation\"\n          fi\n          source ${PREFIX}/etc/conda/activate.d/{{ PKG_NAME }}_activate.sh\n        # Test installation\n        - omnisql -v\n        - which omnisci_initdb\n        - which omnisci_server\n        - |\n          if [ -x \"$(command -v nvidia-smi)\" ]; then  # [cuda_compiler_version not in (undefined, \"None\")]\n            mkdir data && omnisci_initdb data\n            omnisci_server --version\n            rm -rf data\n          fi                                          # [cuda_compiler_version not in (undefined, \"None\")]\n        - which omnisci_insert_sample_data\n        - which startomnisci\n\n    about:\n      home: https://www.omnisci.com/\n      license: Apache-2.0\n      license_family: APACHE\n      license_file: LICENSE.md\n      summary: The OmniSci database\n\n      description: |\n        OmniSciDB is an in-memory, column store, SQL relational database\n        that was designed from the ground up to run on GPUs.\n\n        This recipe provides both CUDA enabled and CUDA disabled omniscidb\n        packages.\n      doc_url: https://www.omnisci.com/docs/latest/\n      dev_url: https://github.com/omnisci/omniscidb\n\n  - name: pyomniscidb\n    version: {{ version }}\n    script: build-pyomniscidb.sh\n    build:\n      skip: true  # [cuda_compiler_version in (\"10.2\",)]\n      string: {{ py_build_string }}\n    requirements:\n      host:\n        - python\n        - setuptools_scm\n        - packaging >=20.0\n        - rbc >=0.2.2\n      run:\n        - python\n        - setuptools\n        - {{ pin_compatible('numpy', lower_bound='1.16') }}\n        - thrift 0.13.*\n        - packaging >=20.0\n        - sqlalchemy >=1.3\n        - rbc >=0.2.2\n        - requests\n\n    about:\n      home: http://github.com/omnisci/pyomnisci\n      license: Apache-2.0\n      license_family: Apache\n      license_file: ./python/LICENSE.md\n      summary: A python DB API 2 compatible client for OmniSci (formerly MapD).\n      description: |\n        A python DB API 2 compatible client for OmniSci (formerly MapD).\n      doc_url: https://pyomnisci.readthedocs.io\n      dev_url: https://github.com/omnisci/pyomnisci\n\n    test:\n      imports:\n        - omnisci.cursor\n\nabout:\n  home: https://www.omnisci.com/\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE.md\n  summary: The OmniSci database\n\n  description: |\n    OmniSciDB is an in-memory, column store, SQL relational database\n    that was designed from the ground up to run on GPUs.\n\n    This recipe provides both CUDA enabled and CUDA disabled omniscidb\n    packages.\n  doc_url: https://www.omnisci.com/docs/latest/\n  dev_url: https://github.com/omnisci/omniscidb\n\nextra:\n  recipe-maintainers:\n    - xmnlab\n    - pearu\n    - andrewseidl\n    - jclay\n",
 "req": {
  "__set__": true,
  "elements": [
   "arrow-cpp",
   "bisonpp",
   "blosc",
   "boost-cpp",
   "bzip2",
   "c_compiler_stub",
   "cgo_compiler_stub",
   "clangdev",
   "clangxx",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "double-conversion",
   "flex",
   "gflags",
   "glog",
   "gxx_linux-64",
   "gxx_osx-64",
   "gxx_win-64",
   "libarchive",
   "libclang-cpp",
   "libgdal",
   "libkml",
   "libpng",
   "librdkafka",
   "llvm",
   "llvmdev",
   "make",
   "maven",
   "ncurses",
   "ninja",
   "numpy",
   "openjdk",
   "openldap",
   "openssl",
   "packaging",
   "python",
   "rbc",
   "requests",
   "setuptools",
   "setuptools_scm",
   "snappy",
   "sqlalchemy",
   "tbb",
   "tbb-devel",
   "thrift",
   "thrift-cpp",
   "xz",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "c_compiler_stub",
    "clangdev",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "openldap",
    "openssl",
    "packaging",
    "python",
    "rbc",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "bzip2",
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "gxx_linux-64",
    "gxx_osx-64",
    "gxx_win-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "openjdk",
    "packaging",
    "python",
    "rbc",
    "requests",
    "setuptools",
    "sqlalchemy",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev <12",
    "clangxx <12",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "llvmdev <12",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp =2.*=*cpu",
    "arrow-cpp =2.*=*cuda",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev <12",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm <12",
    "llvmdev <12",
    "ncurses",
    "openldap",
    "openssl",
    "packaging >=20.0",
    "python",
    "rbc >=0.2.2",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp 0.13"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "bzip2",
    "gxx_linux-64",
    "gxx_osx-64",
    "gxx_win-64",
    "libclang-cpp <12",
    "ncurses",
    "numpy",
    "openjdk 8",
    "packaging >=20.0",
    "python",
    "rbc >=0.2.2",
    "requests",
    "setuptools",
    "sqlalchemy >=1.3",
    "thrift 0.13.*",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/omnisci/omniscidb/archive/v5.5.2.tar.gz",
 "version": "5.5.2",
 "win_64_meta_yaml": {
  "about": {
   "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
   "dev_url": "https://github.com/omnisci/omniscidb",
   "doc_url": "https://www.omnisci.com/docs/latest/",
   "home": "https://www.omnisci.com/",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.md",
   "summary": "The OmniSci database"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay",
    "xmnlab",
    "pearu",
    "andrewseidl",
    "jclay"
   ]
  },
  "outputs": [
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py38h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py37h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "OmniSciDB is an in-memory, column store, SQL relational database\nthat was designed from the ground up to run on GPUs.\n\nThis recipe provides both CUDA enabled and CUDA disabled omniscidb\npackages.\n",
     "dev_url": "https://github.com/omnisci/omniscidb",
     "doc_url": "https://www.omnisci.com/docs/latest/",
     "home": "https://www.omnisci.com/",
     "license": "Apache-2.0",
     "license_family": "APACHE",
     "license_file": "LICENSE.md",
     "summary": "The OmniSci database"
    },
    "build": {
     "ignore_run_exports": [
      "cudatoolkit"
     ],
     "missing_dso_whitelist": null,
     "skip": true,
     "string": "h1234567_0_cpu",
     "track_features": null
    },
    "name": "omniscidb",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cgo_compiler_stub",
      "cxx_compiler_stub",
      "clangdev <12",
      "clangxx <12",
      "cmake",
      "llvmdev <12",
      "make",
      "ninja",
      "maven"
     ],
     "host": [
      "arrow-cpp =2.*=*cpu",
      "bisonpp",
      "blosc",
      "boost-cpp",
      "clangdev <12",
      "double-conversion",
      "flex",
      "gflags",
      "glog",
      "llvmdev <12",
      "llvm <12",
      "libarchive",
      "libgdal",
      "libkml",
      "libpng",
      "librdkafka",
      "ncurses",
      "openldap",
      "openssl",
      "snappy",
      "tbb",
      "tbb-devel",
      "thrift-cpp 0.13"
     ],
     "run": [
      "boost-cpp",
      "bzip2",
      "gxx_win-64",
      "libclang-cpp <12",
      "ncurses",
      "openjdk 8",
      "xz",
      "zlib"
     ],
     "run_constrained": [
      "arrow-cpp-proc * cpu"
     ]
    },
    "script": "build-omniscidb.sh",
    "test": {
     "commands": [
      "test -f \"${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\"",
      "test -f \"${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\"",
      "if [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Found omnisql in PATH\"\nelse\n  echo \"omnisql not found in PATH(=$PATH)\" && exit 1\nfi\nsource ${PREFIX}/etc/conda/deactivate.d/omniscidb-ext_deactivate.sh\nif [[ -x \"$(command -v omnisql)\" ]]\nthen\n  echo \"Unexpectedly found omnisql in PATH(=$PATH) after deactivation\"  && exit 1\nelse\n  echo \"omnisql not in PATH after deactivation\"\nfi\nsource ${PREFIX}/etc/conda/activate.d/omniscidb-ext_activate.sh\n",
      "omnisql -v",
      "which omnisci_initdb",
      "which omnisci_server",
      "mkdir data && omnisci_initdb data\nomnisci_server --version\nrm -rf data\n",
      "which omnisci_insert_sample_data",
      "which startomnisci"
     ]
    },
    "version": "5.5.2"
   },
   {
    "about": {
     "description": "A python DB API 2 compatible client for OmniSci (formerly MapD).\n",
     "dev_url": "https://github.com/omnisci/pyomnisci",
     "doc_url": "https://pyomnisci.readthedocs.io",
     "home": "http://github.com/omnisci/pyomnisci",
     "license": "Apache-2.0",
     "license_family": "Apache",
     "license_file": "./python/LICENSE.md",
     "summary": "A python DB API 2 compatible client for OmniSci (formerly MapD)."
    },
    "build": {
     "string": "py36h1234567_0"
    },
    "name": "pyomniscidb",
    "requirements": {
     "host": [
      "python",
      "setuptools_scm",
      "packaging >=20.0",
      "rbc >=0.2.2"
     ],
     "run": [
      "python",
      "setuptools",
      "numpy",
      "thrift 0.13.*",
      "packaging >=20.0",
      "sqlalchemy >=1.3",
      "rbc >=0.2.2",
      "requests"
     ]
    },
    "script": "build-pyomniscidb.sh",
    "test": {
     "imports": [
      "omnisci.cursor"
     ]
    },
    "version": "5.5.2"
   }
  ],
  "package": {
   "name": "omniscidb-ext",
   "version": "5.5.2"
  },
  "source": {
   "sha256": "a9b2b8aa167120cb26c7b897593980422d5ed859a732b5465009a5fbb2784476",
   "url": "https://github.com/omnisci/omniscidb/archive/v5.5.2.tar.gz"
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cgo_compiler_stub",
    "clangdev",
    "clangxx",
    "cmake",
    "cxx_compiler_stub",
    "llvmdev",
    "make",
    "maven",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "arrow-cpp",
    "bisonpp",
    "blosc",
    "boost-cpp",
    "clangdev",
    "double-conversion",
    "flex",
    "gflags",
    "glog",
    "libarchive",
    "libgdal",
    "libkml",
    "libpng",
    "librdkafka",
    "llvm",
    "llvmdev",
    "ncurses",
    "openldap",
    "openssl",
    "packaging",
    "python",
    "rbc",
    "setuptools_scm",
    "snappy",
    "tbb",
    "tbb-devel",
    "thrift-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "bzip2",
    "gxx_win-64",
    "libclang-cpp",
    "ncurses",
    "numpy",
    "openjdk",
    "packaging",
    "python",
    "rbc",
    "requests",
    "setuptools",
    "sqlalchemy",
    "thrift",
    "xz",
    "zlib"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}