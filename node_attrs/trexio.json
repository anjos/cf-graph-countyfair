{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/878205298.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1011595876.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51122"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "trexio",
 "hash_type": "sha256",
 "name": "trexio",
 "new_version": "2.2.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "trexio"
  ]
 },
 "pinning_version": "2022.07.28.19.34.36",
 "raw_meta_yaml": "\n{% set name = \"trexio\" %}\n{% set version = \"2.2.0\" %}\n{% set build = 1 %}\n\n# recipe-lint fails if mpi is undefined\n{% set mpi = mpi or 'nompi' %}\n{% if mpi == \"nompi\" %}\n# prioritize nompi via build number\n{% set build = build + 100 %}\n{% endif %}\n\n{% if mpi != \"nompi\" %}\n{% set mpi_prefix = \"mpi_\" + mpi %}\n{% else %}\n{% set mpi_prefix = \"nompi\" %}\n{% endif %}\n# add build string so packages can depend on\n# mpi or nompi variants\n# dependencies:\n# `PKG_NAME * mpi_mpich_*` for mpich\n# `PKG_NAME * mpi_*` for any mpi\n# `PKG_NAME * nompi_*` for no mpi\n\n# mpi builds require the right mpi\n# non-mpi builds *do not* appear to require non-mpi builds\n# at least not always\n{% if mpi != 'nompi' %}\n{% set build_pin = mpi_prefix + '_*' %}\n{% else %}\n{% set build_pin = '' %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/TREX-CoE/trexio/releases/download/v{{ version }}/{{ name }}-{{ version }}.tar.gz\n  sha256: e6340c424fcea18ae0b643a5707e16005c7576ee21a5aac679fbc132d70b36d9\n\nbuild:\n  number: {{ build }}\n  skip: true  # [win]\n  string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\n  run_exports:\n    - {{ pin_compatible('trexio', max_pin='x.x.x') }} {{ build_pin }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('fortran') }}\n    - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]\n    - cmake\n    - gnuconfig \n    - make\n    - pkg-config\n\n  host:\n    - hdf5  # [mpi == 'nompi']\n    - hdf5 * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libtrexio${SHLIB_EXT}  # [unix]\n    - test -f ${PREFIX}/include/trexio.h  # [unix]\n\nabout:\n  home: https://github.com/TREX-CoE/trexio\n  license: BSD-3-Clause\n  license_family: BSD \n  license_file: COPYING\n  summary: 'TREX library for efficient I/O'\n  description: |\n    The TREXIO library defines a standard format for storing wave functions, \n    together with an C-compatible API such that it can be easily used in \n    any programming language.\n  doc_url: https://trex-coe.github.io/trexio/\n  dev_url: https://github.com/TREX-CoE/trexio\n\nextra:\n  recipe-maintainers:\n    - q-posev\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/TREX-CoE/trexio/releases/download/v2.2.0/trexio-2.2.0.tar.gz",
 "version": "2.2.0"
}