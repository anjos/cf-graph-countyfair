{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/561145446.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/561146675.json"
   },
   "data": {
    "bot_rerun": 1611600644.7234888,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/49d12f3d-82f1-46e4-ae39-660aa897a487.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/561147301.json"
   },
   "data": {
    "bot_rerun": 1611600644.7237337,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/561330924.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/561382460.json"
   },
   "data": {
    "bot_rerun": 1613590193.716596,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/575047191.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/575198633.json"
   },
   "data": {
    "bot_rerun": 1633536053.51759,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/627144006.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/868950061.json"
   },
   "data": {
    "bot_rerun": 1672756818.5096116,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "openmm-plumed",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This project provides a connection between OpenMM and PLUMED.\nIt allows you to bias or analyze an OpenMM simulation based\non collective variables.\n",
   "dev_url": "https://github.com/openmm/openmm-plumed",
   "doc_url": "https://github.com/openmm/openmm-plumed",
   "home": "https://github.com/openmm/openmm-plumed",
   "license": "MIT",
   "license_file": "README.md",
   "summary": "A connection between OpenMM and PLUMED"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*"
   ],
   "number": "6"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-plumed",
   "version": "1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build"
   ],
   "host": [
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd"
   ],
   "run": [
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system"
   ]
  },
  "source": {
   "patches": [
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch"
   ],
   "sha256": "97cbffab7a452a3c8f0b00c301c9a796b752ee73e30dc5c1b2435678dd7c73ed",
   "url": "https://github.com/openmm/openmm-plumed/archive/v1.0.tar.gz"
  },
  "test": {
   "commands": "cd ${PREFIX}/share/openmm-plumed/tests\nset +e\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  ./${f}\n  ((exitcode+=$?))\ndone\nexit $exitcode\n",
   "imports": [
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "conda-build",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "ocl-icd",
    "openmm",
    "pip",
    "plumed",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ocl-icd",
    "ocl-icd-system",
    "openmm",
    "plumed",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This project provides a connection between OpenMM and PLUMED.\nIt allows you to bias or analyze an OpenMM simulation based\non collective variables.\n",
   "dev_url": "https://github.com/openmm/openmm-plumed",
   "doc_url": "https://github.com/openmm/openmm-plumed",
   "home": "https://github.com/openmm/openmm-plumed",
   "license": "MIT",
   "license_file": "README.md",
   "summary": "A connection between OpenMM and PLUMED"
  },
  "build": {
   "missing_dso_whitelist": null,
   "number": "6"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-plumed",
   "version": "1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build"
   ],
   "host": [
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "ocl-icd",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ]
  },
  "source": {
   "patches": [
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch"
   ],
   "sha256": "97cbffab7a452a3c8f0b00c301c9a796b752ee73e30dc5c1b2435678dd7c73ed",
   "url": "https://github.com/openmm/openmm-plumed/archive/v1.0.tar.gz"
  },
  "test": {
   "commands": "cd ${PREFIX}/share/openmm-plumed/tests\nset +e\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  ./${f}\n  ((exitcode+=$?))\ndone\nexit $exitcode\n",
   "imports": [
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed",
    "openmmplumed"
   ]
  }
 },
 "name": "openmm-plumed",
 "new_version": "1.0",
 "osx_64_meta_yaml": {
  "about": {
   "description": "This project provides a connection between OpenMM and PLUMED.\nIt allows you to bias or analyze an OpenMM simulation based\non collective variables.\n",
   "dev_url": "https://github.com/openmm/openmm-plumed",
   "doc_url": "https://github.com/openmm/openmm-plumed",
   "home": "https://github.com/openmm/openmm-plumed",
   "license": "MIT",
   "license_file": "README.md",
   "summary": "A connection between OpenMM and PLUMED"
  },
  "build": {
   "missing_dso_whitelist": null,
   "number": "6"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman",
    "raimis",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-plumed",
   "version": "1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "conda-build"
   ],
   "host": [
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader",
    "python",
    "pip",
    "openmm",
    "plumed 2.7",
    "swig <4.1",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "openmm",
    "plumed",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ]
  },
  "source": {
   "patches": [
    "cmakelists.patch",
    "cmakelists.patch",
    "cmakelists.patch"
   ],
   "sha256": "97cbffab7a452a3c8f0b00c301c9a796b752ee73e30dc5c1b2435678dd7c73ed",
   "url": "https://github.com/openmm/openmm-plumed/archive/v1.0.tar.gz"
  },
  "test": {
   "commands": "cd ${PREFIX}/share/openmm-plumed/tests\nset +e\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  ./${f}\n  ((exitcode+=$?))\ndone\nexit $exitcode\n",
   "imports": [
    "openmmplumed",
    "openmmplumed",
    "openmmplumed"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "conda-build",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "openmm",
    "pip",
    "plumed",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "openmm",
    "plumed",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmm-plumed"
  ]
 },
 "pinning_version": "2022.03.01.23.33.50",
 "pre_pr_migrator_attempts": {
  "cuda111_112": 1,
  "pypy37": 1,
  "pypy38": 3,
  "python311": 20
 },
 "pre_pr_migrator_status": {
  "cuda111_112": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/575062629\">bot CI job</a>): master: ['linux_64_cuda_compiler_version11.1python3.6.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.1python3.7.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.1python3.8.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.1python3.8.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.1python3.9.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.6.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.7.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.8.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.8.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.9.____cpython: Encountered problems while solving.\\nProblem: package openmm-7.5.0-py36h8c109a6_4 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n']",
  "pypy37": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/798558476\">bot CI job</a>): master: ['linux_64_cuda_compiler_version10.2python3.7.____73_pypy: Encountered problems while solving:\\n  - package openmm-7.5.0-py36h213f0bf_5 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0python3.7.____73_pypy: Encountered problems while solving:\\n  - package openmm-7.5.0-py36h213f0bf_5 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.1python3.7.____73_pypy: Encountered problems while solving:\\n  - package openmm-7.5.0-py36h213f0bf_5 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.2python3.7.____73_pypy: Encountered problems while solving:\\n  - package openmm-7.5.0-py36h213f0bf_5 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'osx_64_python3.7.____73_pypy: Encountered problems while solving:\\n  - package openmm-7.5.0-py36h5bfe094_5_khronos requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n']",
  "pypy38": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3942578244\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "python311": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3952015330\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set name = \"openmm-plumed\" %}\n{% set version = \"1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/openmm-plumed/archive/v{{ version }}.tar.gz\n  sha256: 97cbffab7a452a3c8f0b00c301c9a796b752ee73e30dc5c1b2435678dd7c73ed\n  patches:\n  - cmakelists.patch\n\nbuild:\n  number: 6\n  skip: true  # [win or (linux and cuda_compiler_version in (undefined, 'None'))]\n  missing_dso_whitelist:\n    - \"*/libcuda.*\"    # [linux64 or ppc64le]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [linux and cuda_compiler_version != 'None']\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n    - conda-build\n  host:\n    - python\n    - pip\n    - openmm\n    - plumed 2.7\n    - swig <4.1\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n  run:\n    - python\n    - {{ pin_compatible('openmm', min_pin='x.x', max_pin='x.x') }}\n    - {{ pin_compatible('plumed', min_pin='x.x', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n\ntest:\n  imports:\n    - openmmplumed\n  commands: |\n    cd ${PREFIX}/share/openmm-plumed/tests\n    set +e\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      ./${f}\n      ((exitcode+=$?))\n    done\n    exit $exitcode\n\n\nabout:\n  home: https://github.com/openmm/openmm-plumed\n  license: MIT\n  license_file: README.md\n  summary: 'A connection between OpenMM and PLUMED'\n  description: |\n    This project provides a connection between OpenMM and PLUMED.\n    It allows you to bias or analyze an OpenMM simulation based\n    on collective variables.\n  doc_url: https://github.com/openmm/openmm-plumed\n  dev_url: https://github.com/openmm/openmm-plumed\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - jaimergp\n    - peastman\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cdt_stub",
   "cmake",
   "conda-build",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "khronos-opencl-icd-loader",
   "make",
   "ocl-icd",
   "ocl-icd-system",
   "ocl_icd_wrapper_apple",
   "openmm",
   "pip",
   "plumed",
   "python",
   "swig"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "conda-build",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "openmm",
    "pip",
    "plumed",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "openmm",
    "plumed",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.17.2",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "conda-build",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "openmm",
    "pip",
    "plumed 2.7",
    "python",
    "swig <4.1"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "openmm",
    "plumed",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/openmm/openmm-plumed/archive/v1.0.tar.gz",
 "version": "1.0"
}