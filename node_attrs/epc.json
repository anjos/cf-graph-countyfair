{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "epc",
 "hash_type": "sha256",
 "name": "epc",
 "new_version": "0.0.5",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "epc"
  ]
 },
 "raw_meta_yaml": "{% set name = \"epc\" %}\n{% set version = \"0.0.5\" %}\n{% set file_ext = \"tar.gz\" %}\n{% set hash_type = \"sha256\" %}\n{% set hash_value = \"a14d2ea74817955a20eb00812e3a4630a132897eb4d976420240f1152c0d7d25\" %}\n\npackage:\n  name: '{{ name|lower }}'\n  version: '{{ version }}'\n\nsource:\n  fn: '{{ name }}-{{ version }}.{{ file_ext }}'\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}\n  '{{ hash_type }}': '{{ hash_value }}'\n\nbuild:\n  number: 0\n  noarch: python\n  script: python -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - python\n    - pip\n    - sexpdata >=0.0.3\n  run:\n    - python\n    - sexpdata >=0.0.3\n\ntest:\n  imports:\n    - epc\n    - epc.tests\n\nabout:\n  home: https://github.com/tkf/python-epc\n  license: GPL3\n  license_family: GPL3\n  license_file: '{{ environ[\"RECIPE_DIR\"] }}/COPYING'\n  summary: EPC (RPC stack for Emacs Lisp) implementation in Python\n  description: |\n    EPC (RPC stack for Emacs Lisp) for Python\n    =========================================\n\n    Links:\n\n    * `Documentation <http://python-epc.readthedocs.org/>`_ (at Read the Docs)\n    * `Repository <https://github.com/tkf/python-epc>`_ (at GitHub)\n    * `Issue tracker <https://github.com/tkf/python-epc/issues>`_ (at GitHub)\n    * `PyPI <http://pypi.python.org/pypi/epc>`_\n    * `Travis CI <https://travis-ci.org/#!/tkf/python-epc>`_ |build-status|\n\n    Other resources:\n\n    * `kiwanami/emacs-epc <https://github.com/kiwanami/emacs-epc>`_\n      (Client and server implementation in Emacs Lisp and Perl.)\n    * `tkf/emacs-jedi <https://github.com/tkf/emacs-jedi>`_\n      (Python completion for Emacs using EPC server.)\n\n    .. |build-status|\n       image:: https://secure.travis-ci.org/tkf/python-epc.png\n               ?branch=master\n       :target: http://travis-ci.org/tkf/python-epc\n       :alt: Build Status\n\n\n    What is this?\n    -------------\n\n    EPC is an RPC stack for Emacs Lisp and Python-EPC is its server side\n    and client side implementation in Python.  Using Python-EPC, you can\n    easily call Emacs Lisp functions from Python and Python functions from\n    Emacs.  For example, you can use Python GUI module to build widgets\n    for Emacs (see `examples/gtk/server.py`_ for example).\n\n    Python-EPC is tested against Python 2.6, 2.7 and 3.2.\n\n    Install\n    -------\n\n    To install Python-EPC and its dependency sexpdata_, run the following\n    command.::\n\n       pip install epc\n\n    .. _sexpdata: https://github.com/tkf/sexpdata\n\n\n    Usage\n    -----\n\n    Save the following code as ``my-server.py``.\n    (You can find functionally the same code in `examples/echo/server.py`_)::\n\n       from epc.server import EPCServer\n\n       server = EPCServer(('localhost', 0))\n\n       @server.register_function\n       def echo(*a):\n           return a\n\n       server.print_port()\n       server.serve_forever()\n\n\n    And then run the following code from Emacs.\n    This is a stripped version of `examples/echo/client.el`_ included in\n    Python-EPC repository_.::\n\n       (require 'epc)\n\n       (defvar my-epc (epc:start-epc \"python\" '(\"my-server.py\")))\n\n       (deferred:$\n         (epc:call-deferred my-epc 'echo '(10))\n         (deferred:nextc it\n           (lambda (x) (message \"Return : %S\" x))))\n\n       (message \"Return : %S\" (epc:call-sync my-epc 'echo '(10 40)))\n\n\n    .. _examples/echo/server.py:\n       https://github.com/tkf/python-epc/blob/master/examples/echo/server.py\n    .. _examples/echo/client.el:\n       https://github.com/tkf/python-epc/blob/master/examples/echo/client.el\n\n    If you have carton_ installed, you can run the above sample by\n    simply typing the following commands::\n\n       make elpa        # install EPC in a separated environment\n       make run-sample  # run examples/echo/client.el\n\n    .. _carton: https://github.com/rejeep/carton\n\n\n    For example of bidirectional communication and integration with GTK,\n    see `examples/gtk/server.py`_.  You can run this example by::\n\n       make elpa\n       make run-gtk-sample  # run examples/gtk/client.el\n\n    .. _examples/gtk/server.py:\n       https://github.com/tkf/python-epc/blob/master/examples/gtk/server.py\n\n\n    License\n    -------\n\n    Python-EPC is licensed under GPL v3.\n    See COPYING for details.\n\nextra:\n  recipe-maintainers:\n    - asmeurer\n",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/e/epc/epc-0.0.5.tar.gz",
 "version": "0.0.5"
}