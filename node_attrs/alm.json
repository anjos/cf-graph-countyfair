{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/372204713.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/372204975.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/378662188.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/413866576.json"
   },
   "data": {
    "bot_rerun": 1600254722.3937395,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485601246.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/487888002.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0_dev.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503076007.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560513751.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": {
  "exception": "Command 'git fetch --all --quiet' returned non-zero exit status 1.",
  "traceback": [
   "Traceback (most recent call last):",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1050, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 164, in run",
   "    feedstock_dir, repo = get_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 279, in get_repo",
   "    if fetch_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 183, in fetch_repo",
   "    _run_git_cmd(f\"git fetch --all {quiet}\")",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 171, in _run_git_cmd",
   "    return subprocess.run(cmd, shell=True, check=True)",
   "  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 512, in run",
   "    raise CalledProcessError(retcode, process.args,",
   "subprocess.CalledProcessError: Command 'git fetch --all --quiet' returned non-zero exit status 1.",
   ""
  ]
 },
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "alm",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "ALM can be used for Extraction of harmonic and anharmonic force constants\nbased on the supercell approach. It is applicable to any crystal structure\nand low-dimensional systems. Features accurate treatment of translational\nand rotational invariance and Interface to VASP, Quantum-ESPRESSO, and xTAPP.\n",
   "dev_url": "https://github.com/ttadano/ALM",
   "doc_url": "http://alm.readthedocs.io/",
   "home": "https://github.com/ttadano/ALM",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.txt",
   "summary": "Software for calculating harmonic and anharmonic interatomic force constants in solids and molecules."
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "recipe-maintainers": [
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano"
   ]
  },
  "package": {
   "name": "alm",
   "version": "2.0.0_dev.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp"
   ],
   "host": [
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch"
   ],
   "sha256": "407084e9bea3c3662455a61775f0712b636b53b6fe75cc0aa2d87e698f8f4f55",
   "url": "https://github.com/jochym/ALM/archive/v2.0.0_dev.2.tar.gz"
  },
  "test": {
   "commands": [
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py"
   ],
   "imports": [
    "alm",
    "alm",
    "alm",
    "alm",
    "alm"
   ],
   "source_files": [
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libgomp"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "eigen",
    "liblapack",
    "numpy",
    "python",
    "setuptools",
    "spglib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "ALM can be used for Extraction of harmonic and anharmonic force constants\nbased on the supercell approach. It is applicable to any crystal structure\nand low-dimensional systems. Features accurate treatment of translational\nand rotational invariance and Interface to VASP, Quantum-ESPRESSO, and xTAPP.\n",
   "dev_url": "https://github.com/ttadano/ALM",
   "doc_url": "http://alm.readthedocs.io/",
   "home": "https://github.com/ttadano/ALM",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.txt",
   "summary": "Software for calculating harmonic and anharmonic interatomic force constants in solids and molecules."
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "recipe-maintainers": [
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano"
   ]
  },
  "package": {
   "name": "alm",
   "version": "2.0.0_dev.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "libgomp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp"
   ],
   "host": [
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch"
   ],
   "sha256": "407084e9bea3c3662455a61775f0712b636b53b6fe75cc0aa2d87e698f8f4f55",
   "url": "https://github.com/jochym/ALM/archive/v2.0.0_dev.2.tar.gz"
  },
  "test": {
   "commands": [
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py"
   ],
   "imports": [
    "alm",
    "alm",
    "alm",
    "alm",
    "alm",
    "alm",
    "alm",
    "alm",
    "alm",
    "alm"
   ],
   "source_files": [
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py"
   ]
  }
 },
 "name": "alm",
 "new_version": "2.0.0_dev.2",
 "new_version_attempts": {
  "2.0.0_dev.2": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "ALM can be used for Extraction of harmonic and anharmonic force constants\nbased on the supercell approach. It is applicable to any crystal structure\nand low-dimensional systems. Features accurate treatment of translational\nand rotational invariance and Interface to VASP, Quantum-ESPRESSO, and xTAPP.\n",
   "dev_url": "https://github.com/ttadano/ALM",
   "doc_url": "http://alm.readthedocs.io/",
   "home": "https://github.com/ttadano/ALM",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.txt",
   "summary": "Software for calculating harmonic and anharmonic interatomic force constants in solids and molecules."
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "recipe-maintainers": [
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano",
    "jochym",
    "ttadano"
   ]
  },
  "package": {
   "name": "alm",
   "version": "2.0.0_dev.2"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp",
    "cxx_compiler_stub",
    "llvm-openmp"
   ],
   "host": [
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools",
    "python",
    "liblapack",
    "numpy",
    "boost",
    "eigen",
    "spglib >=1.12",
    "setuptools"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "patches": [
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch",
    "use_external_spglib.patch"
   ],
   "sha256": "407084e9bea3c3662455a61775f0712b636b53b6fe75cc0aa2d87e698f8f4f55",
   "url": "https://github.com/jochym/ALM/archive/v2.0.0_dev.2.tar.gz"
  },
  "test": {
   "commands": [
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py",
    "cd test",
    "python Si_fitting.py",
    "python SiC_fitting.py"
   ],
   "imports": [
    "alm",
    "alm",
    "alm",
    "alm",
    "alm"
   ],
   "source_files": [
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py",
    "test/*.dat",
    "test/*.py"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "llvm-openmp"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "eigen",
    "liblapack",
    "numpy",
    "python",
    "setuptools",
    "spglib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "alm"
  ]
 },
 "pinning_version": "2021.01.23.15.45.39",
 "pre_pr_migrator_status": {
  "pypy37": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1050, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 164, in run\n    feedstock_dir, repo = get_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 279, in get_repo\n    if fetch_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 183, in fetch_repo\n    _run_git_cmd(f\"git fetch --all {quiet}\")\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 171, in _run_git_cmd\n    return subprocess.run(cmd, shell=True, check=True)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 512, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command 'git fetch --all --quiet' returned non-zero exit status 1.\n",
  "python39": "not solvable: ['Encountered problems while solving.\\nProblem: package boost-1.72.0-py27h9de70de_0 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package boost-1.72.0-py27hbf1eeb5_0 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"ALM\" %}\n{% set version = \"2.0.0_dev.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/jochym/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 407084e9bea3c3662455a61775f0712b636b53b6fe75cc0aa2d87e698f8f4f55\n  patches:\n    - use_external_spglib.patch\n\nbuild:\n  number: 2\n  skip: true  # [win or py<35]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - llvm-openmp  # [osx]\n    - libgomp      # [linux and not aarch64]\n  host:\n    - python\n    - liblapack\n    - numpy\n    - boost\n    - eigen\n    - spglib >=1.12\n    - setuptools\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  source_files:\n    - test/*.dat\n    - test/*.py\n  imports:\n    - alm\n  commands:\n    - cd test\n    - python Si_fitting.py\n    - python SiC_fitting.py\n\nabout:\n  home: https://github.com/ttadano/ALM\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n  summary: Software for calculating harmonic and anharmonic interatomic force constants in solids and molecules.\n\n  description: |\n    ALM can be used for Extraction of harmonic and anharmonic force constants \n    based on the supercell approach. It is applicable to any crystal structure\n    and low-dimensional systems. Features accurate treatment of translational \n    and rotational invariance and Interface to VASP, Quantum-ESPRESSO, and xTAPP.\n  doc_url: http://alm.readthedocs.io/\n  dev_url: https://github.com/ttadano/ALM\n\nextra:\n  recipe-maintainers:\n    - jochym\n    - ttadano\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost",
   "cxx_compiler_stub",
   "eigen",
   "libgomp",
   "liblapack",
   "llvm-openmp",
   "numpy",
   "python",
   "setuptools",
   "spglib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "ctng-compilers",
    "cxx_compiler_stub",
    "eigen",
    "liblapack",
    "numpy",
    "openmp",
    "python",
    "setuptools",
    "spglib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ctng-compilers",
    "cxx_compiler_stub",
    "numpy",
    "openmp",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.8.6",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "eigen",
    "liblapack",
    "numpy",
    "python",
    "setuptools",
    "spglib >=1.12"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/jochym/ALM/archive/v2.0.0_dev.2.tar.gz",
 "version": "2.0.0_dev.2"
}