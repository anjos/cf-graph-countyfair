{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/581546459.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "sphinxcontrib-restbuilder",
 "hash_type": "sha256",
 "name": "sphinxcontrib-restbuilder",
 "new_version": "0.3",
 "new_version_attempts": {
  "0.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "sphinxcontrib-restbuilder"
  ]
 },
 "pinning_version": "2021.02.26.15.36.03",
 "raw_meta_yaml": "{% set name = \"sphinxcontrib-restbuilder\" %}\n{% set version = \"0.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: ad2ce3d99384830b136a24b834a1e7aee788918cbcf4eb31a7ee257e5897c6e2\n\nbuild:\n  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . --no-deps -vv\"\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - sphinx\n\ntest:\n  imports:\n    - sphinxcontrib.writers\n    - sphinxcontrib.builders\n\nabout:\n  home: https://bitbucket.org/birkenfeld/sphinx-contrib\n  license: BSD 2-clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: 'Sphinx extension to output reST files.'\n\n  description: |\n    Sphinx extension to build reST (reStructuredText) files.\n    This extension is in particular useful to use in combination with the \n    autodoc extension to automatically generate documentation for use by \n    any rst parser (such as the GitHub wiki). In itself, the extension is \n    fairly straightforward \u2013 it takes the parsed reST file from Sphinx and \n    outputs it as reST.\n  doc_url: http://pythonhosted.org/sphinxcontrib-restbuilder/\n  dev_url: https://bitbucket.org/birkenfeld/sphinx-contrib\n\nextra:\n  recipe-maintainers:\n    - holgern\n    - kiwi0fruit\n",
 "smithy_version": "3.9.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/s/sphinxcontrib-restbuilder/sphinxcontrib-restbuilder-0.2.tar.gz",
 "version": "0.2"
}