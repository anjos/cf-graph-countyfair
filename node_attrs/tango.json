{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/833512543.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/841517903.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/844679093.json"
   },
   "data": {
    "bot_rerun": 1644537111.9172704,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/846526058.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/863873800.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/913761659.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/942335703.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/955506956.json"
   },
   "data": {
    "bot_rerun": 1658587138.1685553,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/978620146.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1006366683.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1009103702.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1018145616.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "tango",
 "hash_type": "sha256",
 "name": "tango-split",
 "new_version": "0.11.0",
 "new_version_attempts": {
  "0.10.0": 1,
  "0.10.1": 1,
  "0.11.0": 1,
  "0.4.0": 1,
  "0.5.0": 2,
  "0.6.0": 1,
  "0.7.0": 1,
  "0.8.0": 1,
  "0.9.0": 1,
  "0.9.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "tango",
   "tango-all",
   "tango-beaker",
   "tango-datasets",
   "tango-fairscale",
   "tango-pytorch_lightning",
   "tango-split",
   "tango-torch",
   "tango-transformers",
   "tango-wandb"
  ]
 },
 "pinning_version": "2022.08.04.07.32.40",
 "raw_meta_yaml": "{% set version = \"0.10.1\" %}\n\npackage:\n  name: tango-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/allenai/tango/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: dbc2a81bb818a159b9d688f2dc4a01b8fd572e8f42f0d3fb54fe46aef9970481\n  patches:\n    # fix a test that's too strict for our infra\n    - patches/0001-relax-assumptions-about-elapsed-time-for-multicore-t.patch\n\nbuild:\n  number: 0\n  skip: true  # [win]\n\n# Need these up here for conda-smithy to handle them properly.\nrequirements:\n  host:\n    - python\n  run:\n    - python\n\noutputs:\n  - name: tango\n    build:\n      script: {{ PYTHON }} -m pip install . --no-deps -vv\n      skip: true  # [win]\n      entry_points:\n        - tango=tango.__main__:main\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n      host:\n        - python\n        - pip\n        - setuptools <60\n        - wheel\n      run:\n        - python\n        - base58\n        - cached_path >=1.0,<1.2\n        - click >=7.0,<8.1.4\n        - click-help-colors >=0.9.1,<0.10.0\n        - dill\n        - filelock >=3.4,<3.8\n        - glob2 >=0.7\n        - jsonnet >=0.10.0  # [not win]\n        - more-itertools >=8.0,<9.0\n        - petname >=2.6,<3.0\n        - python-xxhash\n        - pytz\n        - pyyaml >=5.4.1,<6.1\n        - rich >=12.3,<13.0\n        - sqlitedict\n        - tqdm >=4.62,<4.65\n    test:\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - tests/\n        - test_fixtures/\n        # needed by a test\n        - examples/\n      imports:\n        - tango\n      commands:\n        - tango --help\n        {% set tests_to_skip = \"_not_a_real_test\" %}\n        # test_experiment_with_logging_and_multiprocessing seems to fail\n        # spuriously while trying to match exact logging output\n        {% set tests_to_skip = tests_to_skip + \" or test_experiment_with_logging_and_multiprocessing\" %}\n        # test makes assumptions about exact hashes that are not reproducible for us\n        {% set tests_to_skip = tests_to_skip + \" or test_deterministic_experiment\" %}\n        - pytest tests/ --ignore=tests/integrations -v -k \"not ({{ tests_to_skip }})\"\n\n  - name: tango-all\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - {{ pin_subpackage('tango-beaker', exact=True) }}\n        - {{ pin_subpackage('tango-datasets', exact=True) }}\n        - {{ pin_subpackage('tango-fairscale', exact=True) }}\n        - {{ pin_subpackage('tango-pytorch_lightning', exact=True) }}\n        - {{ pin_subpackage('tango-torch', exact=True) }}\n        - {{ pin_subpackage('tango-transformers', exact=True) }}\n        - {{ pin_subpackage('tango-wandb', exact=True) }}\n    test:\n      imports:\n        # see other outputs for more specific tests\n        - tango\n      requires:\n        - pip\n      commnds:\n        # run only once for all subpackages\n        - pip check\n\n  - name: tango-beaker\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - beaker-py >=1.6.2,<2\n    test:\n      imports:\n        - tango.integrations.beaker\n      # basically all tests require a token we don't have. Perhaps\n      # we'll get a special setup accommodated by upstream, see\n      # https://github.com/conda-forge/staged-recipes/pull/19771#issuecomment-1194356768\n      # requires:\n      #   - pytest\n      #   - flaky\n      #   - git\n      # source_files:\n      #   - test_fixtures/\n      #   - tests/\n      # commands:\n      #   - pytest -v tests/integrations/beaker\n\n  - name: tango-datasets\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - datasets >=1.12,<3\n    test:\n      imports:\n        - tango.integrations.datasets\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        - pytest -v tests/integrations/datasets\n\n  - name: tango-fairscale\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - fairscale =0.4.6\n        - numpy\n        - pytorch >=1.9,<1.13\n    test:\n      imports:\n        - tango.integrations.fairscale\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        - pytest -v tests/integrations/fairscale\n\n  - name: tango-pytorch_lightning\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - pytorch >=1.9,<1.13\n        - pytorch-lightning >=1.6.0,<1.7.0\n    test:\n      imports:\n        - tango.integrations.pytorch_lightning\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        - pytest -v tests/integrations/pytorch_lightning\n\n  - name: tango-torch\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - numpy\n        - pytorch >=1.9,<1.13\n    test:\n      imports:\n        - tango.integrations.torch\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        - pytest -v tests/integrations/torch\n\n  - name: tango-transformers\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - datasets >=1.12,<3\n        - numpy\n        - pytorch >=1.9,<1.13\n        - sentencepiece >=0.1.96\n        - transformers >=4.12.3\n    test:\n      imports:\n        - tango.integrations.transformers\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        - pytest -v tests/integrations/transformers\n\n  - name: tango-wandb\n    build:\n      skip: true  # [win]\n    requirements:\n      host:\n        - python\n      run:\n        - python\n        - {{ pin_subpackage('tango', exact=True) }}\n        - pytorch >=1.9,<1.13\n        - wandb >=0.12,<0.13\n    test:\n      imports:\n        - tango.integrations.wandb\n      requires:\n        - pytest\n        - flaky\n        - git\n      source_files:\n        - test_fixtures/\n        - tests/\n      commands:\n        # all the tests in workspace_test.py need an API token we don't have\n        - pytest -v tests/integrations/wandb -k \"not (workspace_test or test_step_cache_artifact_not_found)\"\n\nabout:\n  home: https://github.com/allenai/tango\n  license: Apache-2.0\n  license_file: LICENSE\n  summary: AI2 Tango replaces messy directories and spreadsheets full of file versions by organizing experiments into discrete steps that can be cached and reused throughout the lifetime of a research project.\n  description: |\n    AI2 Tango is a platform that allows you to build machine learning experiments\n    out of steps that can be reused and repeated. It eliminates duplicate work,\n    stores past results, and keeps track of how they were obtained so you can\n    quickly identify and trace back your best work. Experiments are flexible,\n    so you can change direction, pursue another idea and incorporate feedback,\n    without losing previous results. Write your own steps by wrapping common\n    Python functions, or take advantage of the library of pre-built steps for\n    training models, working with datasets, and running evaluations. It is\n    integrated with popular tools like the Huggingface transformers library,\n    PyTorch Lightning, and others.\n  doc_url: https://ai2-tango.readthedocs.io\n  dev_url: https://github.com/allenai/tango\n\nextra:\n  recipe-maintainers:\n    - h-vetinari\n  feedstock-name: tango\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://github.com/allenai/tango/archive/refs/tags/v0.10.1.tar.gz",
 "version": "0.10.1"
}