{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/b77ee85b-369b-450b-ae9d-f823240f702f.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "tbb2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1106206191.json"
   },
   "data": {
    "bot_rerun": 1671293634.7746236,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1169492112.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: InvalidVersion(\"Invalid version: '3.10.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 200, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: InvalidVersion(\"Invalid version: '3.10.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "intel-compiler-repack",
 "name": "intel-compiler-repack",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dpcpp-cpp-rt",
   "dpcpp_impl_linux-64",
   "dpcpp_impl_osx-64",
   "dpcpp_impl_win-64",
   "dpcpp_linux-64",
   "dpcpp_osx-64",
   "dpcpp_win-64",
   "intel-cmplr-lib-rt",
   "intel-cmplr-lic-rt",
   "intel-fortran-rt",
   "intel-opencl-rt",
   "oneccl-devel"
  ]
 },
 "pinning_version": "2022.12.16.14.20.18",
 "raw_meta_yaml": "{% set version = \"2023.0.0\" %}          # [linux]\n{% set version = \"2023.0.0\" %}          # [osx or win]\n{% set intel_build_number = \"25370\" %}   # [linux]\n{% set intel_build_number = \"25369\" %}   # [osx]\n{% set intel_build_number = \"25922\" %}   # [win]\n\n{% set oneccl_version = \"2021.8.0\" %}\n{% set oneccl_build_number = \"25371\" %}\n\n{% set tbb_version = \"2021.8.0\" %}\n\n# use this if our build script changes and we need to increment beyond intel's version\n{% set dst_build_number = '1' %}\n{% set build_number = intel_build_number|int + dst_build_number|int %}\n\npackage:\n  name: intel-compiler-repack\n  version: {{ version }}\n\nsource:\n  # Is there a better way to specify skipping the source if it does not exist? (so it matches 'skip: True' selectors)\n  - url: https://anaconda.org/intel/intel-cmplr-lic-rt/{{ version }}/download/{{ target_platform }}/intel-cmplr-lic-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2\n    folder: intel-cmplr-lic-rt\n  - url: https://anaconda.org/intel/intel-fortran-rt/{{ version }}/download/{{ target_platform }}/intel-fortran-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2\n    folder: intel-fortran-rt\n  - url: https://anaconda.org/intel/dpcpp-cpp-rt/{{ version }}/download/{{ target_platform }}/dpcpp-cpp-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [not win32]\n    folder: dpcpp-cpp-rt  # [not win32]\n  - url: https://anaconda.org/intel/intel-cmplr-lib-rt/{{ version }}/download/{{ target_platform }}/intel-cmplr-lib-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [not osx]\n    folder: intel-cmplr-lib-rt  # [not osx]\n  - url: https://anaconda.org/intel/dpcpp_impl_{{ target_platform }}/{{ version }}/download/{{ target_platform }}/dpcpp_impl_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]\n    folder: dpcpp_impl_{{ target_platform }}  # [linux64 or win64]\n  - url: https://anaconda.org/intel/dpcpp_{{ target_platform }}/{{ version }}/download/{{ target_platform }}/dpcpp_{{ target_platform }}-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]\n    folder: dpcpp_{{ target_platform }}  # [linux64 or win64]\n  - url: https://anaconda.org/intel/intel-opencl-rt/{{ version }}/download/{{ target_platform }}/intel-opencl-rt-{{ version }}-intel_{{ intel_build_number }}.tar.bz2  # [linux64 or win64]\n    folder: intel-opencl-rt  # [linux64 or win64]\n  - url: https://anaconda.org/intel/oneccl-devel/{{ oneccl_version }}/download/{{ target_platform }}/oneccl-devel-{{ oneccl_version }}-intel_{{ oneccl_build_number }}.tar.bz2  # [linux64]\n    folder: oneccl-devel  # [linux64]\n\nbuild:\n  number: {{ build_number }}\n  binary_relocation: false\n  detect_binary_files_with_prefix: false\n  skip: True                                  # [not (linux64 or osx or win)]\n\noutputs:\n  - name: intel-cmplr-lic-rt\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/articles/end-user-license-agreement.html\n      summary: Intel End User License Agreement for Developer Tools\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file: \n        - intel-cmplr-lic-rt/info/licenses/license.txt\n        - intel-cmplr-lic-rt/info/licenses/tpp.txt\n      description: |\n        Intel End User License Agreement for Developer Tools.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 ${PREFIX}/licensing/compiler/*  # [unix]\n        - dir %PREFIX%\\licensing\\compiler\\*  # [win]\n\n  - name: intel-cmplr-lib-rt\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    build:\n      skip: True  # [osx]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - ocl-icd  # [linux]\n        - khronos-opencl-icd-loader  # [win]\n        - zlib\n      run:\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top.html\n      summary: Runtime for Intel\u00AE C++ Compiler Classic\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file: \n        - intel-cmplr-lib-rt/info/licenses/license.txt\n        - intel-cmplr-lib-rt/info/licenses/tpp.txt\n      description: |\n        Runtime for Intel\u00AE C++ Compiler Classic.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 ${PREFIX}/lib/*  # [unix]\n        - dir %PREFIX%\\Library\\bin\\*  # [win]\n\n  - name: intel-fortran-rt\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    build:                               # [osx]\n      missing_dso_whitelist:             # [osx]\n        - '**/for_mac_ftn_alloc.dylib'   # [osx]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - patchelf                 # [linux]\n      host:\n        - mpich                    # [linux]\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}  # [not osx]\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}        # [osx]\n      run:\n        - _openmp_mutex * *_llvm   # [linux]\n        - llvm-openmp              # [not linux]\n        - mpich                    # [linux]\n        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}  # [not osx]\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}        # [osx]\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fortran-compiler.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/fortran-compiler-oneapi-dev-guide-and-reference/top.html\n      summary: Runtime for Intel\u00AE Fortran Compiler Classic and Intel\u00AE Fortran Compiler (Beta)\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file: \n        - intel-fortran-rt/info/licenses/license.txt\n        - intel-fortran-rt/info/licenses/tpp.txt\n      description: |\n        Runtime for Intel\u00AE Fortran Compiler Classic and Intel\u00AE Fortran Compiler (Beta).\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 ${PREFIX}/lib/*  # [unix]\n        - dir %PREFIX%\\Library\\bin\\*  # [win]\n\n  - name: intel-opencl-rt\n    script: opencl-rt-build.sh   # [unix]\n    script: opencl-rt-bld.bat  # [win]\n    build:\n      skip: True  # [win32 or osx]\n      binary_relocation: False   # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - sysroot_linux-64 2.17  # [linux]\n        - patchelf               # [linux]\n      host:\n        - tbb-devel {{ tbb_version.split('.')[0] }}.*\n        - ocl-icd  # [linux]\n        - khronos-opencl-icd-loader  # [osx or win]\n        - zlib\n        - libxml2\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}\n        - python  # [win]\n      run:\n        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}\n        # TODO figure out why pin_subpackage does not work for below\n        - intel-cmplr-lib-rt {{ version }}\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/tools.html\n      summary: Intel\u00AE CPU Runtime for OpenCL(TM) Applications\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file:\n        - intel-opencl-rt/info/licenses/license.txt\n        - intel-opencl-rt/info/licenses/tpp.txt\n      description: |\n        Intel\u00AE CPU Runtime for OpenCL(TM) Applications\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      requires:\n        - pyopencl\n        - curl\n      commands:\n        - test -f $PREFIX/lib/intel-ocl-cpu/libintelocl.so          # [linux]\n        - type %PREFIX%\\Library\\lib\\intel-ocl-cpu\\cl.cfg            # [win]\n        - export OCL_ICD_DEBUG=7                                    # [linux]\n        - curl -O https://raw.githubusercontent.com/inducer/pyopencl/v2021.2.13/examples/demo.py\n        - export PYOPENCL_CTX=intel  # [unix]\n        - set PYOPENCL_CTX=intel     # [win]\n        - python demo.py\n\n  - name: dpcpp-cpp-rt\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    build:\n      skip: True  # [win32]\n      missing_dso_whitelist:\n        - '**/libze_loader.so.1'\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}  # [not osx]\n        - ocl-icd   # [linux]\n        - khronos-opencl-icd-loader  # [win]\n      run:\n        - _openmp_mutex * *_llvm   # [linux]\n        - llvm-openmp              # [not linux]\n        - {{ pin_subpackage('intel-cmplr-lic-rt', exact=True) }}\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}  # [not osx]\n        - {{ pin_subpackage('intel-opencl-rt', exact=True) }}     # [not osx]\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html\n      summary: Runtime for Intel\u00AE oneAPI DPC++/C++ Compiler\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file: \n        - dpcpp-cpp-rt/info/licenses/license.txt\n        - dpcpp-cpp-rt/info/licenses/tpp.txt\n      description: |\n        Runtime for Intel\u00AE oneAPI DPC++/C++ Compiler.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 $PREFIX/lib/*  # [unix]\n        - dir %PREFIX%\\Library\\bin\\*  # [win]\n\n  - name: dpcpp_impl_{{ target_platform }}\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    build:\n      skip: True  # [not (linux64 or win64)]\n      run_exports:\n        # 1. strong so if gets added if this package is in the build requirement section.\n        # 2. Pin to year for now, similar to MKL.\n        strong:\n          - {{ pin_subpackage(\"dpcpp-cpp-rt\", max_pin=\"x\") }}\n          - __glibc >=2.17,<3.0.a0  # [linux64]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - zlib\n        - libxml2\n        - ocl-icd  # [linux]\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}\n        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends\n        # on llvm openmp instead of gnu\n        - _openmp_mutex * *_llvm   # [linux]\n        - llvm-openmp              # [not linux]\n      run:\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}\n        - sysroot_linux-64 2.17  # [linux64]\n\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html\n      summary: Implementation for Intel\u00AE oneAPI DPC++/C++ Compiler\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file: \n        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]\n        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]\n      description: |\n        Implementation for Intel\u00AE oneAPI DPC++/C++ Compiler.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 ${PREFIX}/bin/*         # [unix]\n        - ls -A1 ${PREFIX}/include/*     # [unix]\n        - ls -A1 ${PREFIX}/lib/*         # [unix]\n        - dir %PREFIX%\\Library\\bin\\*  # [win]\n        - dir %PREFIX%\\Library\\lib\\*  # [win]\n\n  - name: dpcpp_{{ target_platform }}\n    script: repack.sh   # [unix]\n    script: repack.bat  # [win]\n    build:\n      skip: True  # [not (linux64 or win64)]\n      run_exports:\n        # 1. strong so if gets added if this package is in the build requirement section.\n        # 2. Pin to year for now, similar to MKL.\n        strong:\n          - {{ pin_subpackage(\"dpcpp-cpp-rt\", max_pin=\"x\") }}\n          - __glibc >=2.17,<3.0.a0  # [linux64]\n    requirements:   # [linux64 or win64]\n      run:          # [linux64 or win64]\n        - {{ pin_subpackage('dpcpp_impl_linux-64', exact=True) }}  # [linux64]\n        - {{ pin_subpackage('dpcpp_impl_win-64', exact=True) }}    # [win64]\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-compiler.html\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top.html\n      summary: Implementation for Intel\u00AE oneAPI DPC++/C++ Compiler\n      license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n      license_family: Proprietary\n      license_file:                                                   # [linux64 or win64]\n        - dpcpp_impl_{{ target_platform }}/info/licenses/license.txt  # [linux64 or win64]\n        - dpcpp_impl_{{ target_platform }}/info/licenses/tpp.txt      # [linux64 or win64]\n      description: |\n        Activation for Intel\u00AE oneAPI DPC++/C++ Compiler.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      requires:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      files:\n        - simple.cpp\n      commands:\n        - ls -A1 ${PREFIX}/bin/*         # [unix]\n        - ls -A1 ${PREFIX}/include/*     # [unix]\n        - ls -A1 ${PREFIX}/lib/*         # [unix]\n        - dir %PREFIX%\\Library\\bin\\*  # [win]\n        - dir %PREFIX%\\Library\\lib\\*  # [win]\n        - icpx -fsycl --gcc-toolchain=$PREFIX --sysroot=$PREFIX/$HOST/sysroot -target $HOST ${LDFLAGS} ${CXXFLAGS} simple.cpp -lpthread -o simple.exe  # [unix]\n        - icpx -fsycl simple.cpp -o simple.exe  # [win]\n\n  - name: oneccl-devel\n    version: {{ oneccl_version }}\n    script: repack.sh   # [unix]\n    build:\n      number: {{ oneccl_build_number|int + dst_build_number|int }}\n      skip: True  # [not linux64]\n      missing_dso_whitelist:\n        - '**/libfabric.so.1'\n        - '**/libze_loader.so.1'\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n      host:\n        - mpich                    # [linux]\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}\n        # FIXME due to a conda-build bug, we need to tell conda-build that dpcpp-cpp-rt depends\n        # on llvm openmp instead of gnu\n        - _openmp_mutex * *_llvm   # [linux]\n        - llvm-openmp              # [not linux]\n      run:\n        - {{ pin_subpackage('intel-cmplr-lib-rt', exact=True) }}\n        - {{ pin_subpackage('dpcpp-cpp-rt', exact=True) }}\n    about:\n      home: https://software.intel.com/content/www/us/en/develop/tools.html\n      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/oneccl.htm\n      dev_url: https://software.intel.com/content/www/us/en/develop/documentation/oneccl-developer-guide-and-reference/top.html\n      summary: Intel\u00AE oneAPI Collective Communications Library*\n      license: LicenseRef-Proprietary-Intel-Simplified-Software-License\n      license_family: Proprietary\n      license_file: \n        - oneccl-devel/info/licenses/license.txt\n        - oneccl-devel/info/licenses/tpp.txt\n      description: |\n        Intel\u00AE oneAPI Collective Communications Library*.\n        This package is a repackaged set of binaries obtained directly from Intel's Anaconda.org channel.\n    test:\n      commands:\n        - ls -A1 $PREFIX/lib/*  # [unix]\n\nabout:\n  home: https://github.com/AnacondaRecipes/intel-compilers-repack-feedstock\n  license: LicenseRef-Proprietary-Intel-End-User-License-Agreement-for-Developer-Tools\n  license_family: Proprietary\n  summary: 'Repackaged Intel\u00AE compilers and runtimes.'\n\nextra:\n  recipe-maintainers:\n    - napetrov\n    - tomashek\n    - oleksandr-pavlyk\n",
 "smithy_version": "3.22.1",
 "strong_exports": true,
 "url": "https://anaconda.org/intel/intel-cmplr-lic-rt/2023.0.0/download/linux-64/intel-cmplr-lic-rt-2023.0.0-intel_25922.tar.bz2",
 "version": "2023.0.0"
}