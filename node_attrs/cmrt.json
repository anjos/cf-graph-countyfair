{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/244574348.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "compiler_stack": "comp7",
  "max_py_ver": "37",
  "max_r_ver": "35"
 },
 "feedstock_name": "cmrt",
 "hash_type": "sha256",
 "name": "cmrt",
 "new_version": "1.0.6",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cmrt"
  ]
 },
 "pinning_version": "2019.01.09",
 "raw_meta_yaml": "{% set name = \"cmrt\" %}\n{% set version = \"1.0.6\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/intel/{{ name }}/archive/{{ version }}.tar.gz\n  fn: cmrt-{{ version }}.tar.gz\n  sha256: ca22e905a2717fc740e703e65a0061a0e11f4ea513ba970bbc10b3bd6d28e6e0\n\nbuild:\n  skip: True  # [not linux]\n  number: 1002\n  # https://github.com/intel/cmrt/blob/master/NEWS\n  run_exports:\n    - {{ pin_subpackage('cmrt', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - autoconf\n    - automake\n    - libtool\n    - pkg-config\n  host:\n    - libdrm\n    - libva\n\ntest:\n  commands:\n    - test -f $PREFIX/include/cm_rt.h\n    - test -f $PREFIX/include/cm_rt_linux.h\n\nabout:\n  home: https://github.com/intel/cmrt\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Media GPU kernel manager for Intel G45 & HD Graphics family'\n  description: |\n    One solution to expose Intel\u2019s Gen GPU\u2019s high performance through high\n    level language.\n\nextra:\n  recipe-maintainers:\n    - hmaarrfk\n",
 "smithy_version": "3.2.2",
 "strong_exports": false,
 "url": "https://github.com/intel/cmrt/archive/1.0.6.tar.gz",
 "version": "1.0.6"
}