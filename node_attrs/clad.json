{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/656836931.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/713000914.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "clad",
 "hash_type": "sha256",
 "name": "clad",
 "new_version": "0.9",
 "new_version_attempts": {
  "0.8": 1,
  "0.9": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "clad"
  ]
 },
 "pinning_version": "2021.08.14.10.30.44",
 "raw_meta_yaml": "{% set name = \"clad\" %}\n{% set version = \"0.9\" %}\n{% set build_number = 1 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/vgvassilev/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 0876cd1d00eb222f39b34b1db3dc5f9b873b7a26af01e98bf5fb1950670583d2\n  folder: source\n\nbuild:\n  number: {{ build_number }}\n  string: clang{{ (clangdev or \"None\").split(\".\")[0] }}_h{{ PKG_HASH }}_{{ build_number }}\n\nrequirements:\n  build:\n    - cmake\n    - make   # [unix]\n    - ninja  # [win]\n    - {{ compiler('cxx') }}\n    - sed    # [unix]\n  host:\n    # LLVM was split into multiple outputs as part of the 8.x update\n    - llvm  # [llvmdev not in (\"5.*\", \"6.*\", \"7.*\")]\n    - llvmdev\n    - clangdev\n  run_constrained:\n    - cling ==9999999999  # [clangdev != \"5.*\"]\n    - cling 0.8           # [clangdev == \"5.*\"]\n\ntest:\n  requires:                # [clangdev == \"5.*\" and not win]\n    - jupyter_kernel_test  # [clangdev == \"5.*\" and not win]\n    - xeus-cling           # [clangdev == \"5.*\" and not win]\n  files:\n    - $RECIPE_DIR/jupyter_Clad_kernel_test.py\n  commands:\n    - python $RECIPE_DIR/jupyter_Clad_kernel_test.py  # [clangdev == \"5.*\" and not win]\n    - test -f $PREFIX/lib/clad${SHLIB_EXT}  # [unix]\n    - test -f $PREFIX/lib/libcladDifferentiator.a  # [unix]\n    - test -f $PREFIX/lib/libcladPlugin.a  # [unix]\n    # - if not exist %LIBRARY_BIN%\\\\clad.dll exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\\\cladDifferentiator.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\\\cladPlugin.lib exit 1  # [win]\n\nabout:\n  home: https://github.com/vgvassilev/clad\n  license: LGPL-2.0-or-later\n  license_family: LGPL\n  license_file: source/License.txt\n  summary: clad -- automatic differentiation for C/C++\n  description: |\n    Clad enables automatic differentiation (AD) for C++. It is based on LLVM\n    compiler infrastructure and is a plugin for Clang compiler.\n  doc_url: https://github.com/vgvassilev/clad/blob/master/README.md\n  dev_url: https://github.com/vgvassilev/clad/wiki\n\nextra:\n  recipe-maintainers:\n    - ioanaif\n    - vgvassilev\n    - oshadura",
 "smithy_version": "3.12",
 "strong_exports": false,
 "url": "https://github.com/vgvassilev/clad/archive/v0.9.tar.gz",
 "version": "0.9"
}