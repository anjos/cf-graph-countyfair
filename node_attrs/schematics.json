{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/714636115.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "schematics",
 "hash_type": "sha256",
 "name": "schematics",
 "new_version": "2.1.1",
 "new_version_attempts": {
  "2.1.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "schematics"
  ]
 },
 "pinning_version": "2021.08.17.12.40.09",
 "raw_meta_yaml": "{% set name = \"schematics\" %}\n{% set version = \"2.1.0\" %}\n{% set sha256 = \"a40b20635c0e43d18d3aff76220f6cd95ea4decb3f37765e49529b17d81b0439\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  build:\n    - python\n    - setuptools\n    - pip\n  run:\n    - python\n\ntest:\n  imports:\n    - schematics\n    - schematics.types\n    - schematics.contrib\n\nabout:\n  home: https://github.com/schematics/schematics\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'Python Data Structures for Humans'\n  doc_url: https://schematics.readthedocs.io/en/latest/\n  dev_url: https://github.com/schematics/schematics\n  description: |\n    Schematics is a Python library to combine types into structures, validate them, and transform the shapes of your data based on simple descriptions.\n    \n    The internals are similar to ORM type systems, but there is no database layer in Schematics. Instead, we believe that building a database layer is made significantly easier when Schematics handles everything but writing the query.\n    \n    Further, it can be used for a range of tasks where having a database involved may not make sense.\n\n  \nextra:\n  recipe-maintainers:\n    - meatz\n    - birnbaum\n    - mathiaseitz\n",
 "smithy_version": "3.12",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/s/schematics/schematics-2.1.0.tar.gz",
 "version": "2.1.0"
}