{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/211841833.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/249858462.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/466342519.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/891463483.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.12"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "zlib",
 "hash_type": "sha256",
 "name": "zlib-split",
 "new_version": "1.2.12",
 "new_version_attempts": {
  "1.2.12": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libzlib",
   "libzlib-wapi",
   "zlib",
   "zlib-split",
   "zlib-wapi"
  ]
 },
 "pinning_version": "2022.03.25.20.30.42",
 "raw_meta_yaml": "{% set version = \"1.2.12\" %}\n{% set build_num = 2 %}\n\npackage:\n  name: zlib-split\n  version: {{ version }}\n\nsource:\n  url:\n    - http://zlib.net/zlib-{{ version }}.tar.gz\n    - https://gnupg.org/ftp/gcrypt/zlib/zlib-{{ version }}.tar.gz\n  sha256: 91844808532e5ce316b3c010929493c0244f3d37593afd6de04f71821d5136d9\n\nbuild:\n  number: {{ build_num }}\n\nrequirements:\n  build:\n    - cmake                 # [win]\n    - msinttypes              # [win and vc<14]\n    # compiler on osx depends on zlib itself. Use the bootstrap compiler instead on osx\n    - {{ compiler('c') }}\n    - make                  # [unix]\n  run:\n\noutputs:\n  - name: libzlib\n    build:\n      run_exports:\n        # mostly OK, but some scary symbol removal.  Let's try for trusting them.\n        #  https://abi-laboratory.pro/tracker/timeline/zlib/\n        - {{ pin_subpackage('libzlib', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n      host:\n      run:\n      run_constrained:\n        - zlib {{ version }} *_{{ build_num }}\n    files:\n      - lib/libz.so.*          # [linux]\n      - lib/libz.*.dylib       # [osx]\n      - Library/bin/zlib.dll   # [win]\n      - zlib.dll               # [win]\n    test:\n      commands:\n        - test ! -f ${PREFIX}/lib/libz.a            # [unix]\n        - test ! -f ${PREFIX}/lib/libz${SHLIB_EXT}  # [unix]\n        - test ! -f ${PREFIX}/include/zlib.h        # [unix]\n        - if not exist %LIBRARY_BIN%\\zlib.dll exit 1  # [win]\n        - if not exist %PREFIX%\\zlib.dll exit 1  # [win]\n\n  - name: libzlib-wapi\n    build:\n      skip: True   # [not win]\n      run_exports:\n        - {{ pin_subpackage('libzlib-wapi', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n      host:\n      run:\n      run_constrained:\n        - zlib {{ version }} *_{{ build_num }}\n        - zlib-wapi {{ version }} *_{{ build_num }}\n    files:\n      - Library/bin/zlibwapi.dll   # [win]\n    test:\n      commands:\n        - if not exist \"%LIBRARY_BIN%\\zlibwapi.dll\" exit 1   # [win]\n\n  - name: zlib\n    build:\n      run_exports:\n        # mostly OK, but some scary symbol removal.  Let's try for trusting them.\n        #  https://abi-laboratory.pro/tracker/timeline/zlib/\n        - {{ pin_subpackage('libzlib', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n      host:\n        - {{ pin_subpackage('libzlib', exact=True) }}\n      run:\n        - {{ pin_subpackage('libzlib', exact=True) }}\n    files:\n      - lib/libz.so            # [linux]\n      - lib/libz.dylib         # [osx]\n      - include                # [unix]\n      - lib/pkgconfig          # [unix]\n      - lib/libz.a             # [unix]\n      - Library/include        # [win]\n      - Library/share          # [win]\n      - Library/lib            # [win]\n      - Library/lib/pkgconfig  # [win]\n    test:\n      requires:\n        - {{ compiler('c') }}\n      files:\n        - test_compile_flags.bat\n        - test_compile_flags.c\n      commands:\n        - test -f ${PREFIX}/lib/libz.a            # [unix]\n        - test -f ${PREFIX}/lib/libz${SHLIB_EXT}  # [unix]\n        - test -f ${PREFIX}/include/zlib.h        # [unix]\n        - if not exist %LIBRARY_LIB%\\zlibstatic.lib exit 1     # [win]\n        - if not exist %LIBRARY_LIB%\\zlib.lib exit 1           # [win]\n        - if not exist %LIBRARY_LIB%\\pkgconfig\\zlib.pc exit 1  # [win]\n        - if not exist %LIBRARY_INC%\\zlib.h exit 1             # [win]\n        - call test_compile_flags.bat  # [win]\n\n  - name: zlib-wapi\n    build:\n      skip: True   # [not win]\n      run_exports:\n        - {{ pin_subpackage('libzlib-wapi', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n      host:\n        - {{ pin_subpackage('libzlib-wapi', exact=True) }}\n        - {{ pin_subpackage('zlib', exact=True) }}\n      run:\n        - {{ pin_subpackage('libzlib-wapi', exact=True) }}\n        - {{ pin_subpackage('zlib', exact=True) }}\n    files:\n      - Library/lib/zlibwapi.lib   # [win]\n      - Library/include/zlib.h         # [win]\n    test:\n      requires:\n        - {{ compiler('c') }}\n      files:\n        - test_compile_flags.bat\n        - test_compile_flags.c\n      commands:\n        - if not exist %LIBRARY_LIB%\\zlibwapi.lib exit 1   # [win]\n        - if not exist %LIBRARY_INC%\\zlib.h exit 1         # [win]\n        - call test_compile_flags.bat \"wapi\"  # [win]\n\nabout:\n  home: http://zlib.net/\n  # http://zlib.net/zlib_license.html\n  license: Zlib\n  summary: Massively spiffy yet delicately unobtrusive compression library\n  license_family: Other\n  license_file: license.txt\n  description: |\n    zlib is designed to be a free, general-purpose, lossless data-compression\n    library for use on virtually any computer hardware and operating system.\n  doc_url: http://zlib.net/manual.html\n  dev_url: https://github.com/madler/zlib\n\nextra:\n  recipe-maintainers:\n    - groutr\n    - msarahan\n    - ocefpaf\n    - isuruf\n  feedstock-name: zlib\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": [
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz",
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz",
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz",
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz",
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz",
  "http://zlib.net/zlib-1.2.12.tar.gz",
  "https://gnupg.org/ftp/gcrypt/zlib/zlib-1.2.12.tar.gz"
 ],
 "version": "1.2.12"
}