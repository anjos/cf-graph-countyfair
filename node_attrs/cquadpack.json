{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/215298369.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "compiler_stack": "comp7",
  "max_py_ver": "37",
  "max_r_ver": "35"
 },
 "feedstock_name": "cquadpack",
 "hash_type": "sha256",
 "name": "cquadpack",
 "new_version": "1.1.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cquadpack"
  ]
 },
 "pinning_version": "2018.09.11",
 "raw_meta_yaml": "{% set name = \"cquadpack\" %}\n{% set version = \"1.1.1\" %}\n{% set sha256 = \"e193023a33b6b6d86d92935ddce4f1b7efe35e259e06c88bd45e20d7e896ae38\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: v{{ version }}.tar.gz\n  url: https://github.com/ESSS/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 1000\n  skip: True  # [osx]\n\nrequirements:\n  build:\n    - cmake\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n  run:\n\ntest:\n  commands:\n    - test -f $PREFIX/include/cquadpack.h  # [unix]\n    - if not exist %LIBRARY_INC%\\cquadpack.h exit 1  # [win]\n\nabout:\n  home: https://github.com/ESSS/cquadpack\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'A complete port of the QUADPACK Fortran codes to C'\n\n  description: |\n    Unlike ports created by translators, this port reimplements the algorithms to\n    take advantage of C program structure and dynamic memory. Every effort has been\n    made to leave the low level code intact, except where some opportunity to convert\n    from unstructured blocks to more structured form was taken.\n  dev_url: https://github.com/ESSS/cquadpack\n\nextra:\n  recipe-maintainers:\n    - edisongustavo\n",
 "smithy_version": "3.1.12",
 "strong_exports": false,
 "url": "https://github.com/ESSS/cquadpack/archive/v1.1.1.tar.gz",
 "version": "1.1.1"
}