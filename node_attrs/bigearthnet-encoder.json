{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/938676349.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/939783902.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "bigearthnet-encoder",
 "hash_type": "sha256",
 "name": "bigearthnet-encoder",
 "new_version": "0.2.1",
 "new_version_attempts": {
  "0.2.0": 1,
  "0.2.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "bigearthnet-encoder"
  ]
 },
 "pinning_version": "2022.05.18.07.20.58",
 "raw_meta_yaml": "{% set name = \"bigearthnet-encoder\" %}\n{% set version = \"0.2.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/bigearthnet_encoder-{{ version }}.tar.gz\n  sha256: 6698da05574d88aacf5d90dba01c00fc5edc7417933c7416b2b9afda8aac0888\n\nbuild:\n  entry_points:\n    - ben_encoder = bigearthnet_encoder.encoder:encoder_cli\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n  number: 0\n\nrequirements:\n  host:\n    - pip\n    - poetry\n    - python >=3.6,<3.11\n  run:\n    - bigearthnet-common >=2,<3\n    - bigearthnet-patch-interface >=0.1,<0.2\n    - fastcore >=1.3.27,<2.0.0\n    - python-lmdb >=1.3.0,<2.0.0\n    - numpy >=1.19,<2.0\n    - pandas >=1.3.5,<2.0.0\n    - pydantic >=1.9.0,<2.0.0\n    - python >=3.6,<3.11\n    - rasterio >=1.2.10,<2.0.0\n    - rich >=10,<14\n    - rich-click >=1.3.2,<2.0.0\n\ntest:\n  imports:\n    - bigearthnet_encoder\n  commands:\n    - pip check\n    - ben_encoder --help\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/kai-tub/bigearthnet_encoder/\n  summary: A flexible BigEarthNet encoder that allows one to quickly convert BigEarthNet to a DL-optimization data format.\n  license: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - kai-tub\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/b/bigearthnet-encoder/bigearthnet_encoder-0.2.1.tar.gz",
 "version": "0.2.1"
}