{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/457798355.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/688896585.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "caterva",
 "hash_type": "sha256",
 "name": "caterva",
 "new_version": "0.5.0",
 "new_version_attempts": {
  "0.4.0": 1,
  "0.5.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "caterva"
  ]
 },
 "pinning_version": "2021.07.11.12.10.29",
 "raw_meta_yaml": "{% set name = \"caterva\" %}\n{% set version = \"0.3.3\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/Blosc/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 916387022b1bfe12268eb8362f631dc0da289b1470d941b7c2ff163172f2eb1f\n  patches:\n    # Patches that must be consolidated in upstream\n    - caterva.patch\n\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage('caterva') }}\n  # TODO: Remove once there is a stable 2.x release of c-blosc2\n  ignore_run_exports:\n    - c-blosc2\n\nrequirements:\n  build:\n    - cmake\n    - make  # [unix]\n    - {{ compiler('c') }}\n  host:\n    - c-blosc2\n  run:\n    - c-blosc2\n\ntest:\n  commands:\n    - test -e $PREFIX/include/{{ name }}.h                   # [unix]\n    - test -e $PREFIX/lib/lib{{ name }}${SHLIB_EXT}          # [unix]\n    - if not exist %LIBRARY_INC%\\{{ name }}.h exit 1         # [win]\n    - if not exist %LIBRARY_BIN%\\{{ name }}.dll exit 1       # [win]\n    - if not exist %LIBRARY_LIB%\\lib{{ name }}.lib exit 1    # [win]\n\nabout:\n  home: https://github.com/Blosc/{{ name }}\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'A multidimensional data container on top of Blosc2'\n\n  description: |\n      Caterva is a C library for handling multi-dimensional, compressed datasets in an easy and convenient manner. It implements a thin metalayer on top of C-Blosc2 for specifying not only the dimensionality of a dataset, but also the dimensionality of the chunks inside the dataset. In addition, Caterva adds machinery for retrieving arbitrary multi-dimensional slices (aka hyper-slices) out of the multi-dimensional containers in the most efficient way. Hence, Caterva brings the convenience of multi-dimensional and compressed containers to your application very easily.\n\nextra:\n  recipe-maintainers:\n    - FrancescAlted\n    - aleix11alcacer\n",
 "smithy_version": "3.10.3",
 "strong_exports": false,
 "url": "https://github.com/Blosc/caterva/archive/v0.3.3.tar.gz",
 "version": "0.3.3"
}