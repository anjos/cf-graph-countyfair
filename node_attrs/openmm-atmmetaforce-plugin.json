{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/968714780.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/971122199.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "openmm-atmmetaforce-plugin",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
   "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
   "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
   "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
   "license": "LGPL-2.0-only",
   "license_family": "LGPL",
   "license_file": [
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE"
   ],
   "summary": "The Alchemical Transfer Method Plugin for OpenMM"
  },
  "build": {
   "number": "0",
   "run_exports": [
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc"
   ]
  },
  "package": {
   "name": "openmm-atmmetaforce-plugin",
   "version": "0.3.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig"
   ],
   "host": [
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml"
   ],
   "run": [
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm"
   ]
  },
  "source": {
   "sha256": "9404a368c0d7b3e131904f23146b405c7913ede8009ef0584246ae7c889d2652",
   "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h"
   ],
   "imports": [
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy"
   ],
   "requires": [
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "swig"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "lxml",
    "openmm",
    "pthread-stubs",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pocl"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\nof absolute and relative binding free energies of molecular complexes\nin OpenMM, a high performance toolkit for molecular simulation.\n",
   "dev_url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
   "doc_url": "https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples",
   "home": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git",
   "license": "LGPL-2.0-only",
   "license_family": "LGPL",
   "license_file": [
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE",
    "LICENSE"
   ],
   "summary": "The Alchemical Transfer Method Plugin for OpenMM"
  },
  "build": {
   "number": "0",
   "run_exports": [
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin",
    "openmm-atmmetaforce-plugin"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc",
    "egallicc"
   ]
  },
  "package": {
   "name": "openmm-atmmetaforce-plugin",
   "version": "0.3.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "swig"
   ],
   "host": [
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml",
    "python",
    "openmm",
    "pthread-stubs",
    "lxml"
   ],
   "run": [
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm",
    "python",
    "numpy",
    "openmm"
   ]
  },
  "source": {
   "sha256": "9404a368c0d7b3e131904f23146b405c7913ede8009ef0584246ae7c889d2652",
   "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h",
    "pip check",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT",
    "test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT",
    "test -f $PREFIX/include/ATMMetaForce.h",
    "test -f $PREFIX/include/internal/ATMMetaForceImpl.h"
   ],
   "imports": [
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy",
    "simtk",
    "openmm",
    "numpy"
   ],
   "requires": [
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip",
    "pocl",
    "pip"
   ]
  }
 },
 "name": "openmm-atmmetaforce-plugin",
 "new_version": "0.3.1",
 "new_version_attempts": {
  "0.3.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmm-atmmetaforce-plugin"
  ]
 },
 "pinning_version": "2022.06.17.10.28.32",
 "pre_pr_migrator_attempts": {
  "pypy38": 3,
  "python311": 14
 },
 "pre_pr_migrator_status": {
  "pypy38": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3942578244\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "python311": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3944305349\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set name = \"openmm-atmmetaforce-plugin\" %}\n{% set version = \"0.3.1\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/Gallicchio-Lab/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 9404a368c0d7b3e131904f23146b405c7913ede8009ef0584246ae7c889d2652\n\nbuild:\n  number: 0\n  skip: true  # [not linux64]\n  skip: true  # [cuda_compiler_version in (undefined, 'None')]\n  run_exports:\n    # TODO: Relax max_pin at version 1.0 / stable API\n    - {{ pin_subpackage(name, max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [linux]\n    - cmake\n    - swig\n\n  host:\n    - python\n    - openmm\n    - pthread-stubs\n    - lxml\n\n  run:\n    - python\n    - numpy\n    # openmm package is missing a run_export as of 9 June 2022\n    - {{ pin_compatible('openmm') }}\n\ntest:\n  requires:\n    - pocl  # [unix]\n    - pip\n  imports:\n    - simtk\n    - openmm\n    - numpy\n  commands:\n    - pip check\n    - test -f $PREFIX/lib/plugins/libATMMetaForcePluginCUDA$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libATMMetaForcePluginOpenCL$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/lib/plugins/libATMMetaForcePluginReference$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/include/ATMMetaForce.h  # [unix]\n    - test -f $PREFIX/include/internal/ATMMetaForceImpl.h  # [unix]\n\nabout:\n  home: https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git\n  license: LGPL-2.0-only\n  license_family: LGPL\n  license_file:\n    - LICENSE\n  summary: The Alchemical Transfer Method Plugin for OpenMM\n  description: |\n    This plugin implements the Alchemical Transfer Potential (ATM) for the calculation\n    of absolute and relative binding free energies of molecular complexes\n    in OpenMM, a high performance toolkit for molecular simulation.\n  doc_url: https://github.com/Gallicchio-Lab/async_re-openmm/tree/master/examples\n  dev_url: https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin.git\n\nextra:\n  recipe-maintainers:\n    - egallicc\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "lxml",
   "numpy",
   "openmm",
   "pthread-stubs",
   "python",
   "swig"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "swig"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "lxml",
    "openmm",
    "pthread-stubs",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "numpy",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pocl"
   ]
  }
 },
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "swig"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "lxml",
    "openmm",
    "pthread-stubs",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "openmm",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pocl"
   ]
  }
 },
 "url": "https://github.com/Gallicchio-Lab/openmm-atmmetaforce-plugin/archive/refs/tags/v0.3.1.tar.gz",
 "version": "0.3.1"
}