{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/342345726.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/346771098.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/353510535.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/370928582.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/413067636.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/418632636.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/440844549.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51106"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/452347934.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/474904630.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501960936.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/540197998.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/587803902.json"
   },
   "data": {
    "bot_rerun": 1622043420.5804002,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/653943576.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/664515079.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/682667765.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/685185270.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": {
  "exception": "HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=15)",
  "traceback": [
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 445, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 440, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 1371, in getresponse",
   "    response.begin()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 319, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 280, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into",
   "    return self.read(nbytes, buffer)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read",
   "    return self._sslobj.read(len, buffer)",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 439, in send",
   "    resp = conn.urlopen(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 755, in urlopen",
   "    retries = retries.increment(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 532, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 770, in reraise",
   "    raise value",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 699, in urlopen",
   "    httplib_response = self._make_request(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 447, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout",
   "    raise ReadTimeoutError(",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=15)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1175, in main",
   "    migrator_uid, pr_json = run(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 171, in run",
   "    feedstock_dir, repo = get_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 305, in get_repo",
   "    _sync_default_branches(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 328, in _sync_default_branches",
   "    forked_default_branch = gh.get_repo(f\"{forked_user}/{reponame}\").default_branch",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/MainClass.py\", line 330, in get_repo",
   "    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 354, in requestJsonAndCheck",
   "    *self.requestJson(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 454, in requestJson",
   "    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 528, in __requestEncode",
   "    status, responseHeaders, output = self.__requestRaw(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 555, in __requestRaw",
   "    response = cnx.getresponse()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 127, in getresponse",
   "    r = verb(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 555, in get",
   "    return self.request('GET', url, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 529, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=15)",
   ""
  ]
 },
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "hdf5plugin",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=False",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=False",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "hdf5plugin",
 "new_version": "3.1.1",
 "new_version_attempts": {
  "2.2.0": 1,
  "2.3.0": 1,
  "2.3.1": 1,
  "2.3.2": 1,
  "3.0.0": 1,
  "3.1.0": 1,
  "3.1.1": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=False",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=False",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "hdf5plugin"
  ]
 },
 "pinning_version": "2021.07.07.10.15.37",
 "pre_pr_migrator_status": {
  "hdf51121": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1255185413\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 445, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 440, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 1371, in getresponse\n    response.begin()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 319, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 280, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nsocket.timeout: The read operation timed out\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 439, in send\n    resp = conn.urlopen(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 755, in urlopen\n    retries = retries.increment(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 532, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 770, in reraise\n    raise value\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 699, in urlopen\n    httplib_response = self._make_request(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 447, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 336, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=15)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1175, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 171, in run\n    feedstock_dir, repo = get_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 305, in get_repo\n    _sync_default_branches(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 328, in _sync_default_branches\n    forked_default_branch = gh.get_repo(f\"{forked_user}/{reponame}\").default_branch\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/MainClass.py\", line 330, in get_repo\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", url)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 354, in requestJsonAndCheck\n    *self.requestJson(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 454, in requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 528, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 555, in __requestRaw\n    response = cnx.getresponse()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github/Requester.py\", line 127, in getresponse\n    r = verb(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 555, in get\n    return self.request('GET', url, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 542, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 655, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 529, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=15)\n"
 },
 "raw_meta_yaml": "{% set name = \"hdf5plugin\" %}\n{% set version = \"3.1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f\n\nbuild:\n  number: 0\n  script_env:\n    - HDF5PLUGIN_SSE2=True  # [x86 or ppc64le]\n    - HDF5PLUGIN_SSE2=False  # [not x86 and not ppc64le]\n    - HDF5PLUGIN_NATIVE=False\n    - HDF5PLUGIN_AVX2=False\n    - HDF5PLUGIN_OPENMP=False\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler(\"c\") }}\n    - {{ compiler('cxx') }}\n  host:\n    - pip\n    - python\n    - setuptools\n    - hdf5\n  run:\n    - h5py\n    - python\n\ntest:\n  imports:\n    - hdf5plugin\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/silx-kit/hdf5plugin\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: HDF5 Plugins for windows, MacOS, and linux\n\nextra:\n  recipe-maintainers:\n    - tschoonj\n    - t20100\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cxx_compiler_stub",
   "h5py",
   "hdf5",
   "pip",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.10.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz",
 "version": "3.1.1",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/silx-kit/hdf5plugin",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "HDF5 Plugins for windows, MacOS, and linux"
  },
  "build": {
   "number": "0",
   "script_env": [
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False",
    "HDF5PLUGIN_SSE2=True",
    "HDF5PLUGIN_NATIVE=False",
    "HDF5PLUGIN_AVX2=False",
    "HDF5PLUGIN_OPENMP=False"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100",
    "tschoonj",
    "t20100"
   ]
  },
  "package": {
   "name": "hdf5plugin",
   "version": "3.1.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5",
    "pip",
    "python",
    "setuptools",
    "hdf5"
   ],
   "run": [
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python",
    "h5py",
    "python"
   ]
  },
  "source": {
   "sha256": "4600dbdbed8b5f8afe81f086b0ee256ca1aea47a17e5431ddd2f136510a9e02f",
   "url": "https://pypi.io/packages/source/h/hdf5plugin/hdf5plugin-3.1.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin",
    "hdf5plugin"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "h5py",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}