{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/244574434.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/262315678.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "BlasRebuild",
    "migrator_version": 0,
    "name": "blas2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/272580002.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "lz4-c-1.8.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/273075633.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_object_version": 3,
    "migrator_version": 0,
    "name": "OpenSSL"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/273673904.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "qt-5.9.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/283172172.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6-19-01"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/289317541.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "gsl-2.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/297351895.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "cfitsio-3.470"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/301704013.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "graphviz-2.40"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/305699293.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "qt-5.12"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/308388665.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "GFortranOSXRebuild",
    "migrator_version": 0,
    "name": "fortran_compiler_stub-7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/337024430.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/343752060.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libtiff-4.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/359278188.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "giflib52"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/361522023.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6-19-02"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/371523785.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gsl26"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/26a440c5-1e4e-43a7-abf6-bf72c46065c0.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "glew210"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/401537197.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "lz4_c192"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/405142428.json"
   },
   "data": {
    "bot_rerun": 1587474854.3054726,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "krb51171"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/11c2517d-beef-4233-bca0-46826693538f.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "krb51171"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/2d56d514-dd1d-4d07-84b8-2e98db13da7c.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6204"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/434711651.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "xrootd412"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/434894635.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base622"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/445658859.json"
   },
   "data": {
    "bot_rerun": 1597747105.0942972,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "xrootd5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/469409042.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "xrootd5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/499113896.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/531930742.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/581590367.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/582281750.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pcre8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/612032166.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "tbb2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/619582900.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6-25-01"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/647116731.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "zstd15"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_aarch64",
   "linux_ppc64le": "linux_ppc64le",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "root",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub"
   ],
   "host": [
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu"
   ],
   "run_constrained": [
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'"
   ],
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clangdev",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvm",
    "llvmdev",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "libglu",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "sysroot_linux-64",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub"
   ],
   "host": [
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu"
   ],
   "run_constrained": [
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'"
   ],
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clangdev",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvm",
    "llvmdev",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "libglu",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "sysroot_linux-64",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub"
   ],
   "host": [
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu"
   ],
   "run_constrained": [
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'"
   ],
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clangdev",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvm",
    "llvmdev",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "libglu",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "sysroot_linux-64",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch",
    "etc/allDict.cxx.pch",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "etc/allDict.cxx.pch"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "cdt_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make"
   ],
   "host": [
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "sysroot_linux-64",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxpm",
    "xorg-libxft",
    "libglu",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes"
   ],
   "run_constrained": [
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=11.0",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=11.0",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++"
   ],
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "name": "root_base",
 "new_version": "6-25-01",
 "new_version_attempts": {
  "6-23-01": 2000,
  "6-25-01": 58
 },
 "new_version_errors": {
  "6-23-01": "We found a problem parsing the recipe for version '6-23-01': \n\nComposerError('expected a single document in the stream', <ruamel.yaml.error.StringMark object at 0x7f1c34acddd0>, 'but found another document', <ruamel.yaml.error.StringMark object at 0x7f1c471c2190>)\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 472, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 455, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/main.py\", line 343, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/constructor.py\", line 111, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 83, in get_single_node\n    raise ComposerError(\n",
  "6-25-01": "We found a problem parsing the recipe for version '6-25-01': \n\nComposerError('expected a single document in the stream', <ruamel.yaml.error.StringMark object at 0x7f09c06e3200>, 'but found another document', <ruamel.yaml.error.StringMark object at 0x7f09c0130ba0>)\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 472, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 455, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 343, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 111, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 83, in get_single_node\n    raise ComposerError(\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm",
    "lib/*.pcm"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev",
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make"
   ],
   "host": [
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "clangdev 9.0.1 root_62400*",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes"
   ],
   "run_constrained": [
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=10.14",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "echo '.q' | root -e 'sddsa0'"
   ],
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "cfitsio",
    "clangdev",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvm",
    "llvmdev",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "vector-classes",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "ignore_prefix_files": [
    "lib/*.pcm",
    "lib/*.pcm"
   ],
   "ignore_run_exports_from": [
    "clangdev",
    "clangdev"
   ],
   "number": "0",
   "script_env": [
    "ROOT_CONDA_BUILTIN_PYROOT=1",
    "ROOT_CONDA_BUILTIN_PYROOT=1"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "outputs": [
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   },
   {
    "build": {
     "ignore_prefix_files": [
      "lib/*.pcm"
     ],
     "number": "0",
     "run_exports": [
      "root_base"
     ],
     "script": [
      "cd build-dir",
      "make install",
      "rm \"${PREFIX}\"/bin/thisroot.*",
      "for suffix in sh csh fish; do\n  cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n  chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\ndone\n",
      "mkdir -p \"${PREFIX}/etc/conda/activate.d\"",
      "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"",
      "cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"",
      "cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"",
      "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"",
      "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"",
      "cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"",
      "cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\""
     ]
    },
    "name": "root_base"
   },
   {
    "build": {
     "number": "0"
    },
    "name": "root",
    "requirements": {
     "host": [
      "root_base",
      "python"
     ],
     "run": [
      "root_base",
      "python",
      "compilers",
      "metakernel",
      "ipython",
      "notebook",
      "numba"
     ]
    },
    "test": {
     "commands": [
      "ipython -c \"import JsMVA\"",
      "python test_pyroot.py",
      "root -l -b -q -x test.cpp",
      "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
      "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
      "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
      "root -l -b -q -x test.cpp++"
     ],
     "files": [
      "test.cpp",
      "test_pyroot.py"
     ],
     "imports": [
      "ROOT",
      "JupyROOT"
     ]
    }
   }
  ],
  "package": {
   "name": "root_base",
   "version": "6.24.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "git",
    "pkg-config",
    "sed",
    "make"
   ],
   "host": [
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "python",
    "numpy",
    "libblas",
    "libcblas",
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "glew",
    "glib",
    "gl2ps",
    "graphviz",
    "gsl",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "openssl",
    "pcre",
    "pythia8",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vector-classes",
    "vdt",
    "xrootd",
    "xz",
    "libcxx",
    "xxhash",
    "zlib",
    "zstd",
    "python",
    "numpy"
   ],
   "run": [
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes",
    "python",
    "numpy",
    "libcxx",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "xxhash",
    "nlohmann_json",
    "cffi",
    "graphviz",
    "vector-classes"
   ],
   "run_constrained": [
    "__osx >=11.0",
    "numba >=0.52",
    "cling 9999",
    "root5 9999",
    "__osx >=11.0",
    "numba >=0.52",
    "cling 9999",
    "root5 9999"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch"
   ],
   "sha256": "ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz"
  },
  "test": {
   "commands": [
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++",
    "root -l -b -q -x",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e '2+3; 0'",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "thisroot.sh",
    "thisroot.csh",
    "thisroot.fish",
    "root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"",
    "root -l -b -q -x test.cpp++"
   ],
   "files": [
    "test.cpp",
    "test.cpp"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "cfitsio",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "vector-classes",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "root",
   "root_base"
  ]
 },
 "pinning_version": "2021.05.18.06.34.34",
 "pre_pr_migrator_status": {
  "armosxaddition": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/608208260\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1114, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 205, in run\n    migrator.run_post_piggyback_migrations(recipe_dir, feedstock_ctx.attrs, **kwargs)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/core.py\", line 277, in run_post_piggyback_migrations\n    mini_migrator.migrate(recipe_dir, attrs, **kwargs)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/cross_compile.py\", line 41, in migrate\n    cb_work_dir = _get_source_code(recipe_dir)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 648, in _get_source_code\n    return provide(md)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/conda_build/source.py\", line 862, in provide\n    unpack(source_dict, src_dir, metadata.config.src_cache, recipe_path=metadata.path,\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/conda_build/source.py\", line 169, in unpack\n    shutil.move(os.path.join(tmpdir, f), os.path.join(src_dir, f))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/shutil.py\", line 789, in move\n    raise Error(\"Destination path '%s' already exists\" % real_dst)\nshutil.Error: Destination path '/usr/share/miniconda/envs/run_env/conda-bld/root_1614535089751/work/root-source/hist/hist' already exists\n",
  "gsl27": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1143560327\">bot CI job</a>): master: ['linux_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.18python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.18python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_aarch64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.18python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.18python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_ppc64le_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.18python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.18python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'osx_64_numpy1.18python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.18python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.18python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n']",
  "zstd15": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/854120452\">bot CI job</a>): master: ['linux_64_numpy1.17python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.17python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.17python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 2\\n', 'linux_aarch64_numpy1.17python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.17python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.17python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_aarch64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'linux_ppc64le_numpy1.17python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.17python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.17python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'linux_ppc64le_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 0\\n', 'osx_64_numpy1.17python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.17python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.17python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n', 'osx_64_numpy1.19python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides requested libllvm9 9.0.1.* 3\\n']"
 },
 "raw_meta_yaml": "{% set name = \"root\" %}\n{% set tag_name = \"6-24-02\" %}\n{% set version = \".\".join(tag_name.split(\"-\")|map(\"int\")|map(\"string\")) %}\n{% set version = \"6.24.2\" %}\n{% set build_number = 0 %}\n{% set clang_version = \"9.0.1\" %}\n{% set clang_patches_version = \"root_62400\" %}\n\n{% set builtin_pyroot = True %}\n{% set builtin_clang = False %}\n{% set run_gtests = False %}\n\n{%- if \"ROOT_CONDA_IS_CI\" in os.environ %}\n  {%- set version = os.environ[\"ROOT_CONDA_VERSION\"] %}\n  {% set clang_patches_version = \"root_\" + os.environ[\"ROOT_CONDA_GIT_REV\"] %}\n  {% set build_number = os.environ[\"ROOT_CONDA_BUILD_NUMBER\"] %}\n  {% set run_gtests = True %}\n{%- endif %}\n\npackage:\n  name: root_base\n  version: {{ version }}\n\nsource:\n{%- if \"ROOT_CONDA_GIT_REV\" in os.environ %}\n  git_url: {{ os.environ.get(\"ROOT_CONDA_GIT_URL\", \"https://github.com/root-project/root.git\") }}\n  git_rev: {{ os.environ[\"ROOT_CONDA_GIT_REV\"] }}\n{%- else %}\n  url: https://github.com/root-project/root/archive/refs/tags/v{{ tag_name }}.tar.gz\n  sha256: ce12182ab875c302c6ba1ba1f667e93bcbea77c657a2ff4ebf05272073d68726\n{%- endif %}\n  folder: root-source\n  patches:\n    - patches/root-x.xx.xx_cling-runtime-sysroot.patch\n    - patches/root-x.xx.xx-copy-abspath-headers.patch  # [osx]\n    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]\n    - patches/0001-Hacks.patch\n    - patches/0001-Patch-for-apple-silicon.patch\n    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch\n{% if not builtin_pyroot %}\n    - 0001-Support-standalone-pyroot.patch\n{% endif %}\n\nbuild:\n  number: {{ build_number }}\n  skip: True  # [win]\n  ignore_prefix_files:\n    - lib/*.pcm            # [not aarch64]\n    # https://github.com/root-project/root/blob/975be1e7647098ee8db5333f0769fb12287d0f75/cmake/modules/RootBuildOptions.cmake#L328-L332\n    - etc/allDict.cxx.pch  # [aarch64]\n  ignore_run_exports_from:\n    - clangdev\n  script_env:\n    {% if builtin_pyroot %}- ROOT_CONDA_BUILTIN_PYROOT=1 {%- endif %}\n    {% if builtin_clang %}- ROOT_CONDA_BUILTIN_CLANG=1 {%- endif %}\n    {% if run_gtests %}- ROOT_CONDA_RUN_GTESTS=1 {%- endif %}\n    {% if \"ROOT_CONDA_BUILD_TYPE\" in os.environ %}- ROOT_CONDA_BUILD_TYPE {%- endif %}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - git\n    - pkg-config\n    - sed\n    - make\n    # Required for OpenGL support\n    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - {{ cdt('mesa-dri-drivers') }}  # [linux]\n    - {{ cdt('libselinux') }}  # [linux]\n    - {{ cdt('libxdamage') }}  # [linux]\n    - {{ cdt('libxxf86vm') }}  # [linux]\n  host:\n    - libblas\n    - libcblas\n    - {{ compiler('c') }}  # [linux]\n    - {{ compiler('cxx') }}  # [linux]\n    - afterimage\n    - cfitsio\n    - davix\n    - fftw\n    - freetype\n    - ftgl\n    - gdk-pixbuf\n    - giflib\n    - glew\n    - glib\n    - gl2ps\n    - graphviz\n    - gsl\n    - libglu  # [linux]\n    - libpng\n    - librsvg\n    - libtiff\n    - libxml2\n    - lz4-c\n    # - mysql\n    - nlohmann_json\n    - openssl\n    - pcre\n    # - postgresql\n    - pythia8\n    - sqlite\n    - tbb\n    - tbb-devel\n    - vector-classes\n    - vdt\n    - xorg-libx11  # [linux]\n    - xorg-libxau  # [linux]\n    - xorg-libxcursor  # [linux]\n    - xorg-libxext  # [linux]\n    - xorg-libxfixes  # [linux]\n    - xorg-libxft  # [linux]\n    - xorg-libxpm  # [linux]\n    - xrootd\n    - xz\n    # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n    - xxhash\n    - zlib\n    - zstd\n{% if not builtin_clang %}\n    - llvm {{ clang_version }}  # [not (osx and arm64)]\n    - llvmdev {{ clang_version }}  # [not (osx and arm64)]\n    - clangdev {{ clang_version }} {{ clang_patches_version }}*  # [not (osx and arm64)]\n{% endif %}\n{% if builtin_pyroot %}\n    - python\n    - numpy\n{% endif %}\n  run:\n{% if builtin_pyroot %}\n    - python\n    - {{ pin_compatible('numpy') }}\n{% endif %}\n    # FIXME: Required to ensure a consistent etc/allDict.cxx.pch\n    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n    - nlohmann_json\n    - cffi\n    - graphviz\n    - {{ pin_compatible('vector-classes', max_pin='x.x') }}\n    - sysroot_linux-64  # [linux]\n    - xorg-libx11  # [linux]\n    - xorg-libxext  # [linux]\n    - xorg-libxpm  # [linux]\n    - xorg-libxft  # [linux]\n    - libglu  # [linux]\n  run_constrained:\n    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n    # Older numba versions have trouble with how LLVM is linked\n    - numba >=0.52\n    # Items listed here conflict with ROOT\n    - cling 9999\n    - root5 9999\n\ntest:\n  files:\n    - test.cpp\n  commands:\n    - root -l -b -q -x\n    - root -l -b -q -x test.cpp\n    # When testing with -e, explicitly set the return code to zero\n    - root -b -l -q -x -e '2+3; 0'\n    - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n    # Check the thisroot scripts work\n    - thisroot.sh\n    - thisroot.csh\n    - thisroot.fish\n    # Test if OpenGL is working\n    - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'\n    # This test will fail due to lack of graphics support but try it anyway\n    # It should exit with \"TEveException: TEveManager::Create ROOT is running in batch mode.\"\n    - root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true\n    # This tutorial uses davix to access a ROOT file over HTTP\n    - root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"\n    # FIXME: This test fails on ppc64le for some reason...\n    - XrdSecPROTOCOL=unix python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"  # [not ppc64le]\n    # This command only works if the compilers are available\n    - root -l -b -q -x test.cpp++\n    # Ensure exceptions don't cause the interpreter to exit\n    # Expected to fail on apple silicon: https://github.com/root-project/root/issues/7541\n    - echo '.q' | root -e 'sddsa0'  # [not (osx and arm64)]\n\noutputs:\n  - name: root_base\n    build:\n      number: {{ build_number }}\n      run_exports:\n        # https://abi-laboratory.pro/?view=timeline&l=root\n        - {{ pin_subpackage('root_base', max_pin='x.x.x') }}\n      ignore_prefix_files:\n        - lib/*.pcm            # [not aarch64]\n        # https://github.com/root-project/root/blob/975be1e7647098ee8db5333f0769fb12287d0f75/cmake/modules/RootBuildOptions.cmake#L328-L332\n        - etc/allDict.cxx.pch  # [aarch64]\n      script:\n        - cd build-dir\n        - make install\n        # Remove thisroot.*\n        - rm \"${PREFIX}\"/bin/thisroot.*\n        - |\n          for suffix in sh csh fish; do\n            cp \"${RECIPE_DIR}/thisroot\" \"${PREFIX}/bin/thisroot.${suffix}\"\n            chmod +x \"${PREFIX}/bin/thisroot.${suffix}\"\n          done\n        # Add the post activate/deactivate scripts\n        - mkdir -p \"${PREFIX}/etc/conda/activate.d\"\n        - cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/activate-root.sh\"\n        - cp \"${RECIPE_DIR}/activate.csh\" \"${PREFIX}/etc/conda/activate.d/activate-root.csh\"\n        - cp \"${RECIPE_DIR}/activate.fish\" \"${PREFIX}/etc/conda/activate.d/activate-root.fish\"\n        - mkdir -p \"${PREFIX}/etc/conda/deactivate.d\"\n        - cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.sh\"\n        - cp \"${RECIPE_DIR}/deactivate.csh\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.csh\"\n        - cp \"${RECIPE_DIR}/deactivate.fish\" \"${PREFIX}/etc/conda/deactivate.d/deactivate-root.fish\"\n{% if not builtin_pyroot %}\n  - name: pyroot\n    build:\n      number: {{ build_number }}\n      script:\n        - mkdir \"pyroot-$PY_VER-build-dir\"\n        - cd \"pyroot-$PY_VER-build-dir\"\n        - |\n          cmake \\\n            ../root-source/bindings \\\n            -DPython_EXECUTABLE=${PYTHON} \\\n            -DCMAKE_INSTALL_PREFIX=${PREFIX} \\\n            -Ddataframe=ON \\\n            -Dstandalone_pyroot=ON\n        - make -j${CPU_COUNT}\n        - make install\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make\n      host:\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - python\n        - numpy\n        - nlohmann_json\n      run:\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - python\n        - {{ pin_compatible('numpy') }}\n    test:\n      files:\n        - test_pyroot.py\n      imports:\n        - ROOT\n      commands:\n        - python test_pyroot.py\n{% endif %}\n  - name: root\n    build:\n      number: {{ build_number }}\n    requirements:\n      host:\n        - {{ pin_subpackage('root_base', exact=True) }}\n{% if not builtin_pyroot %}\n        - {{ pin_subpackage('pyroot', exact=True) }}\n{% endif %}\n        - python\n      run:\n        - {{ pin_subpackage('root_base', exact=True) }}\n{% if not builtin_pyroot %}\n        - {{ pin_subpackage('pyroot', exact=True) }}\n{% endif %}\n        - python\n        - compilers  # This package is hostile to how conda-build manages compilers\n        - metakernel\n        - ipython\n        - notebook\n        - numba\n    test:\n      files:\n        - test.cpp\n        - test_pyroot.py\n      imports:\n        - ROOT\n        - JupyROOT\n      commands:\n        - ipython -c \"import JsMVA\"\n        - python test_pyroot.py\n        - root -l -b -q -x test.cpp\n        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n        - root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true\n        - root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"\n        - root -l -b -q -x test.cpp++\n{%- if \"ROOT_CONDA_IS_CI\" in os.environ %}\n  - name: root-nightly\n    build:\n      number: {{ build_number }}\n    requirements:\n      host:\n        - {{ pin_subpackage('root', exact=True) }}\n        - python\n      run:\n        - {{ pin_subpackage('root', exact=True) }}\n        - python\n{%- endif %}\n\nabout:\n  home: https://root.cern/\n  license: LGPL-2.1-only\n  license_file: root-source/LICENSE\n  doc_url: https://root.cern/documentation\n  dev_url: https://github.com/root-project/root/\n  summary: |\n      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\n      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\n      languages such as Python and R.\n  description: |\n      Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\n      on. Here are a few things to try:\n\n      * `root`: you can start up a session and see the splash screen; Control-D to exit.\n      * `python` followed by `import ROOT` will load PyROOT.\n      * `root --notebook` will start a notebook server with a ROOT kernel choice.\n      * `rootbrowse` will open a TBrowser session so you can look through files.\n      * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n      * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n      * `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\n      See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\n      The ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n      `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\n      scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\n      There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\n      having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\n      In most cases users should use the `root` package directly, since it adds both of these, along with compilers,\n      Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\n      ROOT was built with and will report `-std=c++17` from `root-config`.\n\nextra:\n  recipe-maintainers:\n    - chrisburr\n    - henryiii\n    - eguiraud\n",
 "req": {
  "__set__": true,
  "elements": [
   "afterimage",
   "c_compiler_stub",
   "cdt_stub",
   "cffi",
   "cfitsio",
   "clangdev",
   "cmake",
   "compilers",
   "cxx_compiler_stub",
   "davix",
   "fftw",
   "freetype",
   "ftgl",
   "gdk-pixbuf",
   "giflib",
   "git",
   "gl2ps",
   "glew",
   "glib",
   "graphviz",
   "gsl",
   "ipython",
   "libblas",
   "libcblas",
   "libcxx",
   "libglu",
   "libpng",
   "librsvg",
   "libtiff",
   "libxml2",
   "llvm",
   "llvmdev",
   "lz4-c",
   "make",
   "metakernel",
   "nlohmann_json",
   "notebook",
   "numba",
   "numpy",
   "openssl",
   "pcre",
   "pkg-config",
   "pythia8",
   "python",
   "root_base",
   "sed",
   "sqlite",
   "sysroot_linux-64",
   "tbb",
   "tbb-devel",
   "vdt",
   "vector-classes",
   "xorg-libx11",
   "xorg-libxau",
   "xorg-libxcursor",
   "xorg-libxext",
   "xorg-libxfixes",
   "xorg-libxft",
   "xorg-libxpm",
   "xrootd",
   "xxhash",
   "xz",
   "zlib",
   "zstd"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clangdev",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "linux-sysroot",
    "llvm",
    "llvmdev",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "libglu",
    "linux-sysroot",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "sysroot_linux-64",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "git",
    "make",
    "pkg-config",
    "sed"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "afterimage",
    "c_compiler_stub",
    "cfitsio",
    "clangdev 9.0.1 root_62400*",
    "cxx_compiler_stub",
    "davix",
    "fftw",
    "freetype",
    "ftgl",
    "gdk-pixbuf",
    "giflib",
    "gl2ps",
    "glew",
    "glib",
    "graphviz",
    "gsl",
    "libblas",
    "libcblas",
    "libcxx",
    "libglu",
    "libpng",
    "librsvg",
    "libtiff",
    "libxml2",
    "llvm 9.0.1",
    "llvmdev 9.0.1",
    "lz4-c",
    "nlohmann_json",
    "numpy",
    "openssl",
    "pcre",
    "pythia8",
    "python",
    "root_base",
    "sqlite",
    "tbb",
    "tbb-devel",
    "vdt",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxau",
    "xorg-libxcursor",
    "xorg-libxext",
    "xorg-libxfixes",
    "xorg-libxft",
    "xorg-libxpm",
    "xrootd",
    "xxhash",
    "xz",
    "zlib",
    "zstd"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "compilers",
    "cxx_compiler_stub",
    "graphviz",
    "ipython",
    "libcxx",
    "libglu",
    "metakernel",
    "nlohmann_json",
    "notebook",
    "numba",
    "numpy",
    "python",
    "root_base",
    "sysroot_linux-64",
    "vector-classes",
    "xorg-libx11",
    "xorg-libxext",
    "xorg-libxft",
    "xorg-libxpm",
    "xxhash"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/root-project/root/archive/refs/tags/v6-24-02.tar.gz",
 "version": "6.24.2"
}