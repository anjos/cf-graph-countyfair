{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/618598555.json"
   },
   "data": {
    "bot_rerun": 1627571106.5132785,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/618634567.json"
   },
   "data": {
    "bot_rerun": 1639074844.6147478,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/618666927.json"
   },
   "data": {
    "bot_rerun": 1637022124.3362248,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/669027133.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/722535883.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/779919127.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/792042211.json"
   },
   "data": {
    "bot_rerun": 1639074844.6152778,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/839920886.json"
   },
   "data": {
    "bot_rerun": 1664894496.5543401,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/840420683.json"
   },
   "data": {
    "bot_rerun": 1664894496.5545774,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/950154980.json"
   },
   "data": {
    "bot_rerun": 1664894496.5546937,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/959823513.json"
   },
   "data": {
    "bot_rerun": 1664894496.5552573,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1076207172.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1104753902.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "river",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/online-ml/river",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Online machine learning in Python"
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors"
   ]
  },
  "package": {
   "name": "river",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy"
   ]
  },
  "source": {
   "sha256": "9d068b7a9db32302fbd581af81315681dfe61774a5d777fb3d5982d3c3061340",
   "url": "https://pypi.io/packages/source/r/river/river-0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools-rust"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/online-ml/river",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Online machine learning in Python"
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors"
   ]
  },
  "package": {
   "name": "river",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy"
   ]
  },
  "source": {
   "sha256": "9d068b7a9db32302fbd581af81315681dfe61774a5d777fb3d5982d3c3061340",
   "url": "https://pypi.io/packages/source/r/river/river-0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "river",
 "new_version": "1.2.3",
 "new_version_attempts": {
  "0.10.0": 1,
  "0.10.1": 1,
  "0.11.0": 2,
  "0.11.1": 1,
  "0.7.1": 1,
  "0.8.0": 1,
  "0.9.0": 1,
  "1.2.3": 26
 },
 "new_version_errors": {
  "0.11.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '0.11.0' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/online-ml/{{ name }}/archive/{{ version }}.tar.gz'\n",
  "1.2.3": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '1.2.3' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/river-{{ version }}.tar.gz'\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/online-ml/river",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Online machine learning in Python"
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors"
   ]
  },
  "package": {
   "name": "river",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy"
   ]
  },
  "source": {
   "sha256": "9d068b7a9db32302fbd581af81315681dfe61774a5d777fb3d5982d3c3061340",
   "url": "https://pypi.io/packages/source/r/river/river-0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools-rust"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "river"
  ]
 },
 "pinning_version": "2022.10.30.22.56.52",
 "raw_meta_yaml": "{% set name = \"river\" %}\n{% set version = \"0.13.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/river-{{ version }}.tar.gz\n  sha256: 9d068b7a9db32302fbd581af81315681dfe61774a5d777fb3d5982d3c3061340\n\nbuild:\n  skip: true  # [py<38]\n  script: {{ PYTHON }} -m pip install . -vv\n  number: 2\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('rust') }}\n  host:\n    - python\n    - setuptools-rust\n    - numpy\n    - cython\n    - pip\n  run:\n    - python\n    - scipy >=1.5\n    - pandas >=1.3\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  imports:\n    - river\n    - river._bandit\n    - river.anomaly\n    - river.base\n    - river.checks\n    - river.cluster\n    - river.compat\n    - river.compose\n    - river.covariance\n    - river.datasets\n    - river.datasets.synth\n    - river.drift\n    - river.ensemble\n    - river.evaluate\n    - river.facto\n    - river.feature_extraction\n    - river.feature_selection\n    - river.imblearn\n    - river.linear_model\n    - river.metrics\n    - river.metrics.multioutput\n    - river.misc\n    - river.model_selection\n    - river.multiclass\n    - river.multioutput\n    - river.naive_bayes\n    - river.neighbors\n    - river.neural_net\n    - river.optim\n    - river.preprocessing\n    - river.proba\n    - river.reco\n    - river.rules\n    - river.stats\n    - river.stream\n    - river.time_series\n    - river.tree\n    - river.tree.nodes\n    - river.tree.split_criterion\n    - river.tree.splitter\n    - river.utils\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/online-ml/river\n  summary: Online machine learning in Python\n  license: BSD-3-Clause\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - mxr-conda\n    - bubblyorca\n    - synapticarbors\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cython",
   "numpy",
   "pandas",
   "pip",
   "python",
   "rust_compiler_stub",
   "scipy",
   "setuptools-rust"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools-rust"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "numpy",
    "pandas",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.21.2",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools-rust"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas >=1.3",
    "python",
    "scipy >=1.5"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/r/river/river-0.13.0.tar.gz",
 "version": "0.13.0",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/online-ml/river",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Online machine learning in Python"
  },
  "build": {
   "number": "2",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors",
    "mxr-conda",
    "bubblyorca",
    "synapticarbors"
   ]
  },
  "package": {
   "name": "river",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip",
    "python",
    "setuptools-rust",
    "numpy",
    "cython",
    "pip"
   ],
   "run": [
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy",
    "python",
    "scipy >=1.5",
    "pandas >=1.3",
    "numpy"
   ]
  },
  "source": {
   "sha256": "9d068b7a9db32302fbd581af81315681dfe61774a5d777fb3d5982d3c3061340",
   "url": "https://pypi.io/packages/source/r/river/river-0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils",
    "river",
    "river._bandit",
    "river.anomaly",
    "river.base",
    "river.checks",
    "river.cluster",
    "river.compat",
    "river.compose",
    "river.covariance",
    "river.datasets",
    "river.datasets.synth",
    "river.drift",
    "river.ensemble",
    "river.evaluate",
    "river.facto",
    "river.feature_extraction",
    "river.feature_selection",
    "river.imblearn",
    "river.linear_model",
    "river.metrics",
    "river.metrics.multioutput",
    "river.misc",
    "river.model_selection",
    "river.multiclass",
    "river.multioutput",
    "river.naive_bayes",
    "river.neighbors",
    "river.neural_net",
    "river.optim",
    "river.preprocessing",
    "river.proba",
    "river.reco",
    "river.rules",
    "river.stats",
    "river.stream",
    "river.time_series",
    "river.tree",
    "river.tree.nodes",
    "river.tree.split_criterion",
    "river.tree.splitter",
    "river.utils"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "pip",
    "python",
    "setuptools-rust"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pandas",
    "python",
    "scipy"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}