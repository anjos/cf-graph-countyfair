{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/244623131.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "compiler_stack": "comp7",
  "max_py_ver": "37",
  "max_r_ver": "35"
 },
 "feedstock_name": "intel-hybrid-driver",
 "hash_type": "sha256",
 "name": "intel-hybrid-driver",
 "new_version": "1.0.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "intel-hybrid-driver"
  ]
 },
 "pinning_version": "2019.01.09",
 "raw_meta_yaml": "{% set name = \"intel-hybrid-driver\" %}\n{% set version = \"1.0.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/01org/{{ name }}/archive/{{ version }}.tar.gz\n  fn: {{ name }}-{{ version }}.tar.gz\n  sha256: 16cd66872e8043ce6c0e9a016a043c460e8a180fdc520f31c1f97ffef7828d7b\n\nbuild:\n  skip: True  # [not linux]\n  number: 1003\n  # https://github.com/01org/intel-hybrid-driver/blob/master/NEWS\n  run_exports:\n  - {{ pin_subpackage('intel-hybrid-driver', max_pin='x.x') }}\n  # https://01.org/linuxgraphics/documentation/build-guide-0\n  script:\n    - ./autogen.sh --prefix=$PREFIX\n    - make -j$(nproc) install\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - autoconf\n    - automake\n    - libtool\n    - pkg-config\n  host:\n    - libdrm\n    - cmrt !=*1000\n\ntest:\n  commands:\n    - test -f $PREFIX/lib/dri/hybrid_drv_video.so\n\nabout:\n  home: https://github.com/01org/intel-hybrid-driver\n  license: MIT\n  license_family: MIT\n  license_file: COPYING\n  summary: 'VA driver for Intel G45 & HD Graphics family'\n\n  # The remaining entries in this section are optional, but recommended\n  description: |\n    Overview\n    --------\n    libva-intel-hybrid-driver is the VA-API implementation for Intel G45 chipsets\n    and Intel HD Graphics for Intel Core processor family.\n\n    Platform definitions:\n    HSW: Haswell\n    BYT: Bay-Trail-M\n    BDW: Broadwell\n    BSW: Braswell\n\n    Codecs\n    ------\n    Hybrid VP8 Encoder\n    Hybrid VP9 Decoder\n\nextra:\n  recipe-maintainers:\n    - hmaarrfk\n",
 "smithy_version": "3.2.2",
 "strong_exports": false,
 "url": "https://github.com/01org/intel-hybrid-driver/archive/1.0.2.tar.gz",
 "version": "1.0.2"
}