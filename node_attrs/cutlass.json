{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/921151579.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/982147264.json"
   },
   "data": {
    "bot_rerun": 1657512053.5982833,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/992642039.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "cutlass",
 "hash_type": "sha256",
 "name": "cutlass",
 "new_version": "2.9.1",
 "new_version_attempts": {
  "2.9.0": 1,
  "2.9.1": 2
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cutlass"
  ]
 },
 "pinning_version": "2022.07.11.00.47.13",
 "raw_meta_yaml": "{% set version = \"2.9.1\" %}\n\npackage:\n  name: cutlass\n  version: {{ version }}\n\nsource:\n  url: https://github.com/NVIDIA/cutlass/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 2d6474576c08ee21d7f4f3a10fd1a47234fd9fd638efc8a2e0e64bb367f09bc1\n\nbuild:\n  number: 0\n  skip: true  # [not linux]\n  # not supported for CUDA 10 nor CPU\n  # CUDA 11.{0|1} times out consistently\n  skip: true  # [cuda_compiler_version != \"11.2\"]\n  run_exports:\n    - {{ pin_subpackage('cutlass', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - cmake\n    - make\n  host:\n    - cudnn\n  run:\n    - cudnn\ntest:\n  commands:\n    # shared:\n    - test -f $PREFIX/lib/libcutlass.so               # [linux]\n    - if not exist %LIBRARY_BIN%\\cutlass.dll exit 1   # [win]\n\n    # absence of static libraries (windows uses same extension for\n    # static libs and the \"import library\" needed to load a DLL):\n    - test ! -f $PREFIX/lib/libcutlass.a              # [not win]\n\n    # headers:\n    # This list should be substantially longer, but upstream just globs\n    # all *.h files. These are the headers required for triton, but\n    # relevant headers can be added as needed/desired.\n    {% for each_header in [\"library/handle.h\", \"library/library.h\",\n                           \"library/operation_table.h\", \"library/singleton.h\"] %}\n    - test -f $PREFIX/include/cutlass/{{ each_header }} || (echo \"{{ each_header }} not found\" && exit 1)  # [unix]\n    - if not exist %LIBRARY_INC%\\cutlass\\{{ \"\\\\\".join(each_header.split(\"/\")) }} exit 1                    # [win]\n    {% endfor %}\n\nabout:\n  home: https://github.com/NVIDIA/cutlass\n  license: BSD-3-Clause\n  license_file: LICENSE.txt\n  summary: CUDA Templates for Linear Algebra Subroutines\n  dev_url: https://github.com/NVIDIA/cutlass\n\nextra:\n  recipe-maintainers:\n    - h-vetinari\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/NVIDIA/cutlass/archive/refs/tags/v2.9.1.tar.gz",
 "version": "2.9.1"
}