{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/258077661.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/281349784.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "pyqt-5.9.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/340133464.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/353742735.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2019.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375775366.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/455581574.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2020.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/476813841.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2020.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513705422.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/535997178.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2020.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/552351330.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "pymor",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://pymor.org",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE.txt",
   "summary": "pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly."
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze"
   ]
  },
  "package": {
   "name": "pymor",
   "version": "2020.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner"
   ],
   "run": [
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter"
   ]
  },
  "source": {
   "sha256": "e451cb0116137f2409f3d58f63b06d1b568040f3c48f3922bec9d548bc4982ee",
   "url": "https://pypi.io/packages/source/p/pymor/pymor-2020.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\""
   ],
   "imports": [
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos"
   ],
   "requires": [
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "packaging",
    "pip",
    "pytest-runner",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "diskcache",
    "docopt",
    "ipyparallel",
    "ipython",
    "ipywidgets",
    "jupyter",
    "matplotlib-base",
    "mpi4py",
    "numpy",
    "packaging",
    "pillow",
    "pyamg",
    "pyopengl",
    "pyqt",
    "python",
    "pythreejs",
    "qt.py",
    "scipy",
    "typer",
    "xorg-libxi",
    "xorg-libxrender"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "hypothesis",
    "mpich",
    "packaging",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://pymor.org",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE.txt",
   "summary": "pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly."
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze"
   ]
  },
  "package": {
   "name": "pymor",
   "version": "2020.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel"
   ],
   "run": [
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "xorg-libxi",
    "xorg-libxrender",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter"
   ]
  },
  "source": {
   "sha256": "e451cb0116137f2409f3d58f63b06d1b568040f3c48f3922bec9d548bc4982ee",
   "url": "https://pypi.io/packages/source/p/pymor/pymor-2020.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\""
   ],
   "imports": [
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos"
   ],
   "requires": [
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging"
   ]
  }
 },
 "name": "pymor",
 "new_version": "2020.2.0",
 "new_version_attempts": {
  "2020.1.1": 1,
  "2020.1.2": 1,
  "2020.2.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://pymor.org",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE.txt",
   "summary": "pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly."
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . --no-deps --ignore-installed -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze"
   ]
  },
  "package": {
   "name": "pymor",
   "version": "2020.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner"
   ],
   "run": [
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyamg",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "mpi4py",
    "jupyter"
   ]
  },
  "source": {
   "sha256": "e451cb0116137f2409f3d58f63b06d1b568040f3c48f3922bec9d548bc4982ee",
   "url": "https://pypi.io/packages/source/p/pymor/pymor-2020.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\""
   ],
   "imports": [
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos"
   ],
   "requires": [
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "mpich"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "packaging",
    "pip",
    "pytest-runner",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "diskcache",
    "docopt",
    "ipyparallel",
    "ipython",
    "ipywidgets",
    "jupyter",
    "matplotlib-base",
    "mpi4py",
    "numpy",
    "packaging",
    "pillow",
    "pyamg",
    "pyopengl",
    "pyqt",
    "python",
    "pythreejs",
    "qt.py",
    "scipy",
    "typer"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "hypothesis",
    "mpich",
    "packaging",
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pymor"
  ]
 },
 "pinning_version": "2021.01.10.01.07.36",
 "pre_pr_migrator_status": {
  "pypy37": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/852018010\">bot CI job</a>): master: ['linux_64_numpy1.19python3.7.____73_pypy: Encountered problems while solving:\\n  - package pyqt-5.12.3-ha770c72_5 requires pyqtwebengine 5.12.1 py37he336c9b_5, but none of the providers can be installed\\n', 'osx_64_numpy1.19python3.7.____73_pypy: Encountered problems while solving:\\n  - package pyqt-5.12.3-h694c41f_5 requires pyqtwebengine 5.12.1 py38h721a93c_5, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set version = \"2020.2.0\" %}\n\npackage:\n  name: pymor\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/p/pymor/pymor-{{ version }}.tar.gz\n  sha256: e451cb0116137f2409f3d58f63b06d1b568040f3c48f3922bec9d548bc4982ee\n\nbuild:\n  number: 0\n  script:\n    # this is split in two to workaround an opaque msvc error\n    - {{ PYTHON }} setup.py bdist_wheel  # [win]\n    # it's really just one file, but windows shell cannot expand glob patterns\n    - FOR /R %%G in (pymor*.whl) DO {{ PYTHON }} -m pip install %%G --no-deps --ignore-installed -vvv  # [win]\n    # on linux + osx we can do the standard install\n    - {{ PYTHON }} -m pip install . --no-deps --ignore-installed -vvv  # [not win]\n  skip: true  # [py<35]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n\n  host:\n    - python\n    - pip\n    - cython >=0.20.1\n    - numpy\n    - packaging\n    - pytest-runner\n    - wheel  # [win]\n\n  run:\n    - python\n    - typer \n    - pythreejs\n    - ipywidgets\n    - ipython >=3.0\n    - ipyparallel\n    - matplotlib-base\n    - pyopengl\n    - diskcache\n    - pyamg  # [not win]\n    - pyqt ==5.12.3\n    # these should really be a dependcy of pyqt, but isn't\n    - xorg-libxi  # [linux]\n    - xorg-libxrender  # [linux]\n    - pillow\n    - {{ pin_compatible('numpy') }}\n    - scipy >=0.13.3\n    - docopt\n    - Qt.py\n    - packaging\n    - mpi4py  # [not win]\n    - jupyter\n\ntest:\n  requires:\n    - pytest >=4.6\n    - hypothesis\n    - packaging\n    - mpich  # [not win]\n\n  commands:\n    - QT_DEBUG_PLUGINS=1 xvfb-run -a py.test -s -r sxX -k thermalblock --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"  # [linux]\n    # use something that does not need shaders\n    - py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"  # [not linux]\n\n  imports:\n    - pymor\n    - pymordemos\n\nabout:\n  home: https://pymor.org\n  license: BSD-2-Clause\n  license_file: LICENSE.txt\n  summary: pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR\n    are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly.\n\nextra:\n  recipe-maintainers:\n    - renefritze\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cython",
   "diskcache",
   "docopt",
   "ipyparallel",
   "ipython",
   "ipywidgets",
   "jupyter",
   "matplotlib-base",
   "mpi4py",
   "numpy",
   "packaging",
   "pillow",
   "pip",
   "pyamg",
   "pyopengl",
   "pyqt",
   "pytest-runner",
   "python",
   "pythreejs",
   "qt.py",
   "scipy",
   "typer",
   "wheel",
   "xorg-libxi",
   "xorg-libxrender"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "numpy",
    "packaging",
    "pip",
    "pytest-runner",
    "python",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "diskcache",
    "docopt",
    "ipyparallel",
    "ipython",
    "ipywidgets",
    "jupyter",
    "matplotlib-base",
    "mpi4py",
    "numpy",
    "packaging",
    "pillow",
    "pyamg",
    "pyopengl",
    "pyqt",
    "python",
    "pythreejs",
    "qt.py",
    "scipy",
    "typer",
    "xorg-libxi",
    "xorg-libxrender"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "hypothesis",
    "mpich",
    "packaging",
    "pytest"
   ]
  }
 },
 "smithy_version": "3.8.6",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pip",
    "pytest-runner",
    "python",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "Qt.py",
    "diskcache",
    "docopt",
    "ipyparallel",
    "ipython >=3.0",
    "ipywidgets",
    "jupyter",
    "matplotlib-base",
    "mpi4py",
    "numpy",
    "packaging",
    "pillow",
    "pyamg",
    "pyopengl",
    "pyqt ==5.12.3",
    "python",
    "pythreejs",
    "scipy >=0.13.3",
    "typer",
    "xorg-libxi",
    "xorg-libxrender"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "hypothesis",
    "mpich",
    "packaging",
    "pytest >=4.6"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/p/pymor/pymor-2020.2.0.tar.gz",
 "version": "2020.2.0",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://pymor.org",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE.txt",
   "summary": "pyMOR is a software library for building model order reduction applications with the Python programming language. Implemented algorithms include reduced basis methods for parametric linear and non-linear problems, as well as system-theoretic methods such as balanced truncation or IRKA. All algorithms in pyMOR are formulated in terms of abstract interfaces for seamless integration with external PDE solver packages. Moreover, pure Python implementations of finite element and finite volume discretizations using the NumPy/SciPy scientific computing stack are provided for getting started quickly."
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv",
    "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe setup.py bdist_wheel",
    "FOR /R %%G in (pymor*.whl) DO /usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/python.exe -m pip install %%G --no-deps --ignore-installed -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "renefritze",
    "renefritze",
    "renefritze",
    "renefritze"
   ]
  },
  "package": {
   "name": "pymor",
   "version": "2020.2.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel",
    "python",
    "pip",
    "cython >=0.20.1",
    "numpy",
    "packaging",
    "pytest-runner",
    "wheel"
   ],
   "run": [
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter",
    "python",
    "typer",
    "pythreejs",
    "ipywidgets",
    "ipython >=3.0",
    "ipyparallel",
    "matplotlib-base",
    "pyopengl",
    "diskcache",
    "pyqt ==5.12.3",
    "pillow",
    "numpy",
    "scipy >=0.13.3",
    "docopt",
    "Qt.py",
    "packaging",
    "jupyter"
   ]
  },
  "source": {
   "sha256": "e451cb0116137f2409f3d58f63b06d1b568040f3c48f3922bec9d548bc4982ee",
   "url": "https://pypi.io/packages/source/p/pymor/pymor-2020.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\"",
    "py.test -v -s -r sxX -k thermalblock_adaptive --pyargs pymortests -o testpaths=pymortests/ -o python_files=\"pymortests/demos.py\""
   ],
   "imports": [
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos",
    "pymor",
    "pymordemos"
   ],
   "requires": [
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging",
    "pytest >=4.6",
    "hypothesis",
    "packaging"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "packaging",
    "pip",
    "pytest-runner",
    "python",
    "wheel"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "diskcache",
    "docopt",
    "ipyparallel",
    "ipython",
    "ipywidgets",
    "jupyter",
    "matplotlib-base",
    "numpy",
    "packaging",
    "pillow",
    "pyopengl",
    "pyqt",
    "python",
    "pythreejs",
    "qt.py",
    "scipy",
    "typer"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "hypothesis",
    "packaging",
    "pytest"
   ]
  }
 }
}