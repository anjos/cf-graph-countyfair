{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1024075047.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "fenics-ffcx",
 "hash_type": "sha256",
 "name": "fenics-ffcx-ufcx",
 "new_version": "0.5.0",
 "new_version_attempts": {
  "0.5.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "fenics-ffcx",
   "fenics-ufcx"
  ]
 },
 "pinning_version": "2022.08.11.15.16.27",
 "raw_meta_yaml": "{% set name = \"fenics-ffcx-ufcx\" %}\n{% set version = \"0.4.2\" %}\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  # PyPI sdist missing ufcx sources in 0.4.2. Should be fixed in 0.4.3\n  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}{{ extra }}.tar.gz\n  url: https://github.com/fenics/ffcx/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 3be6eef064d6ef907245db5b6cc15d4e603762e68b76e53e099935ca91ef1ee4\nbuild:\n  number: 1\n  skip: true  # [win]\n\noutputs:\n  - name: fenics-ufcx\n    script: build-ufcx.sh\n    build:\n      noarch: generic\n      ignore_run_exports:\n        # we don't use the compiler, but cmake still needs it\n        - {{ compiler(\"c\") }}  # [linux]\n    requirements:\n      build:\n        - cmake\n        - make\n        - {{ compiler(\"c\") }}  # [linux]\n    test:\n      script: test-ufcx.sh\n      files:\n        - test-ufcx\n      requires:\n        - pkg-config\n        - cmake\n        - make\n        - {{ compiler(\"cxx\") }}\n      commands:\n        - test -f ${PREFIX}/include/ufcx.h\n        - pkg-config --cflags ufcx\n  - name: fenics-ffcx\n    build:\n      script: $PYTHON -m pip install -vv --no-deps .\n      noarch: python\n    requirements:\n      host:\n        - python >=3.7\n        - pip\n        - setuptools >=58,<61\n        - wheel\n      run:\n        - python >=3.7\n        - setuptools\n        - numpy\n        - cffi\n        - fenics-basix >=0.4.1,<0.5.0a0\n        - fenics-ufl ==2022.1.*\n    test:\n      files:\n        - test-ffcx\n      requires:\n        - pip\n        - pytest\n        - {{ compiler(\"c\") }}\n        - {{ compiler(\"cxx\") }}\n      imports:\n        - ffcx\n      commands:\n        - pytest -v test-ffcx\n\nabout:\n  home: https://fenicsproject.org\n  summary: The FEniCSx Form Compiler\n  description: |\n    FFCx is a new version of the FEniCS Form Compiler.\n    It is being actively developed and is compatible with DOLFINx.\n\n    FFCx is a compiler for finite element variational forms.\n    From a high-level description of the form in the Unified Form Language (UFL),\n    it generates efficient low-level C code that can be used to assemble the corresponding discrete operator (tensor).\n    In particular, a bilinear form may be assembled into a matrix and a linear form may be assembled into a vector.\n    FFCx may be used either from the command line (by invoking the ffcx command) or as a Python module (import ffcx).\n  license: LGPL-3.0-or-later\n  license_family: LGPL\n  license_file: COPYING.LESSER\n  doc_url: https://docs.fenicsproject.org/ffcx/v{{ version }}/\n  dev_url: https://github.com/fenics/ffcx\n\nextra:\n  feedstock-name: fenics-ffcx\n  recipe-maintainers:\n    - minrk\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://github.com/fenics/ffcx/archive/refs/tags/v0.4.2.tar.gz",
 "version": "0.4.2"
}