{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1019422680.json"
   },
   "data": {
    "bot_rerun": 1662229200.1269214,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6266"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1045539020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6266"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1097257159.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6268"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "cwb",
 "hash_type": "sha256",
 "name": "cwb",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cwb"
  ]
 },
 "pinning_version": "2022.10.24.04.43.29",
 "raw_meta_yaml": "{% set name = \"cWB\" %}\n{% set version = \"6.4.2\" %}\n\npackage:\n   name: \"{{ name|lower }}\"\n   version: \"{{ version }}\"\n\nsource:\n   url: https://gitlab.com/gwburst/public/library/-/archive/cWB-{{ version }}/library-cWB-{{ version }}.tar.gz\n   sha256: 42c3ff466ee7dcb26fb3c0a80b8c1620c45758c71e7b8886bc7f1d6e1f892fe2\n   patches:\n     # use rootcling from build env when cross-compiling\n     - rootcling-cross.patch  # [build_platform != target_platform]\n\nbuild:\n  error_overdepending: true\n  error_overlinking: true\n  number: 3\n  run_exports:\n    - {{ pin_subpackage( name|lower, max_pin='x.x.x' ) }}\n  skip: true  # [not linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n    - pkg-config  # [unix]\n    - root_base  # [build_platform != target_platform]\n    - sysroot_linux-64 2.17  # [linux64]\n  host:\n    - healpix_cxx >=3.80\n    - libframel\n    - liblal\n    - liblalinspiral\n    - liblalburst\n    - liblalmetaio\n    - liblalsimulation\n    - root_base\n  run:\n    - root_base\n    - tcsh\n\ntest:\n  commands:\n    # Check library\n    - test -f ${PREFIX}/lib/cwb${SHLIB_EXT}\n    # Check header\n    - test -f ${PREFIX}/include/cwb.hh\n    # Check commands\n    - cwb_help\n    - cwb_watenv verbose\n    - ComputeWDMFourier\n    - root ${CWB_ROOTLOGON_FILE} -e '.q'\n\nabout:\n  home: \"https://gitlab.com/gwburst/public/library\"\n  license: \"GPL-3.0-or-later\"\n  license_family: GPL\n  license_file: LICENSE\n  summary: \"cWB pipeline library\"\n  description: |\n    Coherent network analysis is addressing the problem of detection and\n    reconstruction of gravitational waves (GW) with networks of detectors.\n    It has been extensively studied in the literature in application to\n    detection of bursts signals, which may be produced by numerous\n    gravitational wave sources in the Universe.\n    In coherent methods, a statistic is built up as a coherent sum over\n    detector responses.\n    In general, it is expected to be more optimal (better sensitivity\n    at the same false alarm rate) than the detection statistics of the\n    individual detectors that make up the network.\n    Also coherent methods provide estimators for the GW waveforms and\n    the source coordinates in the sky.\n\n    The method we present (called coherent WaveBurst) is significantly\n    different from the traditional burst detection methods.\n    Unlike coincident methods, which first identify events in individual\n    detectors by using an excess power statistic and than require\n    coincidence between detectors, the coherent WaveBurst method combines\n    all data streams into one coherent statistic constructed in the\n    framework of the constrained maximum likelihood analysis.\n    Such an approach has significant advantages over the coincident methods.\n    First, the sensitivity of the method is not limited by the least\n    sensitive detector in the network.\n    In the coherent WaveBurst method the detection is based on the maximum\n    likelihood ratio statistic which represents the total signal-to-noise\n    ratio of the GW signal detected in the network.\n    Second, other coherent statistics, such as the null stream and the\n    network correlation coefficient can be constructed to distinguish\n    genuine GW signals from the environmental and instrumental artifacts.\n    Finally, the source coordinates of the GW waveforms can be reconstructed.\n\nextra:\n  recipe-maintainers:\n    - rhyspoulton\n",
 "smithy_version": "3.21.2",
 "strong_exports": false,
 "url": "https://gitlab.com/gwburst/public/library/-/archive/cWB-6.4.2/library-cWB-6.4.2.tar.gz",
 "version": "6.4.2"
}