{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/384316631.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root620000"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/393731426.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6202"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/413067349.json"
   },
   "data": {
    "bot_rerun": 1591732405.6696904,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/413127612.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6204"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/432090457.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/442647822.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base622"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/444700153.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/597340845.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6226"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/597527901.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6228"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/709136510.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/724445374.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6244"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/727491082.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6246"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/819917664.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/872982481.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6260"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "omicron",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Omicron has been derived from a well-known 'burst-type' search pipeline\ncalled Q-pipeline (a.k.a Omega).  Q-pipeline is able to detect and\ncharacterize detector glitches with a very good efficiency and precision.\nSo, the idea was to adapt it for detector characterization purposes,\ni.e. to run it over many auxiliary channels.  To achieve this, the\noriginal matlab code has been replaced by a C++ architecture and many\nsteps have been removed to run faster.  The name Omicron was chosen to\nrecall the Omega inheritance.\n",
   "dev_url": "https://git.ligo.org/virgo/virgoapp/Omicron.git",
   "doc_url": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "home": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "An algorithm to detect and characterize transient events in gravitational-wave detectors"
  },
  "build": {
   "error_overdepending": true,
   "error_overlinking": true,
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "duncanmmacleod",
    "rhyspoulton"
   ]
  },
  "package": {
   "name": "omicron",
   "version": "3.1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.9.0",
    "make",
    "pkg-config"
   ],
   "host": [
    "fftw",
    "gwollum 3.1.0",
    "root_base",
    "nlohmann_json >=3.10.5"
   ],
   "run": [
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "source": {
   "sha256": "02a3085079f16b47ca1b8473d5cb352575a14d957ef950b9534ec387072ceadb",
   "url": "https://git.ligo.org/virgo/virgoapp/Omicron/-/archive/3.1.0/Omicron-3.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "omicron version",
    "for omitest in ${PREFIX}/sbin/omicron-test-*; do ${omitest}; done",
    "pkg-config --print-errors --exact-version 3.1.0 omicron",
    "test \"${OMICRON_HTML}\" == \"${PREFIX}/share/omicron/html\""
   ],
   "requires": [
    "pkg-config"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum",
    "nlohmann_json",
    "root_base"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pkg-config"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Omicron has been derived from a well-known 'burst-type' search pipeline\ncalled Q-pipeline (a.k.a Omega).  Q-pipeline is able to detect and\ncharacterize detector glitches with a very good efficiency and precision.\nSo, the idea was to adapt it for detector characterization purposes,\ni.e. to run it over many auxiliary channels.  To achieve this, the\noriginal matlab code has been replaced by a C++ architecture and many\nsteps have been removed to run faster.  The name Omicron was chosen to\nrecall the Omega inheritance.\n",
   "dev_url": "https://git.ligo.org/virgo/virgoapp/Omicron.git",
   "doc_url": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "home": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "An algorithm to detect and characterize transient events in gravitational-wave detectors"
  },
  "build": {
   "error_overdepending": true,
   "error_overlinking": true,
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "duncanmmacleod",
    "rhyspoulton",
    "duncanmmacleod",
    "rhyspoulton"
   ]
  },
  "package": {
   "name": "omicron",
   "version": "3.1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.9.0",
    "make",
    "pkg-config",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.9.0",
    "make",
    "pkg-config"
   ],
   "host": [
    "fftw",
    "gwollum 3.1.0",
    "root_base",
    "nlohmann_json >=3.10.5",
    "fftw",
    "gwollum 3.1.0",
    "root_base",
    "nlohmann_json >=3.10.5"
   ],
   "run": [
    "fftw",
    "gwollum",
    "root_base",
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "source": {
   "sha256": "02a3085079f16b47ca1b8473d5cb352575a14d957ef950b9534ec387072ceadb",
   "url": "https://git.ligo.org/virgo/virgoapp/Omicron/-/archive/3.1.0/Omicron-3.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "omicron version",
    "for omitest in ${PREFIX}/sbin/omicron-test-*; do ${omitest}; done",
    "pkg-config --print-errors --exact-version 3.1.0 omicron",
    "test \"${OMICRON_HTML}\" == \"${PREFIX}/share/omicron/html\"",
    "omicron version",
    "pkg-config --print-errors --exact-version 3.1.0 omicron",
    "test \"${OMICRON_HTML}\" == \"${PREFIX}/share/omicron/html\""
   ],
   "requires": [
    "pkg-config",
    "pkg-config"
   ]
  }
 },
 "name": "omicron",
 "new_version": "3.1.0",
 "new_version_attempts": {
  "2.4.0": 2,
  "2.4.1": 1,
  "3.0.0": 1,
  "3.1.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Omicron has been derived from a well-known 'burst-type' search pipeline\ncalled Q-pipeline (a.k.a Omega).  Q-pipeline is able to detect and\ncharacterize detector glitches with a very good efficiency and precision.\nSo, the idea was to adapt it for detector characterization purposes,\ni.e. to run it over many auxiliary channels.  To achieve this, the\noriginal matlab code has been replaced by a C++ architecture and many\nsteps have been removed to run faster.  The name Omicron was chosen to\nrecall the Omega inheritance.\n",
   "dev_url": "https://git.ligo.org/virgo/virgoapp/Omicron.git",
   "doc_url": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "home": "https://virgo.docs.ligo.org/virgoapp/Omicron/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "An algorithm to detect and characterize transient events in gravitational-wave detectors"
  },
  "build": {
   "error_overdepending": true,
   "error_overlinking": true,
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "duncanmmacleod",
    "rhyspoulton"
   ]
  },
  "package": {
   "name": "omicron",
   "version": "3.1.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.9.0",
    "make",
    "pkg-config"
   ],
   "host": [
    "fftw",
    "gwollum 3.1.0",
    "root_base",
    "nlohmann_json >=3.10.5"
   ],
   "run": [
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "source": {
   "sha256": "02a3085079f16b47ca1b8473d5cb352575a14d957ef950b9534ec387072ceadb",
   "url": "https://git.ligo.org/virgo/virgoapp/Omicron/-/archive/3.1.0/Omicron-3.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "omicron version",
    "pkg-config --print-errors --exact-version 3.1.0 omicron",
    "test \"${OMICRON_HTML}\" == \"${PREFIX}/share/omicron/html\""
   ],
   "requires": [
    "pkg-config"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum",
    "nlohmann_json",
    "root_base"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pkg-config"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "omicron"
  ]
 },
 "pinning_version": "2022.03.05.13.20.38",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"Omicron\" %}\n{% set version = \"3.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://git.ligo.org/virgo/virgoapp/{{ name }}/-/archive/{{ version }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 02a3085079f16b47ca1b8473d5cb352575a14d957ef950b9534ec387072ceadb\n\nbuild:\n  error_overdepending: true\n  error_overlinking: true\n  number: 0\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake >=3.9.0\n    - make  # [unix]\n    - pkg-config  # [unix]\n  host:\n    - fftw\n    - gwollum {{ version }}\n    - root_base\n    # https://github.com/conda-forge/root-feedstock/issues/158\n    - nlohmann_json >=3.10.5\n  run:\n    - fftw\n    - gwollum\n    - root_base\n\ntest:\n  requires:\n    - pkg-config\n  commands:\n    # sanity check\n    - omicron version\n    # run test commands\n    - for omitest in ${PREFIX}/sbin/omicron-test-*; do ${omitest}; done  # [not osx]\n    # check pkg-config\n    - pkg-config --print-errors --exact-version {{ version }} {{ name|lower }}\n    # check activate variables\n    - test \"${OMICRON_HTML}\" == \"${PREFIX}/share/omicron/html\"  # [unix]\n\nabout:\n  home: https://virgo.docs.ligo.org/virgoapp/{{ name }}/\n  doc_url: https://virgo.docs.ligo.org/virgoapp/{{ name }}/\n  dev_url: https://git.ligo.org/virgo/virgoapp/{{ name }}.git\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: An algorithm to detect and characterize transient events in gravitational-wave detectors\n  description: |\n    Omicron has been derived from a well-known 'burst-type' search pipeline\n    called Q-pipeline (a.k.a Omega).  Q-pipeline is able to detect and\n    characterize detector glitches with a very good efficiency and precision.\n    So, the idea was to adapt it for detector characterization purposes,\n    i.e. to run it over many auxiliary channels.  To achieve this, the\n    original matlab code has been replaced by a C++ architecture and many\n    steps have been removed to run faster.  The name Omicron was chosen to\n    recall the Omega inheritance.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - rhyspoulton\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "fftw",
   "gwollum",
   "make",
   "nlohmann_json",
   "pkg-config",
   "root_base"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fftw",
    "gwollum",
    "nlohmann_json",
    "root_base"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pkg-config"
   ]
  }
 },
 "smithy_version": "3.17.2",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake >=3.9.0",
    "cxx_compiler_stub",
    "make",
    "pkg-config"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum 3.1.0",
    "nlohmann_json >=3.10.5",
    "root_base"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "gwollum",
    "root_base"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pkg-config"
   ]
  }
 },
 "url": "https://git.ligo.org/virgo/virgoapp/Omicron/-/archive/3.1.0/Omicron-3.1.0.tar.gz",
 "version": "3.1.0"
}