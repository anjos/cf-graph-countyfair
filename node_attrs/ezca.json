{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/374514502.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "ezca",
 "hash_type": "sha256",
 "name": "ezca",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ezca"
  ]
 },
 "pinning_version": "2020.02.12",
 "raw_meta_yaml": "{% set name = \"ezca\" %}\n{% set version = \"1.4.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://git.ligo.org/cds/python-ezca/-/archive/{{ version }}/python-ezca-{{ version }}.tar.gz\n  sha256: 70216a552302f489166a266222e0910632ee2423f3bbbe7a5015db9606960e02\n  patches:\n    # https://git.ligo.org/cds/python-ezca/-/commit/f9e0b052214f41d72f4c45a336c91e104a3ce720\n    - 0001-setup.py-fix-install_requires.patch\n\nbuild:\n  number: 1\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=3.5\n    - setuptools\n  run:\n    - pcaspy\n    - python >=3.5\n    - pyepics >=3.4.1\n    - six\n\ntest:\n  requires:\n    - pip\n  commands:\n    # check requirements\n    - python -m pip check\n    # run test suite\n    - python -m unittest discover ezca.tests\n\nabout:\n  home: https://git.ligo.org/cds/python-ezca/\n  dev_url: https://git.ligo.org/cds/python-ezca/\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: COPYING\n  summary: aLIGO CDS Python EPICS interface\n  description: |\n    Ezca is a wrapping around pyepics containing methods specially\n    designed for interfacing with the Advanced LIGO CDS front-end control\n    system (e.g. \"RCG\").  Beyond providing standard methods for reading\n    and writing EPICS channels, it also includes the LIGOFilter object for\n    interacting with CDS Standard Filter Modules.  It also handles\n    abstracting information about the interferometer under control, and\n    sub-classing specific control domains.\n    It is specifically designed to be integrated into the Guardian\n    automation platform, but it's also perfectly usable on it's own.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - jrollins\n",
 "smithy_version": "3.6.8",
 "strong_exports": false,
 "url": "https://git.ligo.org/cds/python-ezca/-/archive/1.4.0/python-ezca-1.4.0.tar.gz",
 "version": "1.4.0"
}