{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/336088076.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/392745609.json"
   },
   "data": {
    "bot_rerun": 1597087706.2340126,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/440974344.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/465694268.json"
   },
   "data": {
    "bot_rerun": 1601387721.7888908,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/494856846.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501755741.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/533912154.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/553793123.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/682809010.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/739289436.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "RebuildBroken",
    "migrator_version": 2,
    "name": "rebuild-broken"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/743794795.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "RebuildBroken",
    "migrator_version": 3,
    "name": "rebuild-broken"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774817790.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/905159687.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "zfpy",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": null,
   "run_exports": [
    "zfp",
    "zfp",
    "zfp",
    "zfp",
    "zfp",
    "zfp"
   ],
   "script": "/tmp/tmp4qkpd0v7\\bld_zfp.bat"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk",
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   },
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   },
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   },
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   },
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   },
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "/tmp/tmp4qkpd0v7\\bld_zfpy.bat"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "libgomp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "llvm-openmp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "llvm-openmp",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch",
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch",
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch",
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch",
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch",
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp.so.0.5.5",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp",
    "if not exist %LIBRARY_INC%\\zfp.h exit 1",
    "if not exist %LIBRARY_BIN%\\zfp.dll exit 1",
    "if not exist %LIBRARY_LIB%\\zfp.lib exit 1",
    "if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1",
    "where zfp"
   ]
  }
 },
 "name": "zfp",
 "new_version": "0.5.5",
 "osx_64_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "llvm-openmp"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "llvm-openmp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "source ${RECIPE_DIR}/build_zfpy.sh"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "make"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "llvm-openmp"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "llvm-openmp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "zfp",
   "zfpy"
  ]
 },
 "pinning_version": "2022.04.09.19.01.16",
 "pre_pr_migrator_attempts": {
  "python39": 1,
  "rebuild-broken": 1
 },
 "pre_pr_migrator_status": {
  "python39": "not solvable: ['Encountered problems while solving.\\nProblem: nothing provides openssl >=1.0.2p,<1.0.3a needed by python-2.7.15-h938d71a_1006\\n', 'Encountered problems while solving.\\nProblem: package numpy-1.16.0-py27_blas_openblash1522bff_1000 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package numpy-1.16.0-py27_blas_openblash4251c03_1000 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package numpy-1.16.2-py27hde85f9e_1 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package numpy-1.16.3-py27h8ce9d87_0 requires python >=2.7,<2.8.0a0, but none of the providers can be installed\\n']",
  "rebuild-broken": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1265438560\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1175, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 196, in run\n    migrate_return = migrator.migrate(recipe_dir, feedstock_ctx.attrs, **kwargs)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/broken_rebuild.py\", line 361, in migrate\n    self.set_build_number(os.path.join(recipe_dir, \"meta.yaml\"))\nNameError: name 'os' is not defined\n"
 },
 "raw_meta_yaml": "{% set version = \"0.5.5\" %}\n\n# This package builds 2 outputs\n#    zfp     --- C headers\n#    zfpy    --- Python package\n#\n# The build procedure actually rebuilds zfp when zfpy is being built\n# during the install phase, conda will simply ignore all the files\n# that are being copied related to zfp since they already exist in the prefix\n\npackage:\n  name: zfp\n  version: {{ version }}\n\nsource:\n  url: https://github.com/LLNL/zfp/archive/{{ version }}.tar.gz\n  sha256: 6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4\n  patches:\n    # https://github.com/scikit-build/scikit-build/issues/506\n    - 100-update-cmake.patch\n    # https://github.com/LLNL/zfp/pull/109\n    - 109-avoid-importing-cpython-array.patch\n\nbuild:\n  number: 8\n  script: source ${RECIPE_DIR}/build_zfp.sh  # [unix]\n  script: {{ RECIPE_DIR }}\\bld_zfp.bat       # [win]\n  run_exports:\n    # No real information, for now, let keep the defaults\n    - {{ pin_subpackage('zfp') }}\n  rpaths:\n    - lib/  # [unix]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make     # [unix]\n    - ninja    # [win]\n    - libgomp  # [linux]\n    - llvm-openmp  # [osx]\n\ntest:\n  commands:\n    - test -f $PREFIX/include/zfp.h                # [unix]\n    - test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake  # [unix]\n    - if not exist %LIBRARY_INC%\\zfp.h exit 1      # [win]\n    - test -f $PREFIX/lib/libzfp.so.{{ version }}  # [linux]\n    - test -f $PREFIX/lib/libzfp${SHLIB_EXT}       # [unix]\n    - if not exist %LIBRARY_BIN%\\zfp.dll exit 1    # [win]\n    - if not exist %LIBRARY_LIB%\\zfp.lib exit 1    # [win]\n    - if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1  # [win]\n    # Command always returns 1\n    - which zfp  # [unix]\n    - where zfp  # [win]\n\noutputs:\n  - name: zfp\n  - name: zfpy\n    build:\n      script: source ${RECIPE_DIR}/build_zfpy.sh  # [unix]\n      script: {{ RECIPE_DIR }}\\bld_zfpy.bat       # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make     # [unix]\n        - ninja    # [win]\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - cython                                 # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n      host:\n        - python\n        - numpy\n        - cython\n        - {{ pin_subpackage('zfp', exact=True) }}\n      run:\n        - python\n        - {{ pin_compatible('numpy') }}\n        # I don't think run exports work with pin exact subpackage\n        - {{ pin_subpackage('zfp', exact=True) }}\n    test:\n      imports:\n        - zfpy\n\nabout:\n  home: https://computation.llnl.gov/projects/floating-point-compression\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'Library for compressed numerical arrays that support high throughput read and write random access'\n  description: |\n    zfp is an open source C/C++ library for compressed numerical arrays\n    that support high throughput read and write random access. zfp also\n    supports streaming compression of integer and floating-point data,\n    e.g., for applications that read and write large data sets to and\n    from disk. zfp is primarily written in C and C++ but also includes\n    Python and Fortran bindings.\n  doc_url: http://zfp.readthedocs.io/en/release0.5.5/\n  dev_url: https://github.com/LLNL/zfp\n\nextra:\n  recipe-maintainers:\n    - kmpaul\n    - ToreAad\n    - lindstro\n    - GarrettDMorrison\n    - hmaarrfk\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "cxx_compiler_stub",
   "cython",
   "libgomp",
   "llvm-openmp",
   "make",
   "ninja",
   "numpy",
   "python",
   "zfp"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp",
    "make",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cxx_compiler_stub",
    "cython",
    "numpy",
    "openmp",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cxx_compiler_stub",
    "numpy",
    "openmp",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp",
    "make",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz",
 "version": "0.5.5",
 "win_64_meta_yaml": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "8",
   "rpaths": null,
   "run_exports": [
    "zfp"
   ],
   "script": "/tmp/tmp4qkpd0v7\\bld_zfp.bat"
  },
  "extra": {
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "outputs": [
   {
    "name": "zfp"
   },
   {
    "build": {
     "script": "/tmp/tmp4qkpd0v7\\bld_zfpy.bat"
    },
    "name": "zfpy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cmake",
      "ninja"
     ],
     "host": [
      "python",
      "numpy",
      "cython",
      "zfp"
     ],
     "run": [
      "python",
      "numpy",
      "zfp"
     ]
    },
    "test": {
     "imports": [
      "zfpy"
     ]
    }
   }
  ],
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch",
    "109-avoid-importing-cpython-array.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "if not exist %LIBRARY_INC%\\zfp.h exit 1",
    "if not exist %LIBRARY_BIN%\\zfp.dll exit 1",
    "if not exist %LIBRARY_LIB%\\zfp.lib exit 1",
    "if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1",
    "where zfp"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "numpy",
    "python",
    "zfp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python",
    "zfp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}