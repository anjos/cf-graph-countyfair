{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222628090.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/256245365.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/281038548.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/304815544.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/329927608.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/336082777.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/556415465.json"
   },
   "data": {
    "bot_rerun": 1615344003.4012864,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/556433054.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/588993074.json"
   },
   "data": {
    "bot_rerun": 1615662626.9787064,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/589044704.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/592355730.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/592418071.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/620635098.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/682531709.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/699942755.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/743128946.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/763585094.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/804004639.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/829657623.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/833952695.json"
   },
   "data": {
    "bot_rerun": 1643778729.25207,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/837963570.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/884286414.json"
   },
   "data": {
    "bot_rerun": 1647849025.5186205,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/884414149.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch111"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/884552136.json"
   },
   "data": {
    "bot_rerun": 1647865941.0327952,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/884836741.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/893128226.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "ffmpeg44"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/994086558.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "ffmpeg44"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/999699275.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "torchvision",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/pytorch/vision",
   "doc_url": "http://pytorch.org/docs/master/torchvision",
   "home": "http://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Image and video datasets and models for torch deep learning"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "feedstock-name": "torchvision",
   "recipe-maintainers": [
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "string": "cuda111py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   }
  ],
  "package": {
   "name": "torchvision-split",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "sha256": "2fe9139150800820d02c867a0b64b7c7fbc964d48d76fae235d6ef9215eabcf4",
   "url": "https://github.com/pytorch/vision/archive/v0.13.0.tar.gz"
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cudnn",
    "jpeg",
    "libpng",
    "numpy",
    "pillow",
    "pip",
    "python",
    "pytorch",
    "requests",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cudnn",
    "numpy",
    "pillow",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "av",
    "pytest",
    "pytest-mock",
    "requests",
    "scipy"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "dev_url": "https://github.com/pytorch/vision",
   "doc_url": "http://pytorch.org/docs/master/torchvision",
   "home": "http://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Image and video datasets and models for torch deep learning"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "feedstock-name": "torchvision",
   "recipe-maintainers": [
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "string": "cuda111py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda102py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda112py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda111py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cuda110py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "sysroot_linux-64 ==2.17"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "cudnn",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cuda*",
      "requests"
     ],
     "run": [
      "python",
      "cudnn",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cuda*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   }
  ],
  "package": {
   "name": "torchvision-split",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "sha256": "2fe9139150800820d02c867a0b64b7c7fbc964d48d76fae235d6ef9215eabcf4",
   "url": "https://github.com/pytorch/vision/archive/v0.13.0.tar.gz"
  }
 },
 "name": "torchvision-split",
 "new_version": "5996",
 "new_version_attempts": {
  "0.10.0": 25,
  "0.10.1": 1,
  "0.11.1": 1,
  "0.11.2": 1,
  "0.11.3": 2,
  "0.12.0": 70,
  "0.8.2": 1,
  "0.9.0": 9,
  "0.9.1": 105,
  "1449": 7,
  "5291": 9,
  "5491": 3,
  "5543": 7,
  "5547": 11,
  "5996": 19
 },
 "new_version_errors": {
  "0.10.0": "We found a problem parsing the recipe for version '0.10.0': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 28, column 7:\n          string__###conda-selector###__cu ... \n          ^ (line: 28), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 29, column 125:\n     ...  cuda_compiler_version|replace(\".\", \"\") }}h<{ PKG_HASH }}_<{ num ... \n                                         ^ (line: 29))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 502, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 455, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 120, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 141, in compose_node\n    node = self.compose_sequence_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 185, in compose_sequence_node\n    node.value.append(self.compose_node(node, index))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 611, in parse_block_mapping_key\n    raise ParserError(\n",
  "0.12.0": "We found a problem parsing the recipe for version '0.12.0': \n\nAssertionError('\\n')\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 509, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 476, in __init__\n    v, e = _parse_jinja2_variables(meta_yaml)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 117, in _parse_jinja2_variables\n    assert False, jinja2_data\n",
  "0.9.0": "We found a problem parsing the recipe for version '0.9.0': \n\nParserError('while parsing a block mapping', <ruamel.yaml.error.StringMark object at 0x7fa0c5f97c10>, \"expected <block end>, but found '<scalar>'\", <ruamel.yaml.error.StringMark object at 0x7fa0c5c1e270>)\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 472, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 455, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/main.py\", line 343, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/constructor.py\", line 111, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 78, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 101, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 138, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 218, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 136, in compose_node\n    node = self.compose_sequence_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 180, in compose_sequence_node\n    node.value.append(self.compose_node(node, index))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 138, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 218, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 138, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/composer.py\", line 211, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/parser.py\", line 140, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/site-packages/ruamel/yaml/parser.py\", line 585, in parse_block_mapping_key\n    raise ParserError(\n",
  "0.9.1": "We found a problem parsing the recipe for version '0.9.1': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 28, column 7:\n          string__###conda-selector###__cu ... \n          ^ (line: 28), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 29, column 125:\n     ...  cuda_compiler_version|replace(\".\", \"\") }}h<{ PKG_HASH }}_<{ num ... \n                                         ^ (line: 29))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 472, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 455, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 120, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 141, in compose_node\n    node = self.compose_sequence_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 185, in compose_sequence_node\n    node.value.append(self.compose_node(node, index))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 611, in parse_block_mapping_key\n    raise ParserError(\n",
  "1449": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '1449' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n",
  "5291": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5291' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n",
  "5491": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5491' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n",
  "5543": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5543' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n",
  "5547": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5547' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n",
  "5996": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '5996' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz'\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/pytorch/vision",
   "doc_url": "http://pytorch.org/docs/master/torchvision",
   "home": "http://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Image and video datasets and models for torch deep learning"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "feedstock-name": "torchvision",
   "recipe-maintainers": [
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "string": "cpu_py37h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   }
  ],
  "package": {
   "name": "torchvision-split",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "sha256": "2fe9139150800820d02c867a0b64b7c7fbc964d48d76fae235d6ef9215eabcf4",
   "url": "https://github.com/pytorch/vision/archive/v0.13.0.tar.gz"
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "jpeg",
    "libpng",
    "numpy",
    "pillow",
    "pip",
    "python",
    "pytorch",
    "requests",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pillow",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "av",
    "pytest",
    "pytest-mock",
    "requests",
    "scipy"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "dev_url": "https://github.com/pytorch/vision",
   "doc_url": "http://pytorch.org/docs/master/torchvision",
   "home": "http://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Image and video datasets and models for torch deep learning"
  },
  "build": {
   "number": "0"
  },
  "extra": {
   "feedstock-name": "torchvision",
   "recipe-maintainers": [
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari",
    "nehaljwani",
    "hmaarrfk",
    "h-vetinari"
   ]
  },
  "outputs": [
   {
    "build": {
     "string": "cpu_py310h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py39h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "string": "cpu_py38h1234567_0"
    },
    "name": "torchvision",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub"
     ],
     "host": [
      "python",
      "pip",
      "setuptools",
      "jpeg",
      "libpng",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "pytorch",
      "pytorch =*=cpu*",
      "requests"
     ],
     "run": [
      "python",
      "numpy",
      "pillow >=5.3.0,!=8.3.0,!=8.3.1",
      "requests"
     ],
     "run_constrained": [
      "pytorch =*=cpu*"
     ]
    },
    "script": "build-torch.sh",
    "test": {
     "commands": [
      "pytest --verbose -k \"not (test_url_is_accessible or test_adjust_sharpness or test_forward_backward or test_jit_forward_backward or test_frame_reading or test_randomperspective_fill or test_frozenbatchnorm2d_eps or test_random_apply or test_write_video_with_audio or test_memory_efficient_densenet or test_resnet_dilation or test_mobilenet_v2_residual_setting or test_mobilenet_norm_layer or test_inception_v3_eval or test_fasterrcnn_double or test_googlenet_eval or test_fasterrcnn_switch_devices or test_mobilenet_v2_residual_setting or test_vitc_models or test_classification_model or test_segmentation_model or test_detection_model or test_detection_model_validation or test_video_model or test_quantized_classification_model or test_detection_model_trainable_backbone_layers or test_raft or test_build_fx_feature_extractor)\" --durations=50 test/"
     ],
     "imports": [
      "torchvision",
      "torchvision.datasets",
      "torchvision.models",
      "torchvision.transforms",
      "torchvision.utils"
     ],
     "requires": [
      "pytest",
      "av",
      "requests",
      "scipy",
      "pytest-mock"
     ],
     "source_files": [
      "test"
     ]
    }
   }
  ],
  "package": {
   "name": "torchvision-split",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "source": {
   "sha256": "2fe9139150800820d02c867a0b64b7c7fbc964d48d76fae235d6ef9215eabcf4",
   "url": "https://github.com/pytorch/vision/archive/v0.13.0.tar.gz"
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "jpeg",
    "libpng",
    "numpy",
    "pillow",
    "pip",
    "python",
    "pytorch",
    "requests",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "pillow",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "av",
    "pytest",
    "pytest-mock",
    "requests",
    "scipy"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "torchvision"
  ]
 },
 "pinning_version": "2022.07.18.11.18.34",
 "pre_pr_migrator_attempts": {
  "cuda110": 1
 },
 "pre_pr_migrator_status": {
  "cuda110": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/648741383\">bot CI job</a>): master: ['linux_64_cuda_compiler_version11.0cudnn8python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.0cudnn8python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n', 'linux_64_cuda_compiler_version11.0cudnn8python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit >=8.0,<8.1.0a0 needed by pytorch-1.0.1-cuda80py27ha8650f8_0\\n']"
 },
 "raw_meta_yaml": "{% set version = \"0.13.0\" %}\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: torchvision-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/pytorch/vision/archive/v{{ version }}.tar.gz\n  sha256: 2fe9139150800820d02c867a0b64b7c7fbc964d48d76fae235d6ef9215eabcf4\n\nbuild:\n  number: 0\n  skip: true  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n\noutputs:\n  - name: torchvision\n    script: build-torch.sh  # [not win]\n    script: build-torch.bat  # [win]\n    build:\n      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}                 # [cuda_compiler_version != \"None\"]\n        - sysroot_linux-64 ==2.17                # [linux64]\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n        - pytorch                                # [build_platform != target_platform]\n        - pytorch =*={{ torch_proc_type }}*      # [build_platform != target_platform]\n      host:\n        - python\n        - pip\n        - setuptools\n        - cudnn                                  # [cuda_compiler_version != \"None\"]\n        # split off image/video into separate outputs?\n        - jpeg\n        - libpng\n        # Specify lgpl version of ffmpeg so that there are\n        # no quesitons about the license of the resulting binary\n        # hmaarrfk: 2022/07, I think that torchvision just has bugs with ffmpeg\n        # - ffmpeg {{ ffmpeg }}=lgpl_*\n        - numpy\n        # exclude 8.3.0 and 8.3.1 specifically due to pytorch/vision#4146, python-pillow/Pillow#5571\n        - pillow >=5.3.0,!=8.3.0,!=8.3.1\n        - pytorch\n        - pytorch =*={{ torch_proc_type }}*\n        - requests\n      run:\n        - python\n        - {{ pin_compatible('cudnn') }}          # [cuda_compiler_version != \"None\"]\n        - {{ pin_compatible('numpy') }}\n        - pillow >=5.3.0,!=8.3.0,!=8.3.1\n        - requests\n      run_constrained:\n        # 2022/02/05 hmaarrfk\n        # While conda packaging seems to allow us to specify\n        # constraints on the same package in different lines\n        # the resulting package doesn't have the ability to\n        # be specified in multiples lines\n        # This makes it tricky to use run_exports\n        # we add the GPU constraint in the run_constrained\n        # to allow us to have \"two\" constraints on the\n        # running package\n        - pytorch =*={{ torch_proc_type }}*\n\n    test:\n      requires:\n        - pytest\n        - av\n        - requests\n        - scipy\n        - pytest-mock\n      source_files:\n        - test\n      imports:\n        - torchvision\n        - torchvision.datasets\n        - torchvision.models\n        - torchvision.transforms\n        - torchvision.utils\n      commands:\n        # skip test_url_is_accessible instead of hitting 20+ servers per run, since\n        # each server might be occasionally unresponsive and end up failing our CI\n        {% set tests_to_skip = \"test_url_is_accessible\" %}\n        # osx warns with nnpack if there is no AVX2, see conda-forge/pytorch-cpu-feedstock#56\n        {% set tests_to_skip = tests_to_skip + \" or test_adjust_sharpness\" %}  # [osx]\n        # 2021/10/28 hmaarrfk: I am able to run it locally on a large machine.\n        # It seems to fail around testing of vgg\n        # This test seems to just destroy the memory of the system.\n        {% set tests_to_skip = tests_to_skip + \" or test_forward_backward\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_jit_forward_backward\" %}\n        # 2022/01/21 hmaarrfk (test_frame_reading)\n        # They indicate that there can be a 1% error in their test.\n        # However, this test seems to causing the CIs to fail when this\n        # case is hit. For example the last CI failed with\n        #\n        # >                   assert mean_delta.item() < 2.5\n        # E                   assert 2.502098560333252 < 2.5\n        {% set tests_to_skip = tests_to_skip + \" or test_frame_reading\" %}\n        # Random perspective tests can fail if the perspective is too sharp\n        # https://github.com/conda-forge/torchvision-feedstock/issues/38\n        {% set tests_to_skip = tests_to_skip + \" or test_randomperspective_fill\" %}\n        # Tolerance on the test_frozenbatchnorm2d_eps test seems to be too strict\n        {% set tests_to_skip = tests_to_skip + \" or test_frozenbatchnorm2d_eps\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_random_apply\" %}\n        # 2022/03/29 hmaarrfk\n        # It seems that this test can cause segmentation faults on the CIs.\n        {% set tests_to_skip = tests_to_skip + \" or test_write_video_with_audio\" %}\n        # 2022/07 hmaarrfk really large memory tests. Fail on CIs\n        {% set tests_to_skip = tests_to_skip + \" or test_memory_efficient_densenet\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_resnet_dilation\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_mobilenet_v2_residual_setting\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_mobilenet_norm_layer\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_inception_v3_eval\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_fasterrcnn_double\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_googlenet_eval\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_fasterrcnn_switch_devices\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_mobilenet_v2_residual_setting\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_vitc_models\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_classification_model\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_segmentation_model\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_detection_model\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_detection_model_validation\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_video_model\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_quantized_classification_model\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_detection_model_trainable_backbone_layers\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_raft\" %}\n        {% set tests_to_skip = tests_to_skip + \" or test_build_fx_feature_extractor\" %}\n        - pytest --verbose -k \"not ({{ tests_to_skip }})\" --durations=50 test/\n\nabout:\n  home: http://pytorch.org/\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Image and video datasets and models for torch deep learning\n  dev_url: https://github.com/pytorch/vision\n  doc_url: http://pytorch.org/docs/master/torchvision\n\nextra:\n  recipe-maintainers:\n    - nehaljwani\n    - hmaarrfk\n    - h-vetinari\n  feedstock-name: torchvision\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cuda_compiler_stub",
   "cudnn",
   "cxx_compiler_stub",
   "jpeg",
   "libpng",
   "numpy",
   "pillow",
   "pip",
   "python",
   "pytorch",
   "requests",
   "setuptools",
   "sysroot_linux-64"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cudnn",
    "cxx_compiler_stub",
    "jpeg",
    "libpng",
    "linux-sysroot",
    "numpy",
    "pillow",
    "pip",
    "python",
    "pytorch",
    "requests",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cudnn",
    "cxx_compiler_stub",
    "linux-sysroot",
    "numpy",
    "pillow",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "av",
    "pytest",
    "pytest-mock",
    "requests",
    "scipy"
   ]
  }
 },
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "sysroot_linux-64 ==2.17"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cudnn",
    "jpeg",
    "libpng",
    "numpy",
    "pillow >=5.3.0,!=8.3.0,!=8.3.1",
    "pip",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "pytorch =*=cuda*",
    "requests",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cudnn",
    "numpy",
    "pillow >=5.3.0,!=8.3.0,!=8.3.1",
    "python",
    "requests"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "av",
    "pytest",
    "pytest-mock",
    "requests",
    "scipy"
   ]
  }
 },
 "url": "https://github.com/pytorch/vision/archive/v0.13.0.tar.gz",
 "version": "0.13.0"
}