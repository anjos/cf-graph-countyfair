{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/789631929.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/799854580.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/801764872.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/803676683.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/816872277.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/819132843.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/821549768.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/828480240.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": {
  "exception": "<class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
  "traceback": [
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request",
   "    six.raise_from(e, None)",
   "  File \"<string>\", line 3, in raise_from",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request",
   "    httplib_response = conn.getresponse()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 1377, in getresponse",
   "    response.begin()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 320, in begin",
   "    version, status, reason = self._read_status()",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 281, in _read_status",
   "    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto",
   "    return self._sock.recv_into(b)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into",
   "    return self.read(nbytes, buffer)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read",
   "    return self._sslobj.read(len, buffer)",
   "socket.timeout: The read operation timed out",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 440, in send",
   "    resp = conn.urlopen(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen",
   "    retries = retries.increment(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 550, in increment",
   "    raise six.reraise(type(error), error, _stacktrace)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 770, in reraise",
   "    raise value",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen",
   "    httplib_response = self._make_request(",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 451, in _make_request",
   "    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 340, in _raise_timeout",
   "    raise ReadTimeoutError(",
   "urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 193, in _request",
   "    return request_method(*args, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 577, in post",
   "    return self.request('POST', url, data=data, json=json, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/session.py\", line 171, in request",
   "    response = super().request(*args, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request",
   "    resp = self.send(prep, **send_kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 645, in send",
   "    r = adapter.send(request, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 532, in send",
   "    raise ReadTimeout(e, request=request)",
   "requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   "",
   "During handling of the above exception, another exception occurred:",
   "",
   "Traceback (most recent call last):",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1133, in _run_migrator",
   "    migrator_uid, pr_json = run(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 389, in run",
   "    pr_json = push_repo(",
   "  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 650, in push_repo",
   "    pr = repo.create_pull(title, base_branch, head, body=body)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/decorators.py\", line 24, in auth_wrapper",
   "    return func(self, *args, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/repos/repo.py\", line 1175, in create_pull",
   "    return self._create_pull(data)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/repos/repo.py\", line 117, in _create_pull",
   "    json = self._json(self._post(url, data=data), 201)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 218, in _post",
   "    return self._request(\"post\", url, data, **kwargs)",
   "  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 198, in _request",
   "    raise exceptions.ConnectionError(exc)",
   "github3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)",
   ""
  ]
 },
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "changeforest",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Change point detection tries to identify times when the probability distribution of a\nstochastic process or time series changes. Existing methods either assume a parametric\nmodel for within-segment distributions or a based on ranks or distances, and thus fail\nin scenarios with reasonably large dimensionality.\n\n`changeforest` implements a classifier based algorithm that consistently estimates\nchange points without any parametric assumptions even in high-dimensional scenarios.\nSee [1] for details.\n\n[1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\nnonparametric classifiers for multivariate change point detection\", working paper.\n",
   "dev_url": "https://github.com/mlondschien/changeforest",
   "home": "https://github.com/mlondschien/changeforest",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Classifier based non-parametric change point detection"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien"
   ]
  },
  "package": {
   "name": "changeforest",
   "version": "0.4.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b",
   "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Change point detection tries to identify times when the probability distribution of a\nstochastic process or time series changes. Existing methods either assume a parametric\nmodel for within-segment distributions or a based on ranks or distances, and thus fail\nin scenarios with reasonably large dimensionality.\n\n`changeforest` implements a classifier based algorithm that consistently estimates\nchange points without any parametric assumptions even in high-dimensional scenarios.\nSee [1] for details.\n\n[1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\nnonparametric classifiers for multivariate change point detection\", working paper.\n",
   "dev_url": "https://github.com/mlondschien/changeforest",
   "home": "https://github.com/mlondschien/changeforest",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Classifier based non-parametric change point detection"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien"
   ]
  },
  "package": {
   "name": "changeforest",
   "version": "0.4.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b",
   "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "changeforest",
 "new_version": "0.4.3",
 "new_version_attempts": {
  "0.2.0": 1,
  "0.2.1": 1,
  "0.3.0": 1,
  "0.4.0": 1,
  "0.4.1": 1,
  "0.4.2": 1,
  "0.4.3": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Change point detection tries to identify times when the probability distribution of a\nstochastic process or time series changes. Existing methods either assume a parametric\nmodel for within-segment distributions or a based on ranks or distances, and thus fail\nin scenarios with reasonably large dimensionality.\n\n`changeforest` implements a classifier based algorithm that consistently estimates\nchange points without any parametric assumptions even in high-dimensional scenarios.\nSee [1] for details.\n\n[1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\nnonparametric classifiers for multivariate change point detection\", working paper.\n",
   "dev_url": "https://github.com/mlondschien/changeforest",
   "home": "https://github.com/mlondschien/changeforest",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Classifier based non-parametric change point detection"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien"
   ]
  },
  "package": {
   "name": "changeforest",
   "version": "0.4.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b",
   "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "Change point detection tries to identify times when the probability distribution of a\nstochastic process or time series changes. Existing methods either assume a parametric\nmodel for within-segment distributions or a based on ranks or distances, and thus fail\nin scenarios with reasonably large dimensionality.\n\n`changeforest` implements a classifier based algorithm that consistently estimates\nchange points without any parametric assumptions even in high-dimensional scenarios.\nSee [1] for details.\n\n[1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\nnonparametric classifiers for multivariate change point detection\", working paper.\n",
   "dev_url": "https://github.com/mlondschien/changeforest",
   "home": "https://github.com/mlondschien/changeforest",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Classifier based non-parametric change point detection"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mlondschien",
    "mlondschien",
    "mlondschien"
   ]
  },
  "package": {
   "name": "changeforest",
   "version": "0.4.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b",
   "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "changeforest",
    "changeforest",
    "changeforest"
   ],
   "requires": [
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "changeforest"
  ]
 },
 "pinning_version": "2022.01.20.21.36.34",
 "pre_pr_migrator_attempts": {
  "version": 1
 },
 "pre_pr_migrator_status": {
  "version": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1766666749\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 449, in _make_request\n    six.raise_from(e, None)\n  File \"<string>\", line 3, in raise_from\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 444, in _make_request\n    httplib_response = conn.getresponse()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 1377, in getresponse\n    response.begin()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 320, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/http/client.py\", line 281, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/socket.py\", line 704, in readinto\n    return self._sock.recv_into(b)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1241, in recv_into\n    return self.read(nbytes, buffer)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/ssl.py\", line 1099, in read\n    return self._sslobj.read(len, buffer)\nsocket.timeout: The read operation timed out\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 440, in send\n    resp = conn.urlopen(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 785, in urlopen\n    retries = retries.increment(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/util/retry.py\", line 550, in increment\n    raise six.reraise(type(error), error, _stacktrace)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/packages/six.py\", line 770, in reraise\n    raise value\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 703, in urlopen\n    httplib_response = self._make_request(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 451, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 340, in _raise_timeout\n    raise ReadTimeoutError(\nurllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 193, in _request\n    return request_method(*args, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 577, in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/session.py\", line 171, in request\n    response = super().request(*args, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 529, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/sessions.py\", line 645, in send\n    r = adapter.send(request, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/requests/adapters.py\", line 532, in send\n    raise ReadTimeout(e, request=request)\nrequests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1133, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 389, in run\n    pr_json = push_repo(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/git_utils.py\", line 650, in push_repo\n    pr = repo.create_pull(title, base_branch, head, body=body)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/decorators.py\", line 24, in auth_wrapper\n    return func(self, *args, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/repos/repo.py\", line 1175, in create_pull\n    return self._create_pull(data)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/repos/repo.py\", line 117, in _create_pull\n    json = self._json(self._post(url, data=data), 201)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 218, in _post\n    return self._request(\"post\", url, data, **kwargs)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/github3/models.py\", line 198, in _request\n    raise exceptions.ConnectionError(exc)\ngithub3.exceptions.ConnectionError: <class 'requests.exceptions.ReadTimeout'>: A connection-level exception occurred: HTTPSConnectionPool(host='api.github.com', port=443): Read timed out. (read timeout=10)\n"
 },
 "raw_meta_yaml": "{% set name = \"changeforest\" %}\n{% set version = \"0.4.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('rust') }}\n  host:\n    - python\n    - pip\n    - maturin\n  run:\n    - python\n    - numpy\n\ntest:\n  imports:\n    - changeforest\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/mlondschien/changeforest\n  license: BSD-3-Clause\n  license_file: LICENSE\n  summary: Classifier based non-parametric change point detection\n  description: |\n    Change point detection tries to identify times when the probability distribution of a\n    stochastic process or time series changes. Existing methods either assume a parametric\n    model for within-segment distributions or a based on ranks or distances, and thus fail\n    in scenarios with reasonably large dimensionality.\n\n    `changeforest` implements a classifier based algorithm that consistently estimates\n    change points without any parametric assumptions even in high-dimensional scenarios.\n    See [1] for details.\n\n    [1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\n    nonparametric classifiers for multivariate change point detection\", working paper.\n  dev_url: https://github.com/mlondschien/changeforest\n\nextra:\n  recipe-maintainers:\n    - mlondschien\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "maturin",
   "numpy",
   "pip",
   "python",
   "rust_compiler_stub"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.16.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz",
 "version": "0.4.2",
 "win_64_meta_yaml": {
  "about": {
   "description": "Change point detection tries to identify times when the probability distribution of a\nstochastic process or time series changes. Existing methods either assume a parametric\nmodel for within-segment distributions or a based on ranks or distances, and thus fail\nin scenarios with reasonably large dimensionality.\n\n`changeforest` implements a classifier based algorithm that consistently estimates\nchange points without any parametric assumptions even in high-dimensional scenarios.\nSee [1] for details.\n\n[1] M. Londschien, S. Kov\u00E1cs and P. B\u00FChlmann (2021), \"Random Forests and other\nnonparametric classifiers for multivariate change point detection\", working paper.\n",
   "dev_url": "https://github.com/mlondschien/changeforest",
   "home": "https://github.com/mlondschien/changeforest",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Classifier based non-parametric change point detection"
  },
  "build": {
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "mlondschien",
    "mlondschien",
    "mlondschien",
    "mlondschien"
   ]
  },
  "package": {
   "name": "changeforest",
   "version": "0.4.2"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub",
    "c_compiler_stub",
    "rust_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin",
    "python",
    "pip",
    "maturin"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "f37810e12c04135b9404036864db3a7fc67e651530c54b2cea3bd5b14215164b",
   "url": "https://pypi.io/packages/source/c/changeforest/changeforest-0.4.2.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "pip check",
    "pip check",
    "pip check"
   ],
   "imports": [
    "changeforest",
    "changeforest",
    "changeforest",
    "changeforest"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "rust_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "maturin",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}