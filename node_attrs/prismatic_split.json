{
 "PRed": [
  {
   "PR": {
    "id": "024fdd3c-63fd-4f66-8e68-6bc496dfc495",
    "merged_at": "never issued",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/378510769.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/440845012.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51106"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485553676.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/499518132.json"
   },
   "data": {
    "bot_rerun": 1602545059.9843848,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503471893.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/505095041.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/527679738.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560160238.json"
   },
   "data": {
    "bot_rerun": 1616255681.582481,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/597226096.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/597311205.json"
   },
   "data": {
    "bot_rerun": 1634057335.6303782,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/755740557.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/771043837.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783401613.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/958197883.json"
   },
   "data": {
    "bot_rerun": 1660571574.043902,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "qt515"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1025911191.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51122"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1026546615.json"
   },
   "data": {
    "bot_rerun": 1671675695.577248,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "qt515"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1052227228.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost1780"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1174483558.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "qt515"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: InvalidVersion(\"Invalid version: '3.10.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 200, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: InvalidVersion(\"Invalid version: '3.10.* *_cpython'\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 194, in parse_meta_yaml\n    return _run(use_orig_cbc_path=True)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 198, in parse_meta_yaml\n    return _run(use_orig_cbc_path=False)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 181, in _run\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 283, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1075, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1167, in parse_again\n    self._get_contents(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1836, in _get_contents\n    env.globals.update(ns_cfg(self.config))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 102, in ns_cfg\n    defaults = variants.get_default_variant(config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 109, in get_default_variant\n    base.update(_get_default_compilers(config.platform, python))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 90, in _get_default_compilers\n    if parse_version(py_ver) >= parse_version('3.5'):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/pkg_resources/_vendor/packaging/version.py\", line 266, in __init__\n    raise InvalidVersion(f\"Invalid version: '{version}'\")\npkg_resources.extern.packaging.version.InvalidVersion: Invalid version: '3.10.* *_cpython'\n\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "prismatic_split",
 "hash_type": "sha256",
 "name": "prismatic_split",
 "new_version": "2.0",
 "new_version_attempts": {
  "2.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "prismatic",
   "prismatic_cli",
   "prismatic_gui",
   "pyprismatic"
  ]
 },
 "pinning_version": "2022.12.21.17.38.36",
 "pre_pr_migrator_attempts": {
  "boost1780": 270,
  "cuda110": 1,
  "python311": 167,
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "boost1780": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3337809201\">bot CI job</a>): main: ['linux_64_c_compiler_version10cuda_compiler_version11.1cxx_compiler_version10: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version10cuda_compiler_version11.2cxx_compiler_version10: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version10cuda_compiler_versionNonecxx_compiler_version10: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version7cuda_compiler_version10.2cxx_compiler_version7: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version9cuda_compiler_version11.0cxx_compiler_version9: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'osx_64_: Encountered problems while solving:\\n  - package qt-5.12.1-h1b46049_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n']",
  "cuda110": "not solvable: ['linux_64_boost_cpp1.72.0cuda_compiler_version11.0: Encountered problems while solving.\\nProblem: nothing provides __glibc >=2.17 needed by nvcc_linux-64-11.0-he443bbd_6\\n', 'linux_64_boost_cpp1.74.0cuda_compiler_version11.0: Encountered problems while solving.\\nProblem: nothing provides __glibc >=2.17 needed by nvcc_linux-64-11.0-he443bbd_6\\n']",
  "python311": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3929211989\">bot CI job</a>): main: ['linux_64_c_compiler_version10cuda_compiler_version11.1cxx_compiler_version10: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version10cuda_compiler_version11.2cxx_compiler_version10: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version11cuda_compiler_versionNonecxx_compiler_version11: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version7cuda_compiler_version10.2cxx_compiler_version7: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'linux_64_c_compiler_version9cuda_compiler_version11.0cxx_compiler_version9: Encountered problems while solving:\\n  - package qt-5.12.1-hbfa2a6e_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n', 'osx_64_: Encountered problems while solving:\\n  - package qt-5.12.1-h1b46049_0 requires icu >=64.2,<65.0a0, but none of the providers can be installed\\n']",
  "python39": "not solvable: ['Encountered problems while solving.\\nProblem: nothing provides requested __cuda\\n']"
 },
 "raw_meta_yaml": "{% set processor = \"cpu\" %}\n{% set version = \"2.0\" %}\n{% set build = 4 %}\n\n{% set processor = \"cpu\" if cuda_compiler_version == \"None\" else \"gpu\" %}  # [not osx]\n{% set processor = \"cpu\" %}  # [osx]\n\n# Prioritize gpu build if cudatoolkit can be installed (through __cuda virtual package)\n{% set build = build + 100 if processor == \"gpu\" else build %}\n\npackage:\n  name: prismatic_split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/prism-em/prismatic/archive/v{{ version }}.tar.gz\n  sha256: a568878462996160869456f2fcc721e1722322a4192e3dd9c6d80af2245072e7\n  patches:\n    - 0001-Fix-compilation-error-with-clang-macos-implicit-conv.patch\n\nbuild:\n  number: {{ build }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [not osx and cuda_compiler_version != \"None\"]\n    - {{ cdt('libxext-devel') }}         # [linux]\n    - {{ cdt('mesa-libgl-devel') }}      # [linux]\n    - {{ cdt('mesa-dri-drivers') }}      # [linux]\n    - {{ cdt('libxau-devel') }}          # [linux]\n    - {{ cdt('libselinux-devel') }}      # [linux]\n    - {{ cdt('libxdamage') }}            # [linux]\n    - {{ cdt('libxfixes') }}             # [linux]\n    - {{ cdt('libxxf86vm') }}            # [linux]\n    - make                               # [unix]\n    - ninja                              # [win]\n    - cmake\n    - pkg-config\n\n\noutputs:\n  - name: prismatic\n    build:\n      number: {{ build }}\n      skip: true  # [py2k]\n      string: {{ processor }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}\n    requirements:\n      host:\n        - python\n      run:\n        - {{ pin_subpackage('prismatic_cli', exact=True) }}\n        - {{ pin_subpackage('prismatic_gui', exact=True) }}\n        - {{ pin_subpackage('pyprismatic', exact=True) }}\n\n    test:\n      commands:\n        - command -v prismatic-gui  # [linux64 and cuda_compiler_version == \"None\"]\n        - test -f $PREFIX/Applications/prismatic-gui.app/Contents/MacOS/prismatic-gui  # [osx]\n        - where prismatic-gui  # [win and cuda_compiler_version == \"None\"]\n        - where prismatic  # [win and cuda_compiler_version == \"None\"]\n        - python -c \"import pyprismatic; pyprismatic.demo()\"  # [not osx and cuda_compiler_version == \"None\"]\n\n  - name: prismatic_cli\n    build:\n      string: {{ processor }}_h{{ PKG_HASH }}_{{ build }}\n      script: bash ${RECIPE_DIR}/combined_build_install.sh cli  # [not win]\n      script: {{ RECIPE_DIR }}\\build.bat cli  # [win]\n\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}  # [not osx and cuda_compiler_version != \"None\"]\n        - {{ cdt('libxext-devel') }}         # [linux]\n        - {{ cdt('mesa-libgl-devel') }}      # [linux]\n        - {{ cdt('mesa-dri-drivers') }}      # [linux]\n        - {{ cdt('libxau-devel') }}          # [linux]\n        - {{ cdt('libselinux-devel') }}      # [linux]\n        - {{ cdt('libxdamage') }}            # [linux]\n        - {{ cdt('libxfixes') }}             # [linux]\n        - {{ cdt('libxxf86vm') }}            # [linux]\n        - make                               # [unix]\n        - ninja                              # [win]\n        - cmake\n        - pkg-config\n      host:\n        - boost-cpp\n        - hdf5\n        - fftw\n      run:\n        - hdf5\n        - fftw\n        - __cuda  # [not osx and cuda_compiler_version != \"None\"]\n      ignore_run_exports:\n        - boost-cpp\n\n    test:\n      source_files:\n        - SI100.XYZ\n      commands:\n        - prismatic -i SI100.XYZ  # [(not osx and cuda_compiler_version == \"None\") or osx]\n        - prismatic-double -i SI100.XYZ  # [(not osx and cuda_compiler_version == \"None\") or osx]\n\n  - name: prismatic_gui\n    build:\n      string: {{ processor }}_h{{ PKG_HASH }}_{{ build }}\n      script: bash ${RECIPE_DIR}/combined_build_install.sh gui  # [not win]\n      script: {{ RECIPE_DIR }}\\build.bat gui  # [win]\n\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}  # [not osx and cuda_compiler_version != \"None\"]\n        - {{ cdt('libxext-devel') }}         # [linux]\n        - {{ cdt('mesa-libgl-devel') }}      # [linux]\n        - {{ cdt('mesa-dri-drivers') }}      # [linux]\n        - {{ cdt('libxau-devel') }}          # [linux]\n        - {{ cdt('libselinux-devel') }}      # [linux]\n        - {{ cdt('libxdamage') }}            # [linux]\n        - {{ cdt('libxfixes') }}             # [linux]\n        - {{ cdt('libxxf86vm') }}            # [linux]\n        - make                               # [unix]\n        - ninja                              # [win]\n        - cmake\n        - pkg-config\n      host:\n        - boost-cpp\n        - hdf5\n        - fftw\n        - qt\n      run:\n        - hdf5\n        - fftw\n        - qt\n        - __cuda  # [not osx and cuda_compiler_version != \"None\"]\n      run_constrained:\n        - menuinst >=1.4.17\n      ignore_run_exports:\n        - boost-cpp\n\n    test:\n      commands:\n        - command -v prismatic-gui  # [linux64 and cuda_compiler_version == \"None\"]\n        - test -f $PREFIX/Applications/prismatic-gui.app/Contents/MacOS/prismatic-gui  # [osx]\n        - where prismatic-gui  # [win and cuda_compiler_version == \"None\"]\n        - if not exist %PREFIX%\\\\Menu\\\\prismatic_gui.json exit 1  # [win and cuda_compiler_version == \"None\"]\n        - if not exist %PREFIX%\\\\Menu\\\\prismatic.ico exit 1  # [win and cuda_compiler_version == \"None\"]\n\n  - name: pyprismatic\n    build:\n      skip: true  # [py2k]\n      string: {{ processor }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}\n      script: bash ${RECIPE_DIR}/build_pyprismatic.sh gpu  # [linux64 and cuda_compiler_version != \"None\"]\n      script: bash ${RECIPE_DIR}/build_pyprismatic.sh  # [(linux64 and cuda_compiler_version == \"None\") or osx]\n      script: {{ RECIPE_DIR }}\\build_pyprismatic.bat  # [win]\n\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}  # [not osx and cuda_compiler_version != \"None\"]\n        - {{ cdt('libxext-devel') }}         # [linux]\n        - {{ cdt('mesa-libgl-devel') }}      # [linux]\n        - {{ cdt('mesa-dri-drivers') }}      # [linux]\n        - {{ cdt('libxau-devel') }}          # [linux]\n        - {{ cdt('libselinux-devel') }}      # [linux]\n        - {{ cdt('libxdamage') }}            # [linux]\n        - {{ cdt('libxfixes') }}             # [linux]\n        - {{ cdt('libxxf86vm') }}            # [linux]\n        - make                               # [unix]\n        - ninja                              # [win]\n        - cmake\n        - pkg-config\n      host:\n        - setuptools\n        - python\n        - boost\n        - hdf5\n        - fftw\n        - h5py\n      run:\n        - fftw\n        - h5py\n        - numpy\n        - python\n        - scipy\n        - __cuda  # [not osx and cuda_compiler_version != \"None\"]\n      ignore_run_exports:\n        - boost\n\n    test:\n      commands:\n        - python -c \"import pyprismatic; pyprismatic.demo()\"  # [(not osx and cuda_compiler_version == \"None\") or osx]\n\nabout:\n  home: http://prism-em.com/\n  license: GPL-3.0-only\n  license_file: LICENSE\n  summary: CPU / GPU software for fast simulation of Scanning Transmission Electron Microscopy (STEM) experiments\n  description: |\n    CPU / GPU software for fast simulation of Scanning Transmission Electron Microscopy (STEM) experiments\n  dev_url: https://github.com/prism-em/prismatic\n\nextra:\n  recipe-maintainers:\n    - ericpre\n    - douglowe\n    - tschoonj\n",
 "smithy_version": "3.22.1",
 "strong_exports": false,
 "url": "https://github.com/prism-em/prismatic/archive/v2.0.tar.gz",
 "version": "2.0"
}