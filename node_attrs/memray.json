{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/916509228.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/916775269.json"
   },
   "data": {
    "bot_rerun": 1652810558.3278718,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/938354900.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/939172924.json"
   },
   "data": {
    "bot_rerun": 1661904576.6632617,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/a02a9ed3-25e1-4471-a4a7-c0edcf164e44.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "lz4_c19"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/993740168.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1030589030.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1041374070.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1041666784.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1041736937.json"
   },
   "data": {
    "bot_rerun": 1667285161.0979855,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1105942915.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1106242290.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1106375930.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1119751196.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1156862274.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "memray",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17"
   ],
   "host": [
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "libunwind",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "libunwind",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "libunwind",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "export CFLAGS=\"${CFLAGS} -pthread\"",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "libunwind",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "name": "memray",
 "new_version": "1.5.0",
 "new_version_attempts": {
  "1.1.0": 1,
  "1.2.0": 1,
  "1.3.0": 1,
  "1.3.1": 1,
  "1.4.0": 1,
  "1.4.1": 1,
  "1.5.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "Memray is a memory profiler for Python. It can track memory allocations in\nPython code, in native extension modules, and in the Python interpreter\nitself. It can generate several different types of reports to help you\nanalyze the captured memory usage data. While commonly used as a CLI tool,\nit can also be used as a library to perform more fine-grained profiling\ntasks.\n",
   "dev_url": "https://github.com/bloomberg/memray",
   "doc_url": "https://bloomberg.github.io/memray/",
   "home": "https://github.com/bloomberg/memray",
   "license": "Apache-2.0 AND BSD-3-Clause",
   "license_file": [
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE",
    "LICENSE",
    "src/vendor/libbacktrace/LICENSE"
   ],
   "summary": "Memray is a memory profiler for Python"
  },
  "build": {
   "number": "0",
   "script": [
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv",
    "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener",
    "matthiasdiener"
   ]
  },
  "package": {
   "name": "memray",
   "version": "1.5.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ],
   "host": [
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c",
    "python",
    "pip",
    "cython",
    "lz4-c"
   ],
   "run": [
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2",
    "python",
    "rich",
    "jinja2"
   ]
  },
  "source": {
   "sha256": "2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12",
   "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h",
    "pip check",
    "memray -h"
   ],
   "imports": [
    "memray",
    "memray",
    "memray",
    "memray"
   ],
   "requires": [
    "pip",
    "pip",
    "pip",
    "pip"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "memray"
  ]
 },
 "pinning_version": "2022.12.09.20.17.28",
 "raw_meta_yaml": "{% set name = \"memray\" %}\n{% set version = \"1.5.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 2c2a1a6715f489e2780d110cfe4f6bb779658f000ca737483dde79f99d0dae12\n\nbuild:\n  skip: true  # [win]\n  script:\n    - export CFLAGS=\"${CFLAGS} -pthread\"  # [aarch64 or ppc64le]\n    - {{ PYTHON }} -m pip install . -vv\n  number: 0\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - make\n    - sysroot_linux-64 2.17  # [linux64]\n  host:\n    - python\n    - pip\n    - libunwind  # [linux]\n    - cython\n    - lz4-c\n  run:\n    - python\n    - rich\n    - jinja2\n    - typing-extensions  # [py<38]\n\ntest:\n  imports:\n    - memray\n  requires:\n    - pip\n  commands:\n    - pip check\n    - memray -h\n\nabout:\n  home: https://github.com/bloomberg/memray\n  summary: Memray is a memory profiler for Python\n  description: |\n    Memray is a memory profiler for Python. It can track memory allocations in\n    Python code, in native extension modules, and in the Python interpreter\n    itself. It can generate several different types of reports to help you\n    analyze the captured memory usage data. While commonly used as a CLI tool,\n    it can also be used as a library to perform more fine-grained profiling\n    tasks.\n  license: Apache-2.0 AND BSD-3-Clause\n  license_file:\n    - LICENSE\n    - src/vendor/libbacktrace/LICENSE\n  doc_url: https://bloomberg.github.io/memray/\n  dev_url: https://github.com/bloomberg/memray\n\nextra:\n  recipe-maintainers:\n    - matthiasdiener\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "jinja2",
   "libunwind",
   "lz4-c",
   "make",
   "pip",
   "python",
   "rich",
   "sysroot_linux-64"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "libunwind",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.22.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64 2.17"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "libunwind",
    "lz4-c",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "python",
    "rich"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/m/memray/memray-1.5.0.tar.gz",
 "version": "1.5.0"
}