{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/366070826.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "hybridcontents",
 "hash_type": "sha256",
 "name": "hybridcontents",
 "new_version": "0.3.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "hybridcontents"
  ]
 },
 "pinning_version": "2020.01.16",
 "raw_meta_yaml": "{% set name = \"hybridcontents\" %}\n{% set version = \"0.3.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 6e1242a65c06174563df948e9e861611f18002e09e9916072d78c8ba0b8d5753\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - pip\n    - python\n  run:\n    - python\n    - notebook\n    - six >=1.9.0\n    - requests >=2.7.0\n\ntest:\n  imports:\n    - hybridcontents\n  requires:\n    - pytest\n    - mock\n    - nose\n  source_files:\n    - hybridcontents/tests/*.py\n  commands:\n    - pytest --pyargs hybridcontents/tests/\n\nabout:\n  home: https://github.com/viaduct-ai/hybridcontents\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE\n  summary: \"A ContentsManager wrapper for using multiple ContentsManager in Jupyter\"\n  description: \"The HybridContentManager was originally created by Quantopian as part of pgcontents; however, the usage of HybridContentsManager was restricted to the compatibility requirements of pgcontents. These restrictions included postgres dependencies and no support for the latest notebook version (>6). At Viaduct we used pgcontents exclusively for the HybridContentsManager and wanted to extend its functionality, so we created this fork hybridcontents.\"\n  doc_url: https://github.com/viaduct-ai/hybridcontents\n  dev_url: https://github.com/viaduct-ai/hybridcontents\n\nextra:\n  recipe-maintainers:\n    - yzq89\n    - devstein\n",
 "smithy_version": "3.6.5",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/h/hybridcontents/hybridcontents-0.3.0.tar.gz",
 "version": "0.3.0"
}