{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/274271803.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/394671129.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "catlearn",
 "hash_type": "sha256",
 "name": "catlearn",
 "new_version": "0.6.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "catlearn"
  ]
 },
 "pinning_version": "2020.03.24",
 "raw_meta_yaml": "{% set name = \"catlearn\" %}\n{% set version = \"0.6.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/C/CatLearn/CatLearn-{{ version }}.tar.gz\n  sha256: 5af6622e4660f3b5760267fccd9c5da6f1a4a88aad0aacc044067a68f92e2bbd\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - pip\n    - ase >=3.17.0\n    - click >=6.7\n    - cycler >=0.10.0\n    - decorator >=4.3.0\n    - flask >=1.0.2\n    - h5py >=2.7.1\n    - itsdangerous >=0.24\n    - jinja2 >=2.10\n    - kiwisolver >=1.0.1\n    - markupsafe >=1.0\n    - networkx >=2.1.0\n    - numpy >=1.14.3\n    - pandas >=0.23.0\n    - psutil >=5.4.3\n    - pyparsing >=2.2.0\n    - python-dateutil >=2.7.3\n    - pytz >=2018.4\n    - scikit-learn >=0.19.1\n    - scipy >=1.1.0\n    - six >=1.11.0\n    - tqdm >=4.23.3\n    - werkzeug >=0.14.1\n\ntest:\n  imports:\n    - catlearn\n  commands:\n    - pip check\n\nabout:\n  home: https://github.com/SUNCAT-Center/CatLearn\n  license: GPL-3.0\n  license_family: GPL\n  license_file: LICENSE.txt\n  summary: A machine learning environment for atomic-scale modeling in surface science and catalysis.\n\n  description: |\n    Utilities for building and testing atomic machine learning models. \n    Gaussian Processes (GP) regression machine learning routines are \n    implemented. These will take any numpy array of training and test \n    feature matrices along with a vector of target values.\n    In general, any data prepared in this fashion can be fed to the \n    GP routines, a number of additional functions have been added that \n    interface with ASE. This integration allows for the manipulation of \n    atoms objects through GP predictions, as well as dynamic generation \n    of descriptors through use of the many ASE functions.    \n  doc_url: http://catlearn.readthedocs.io/\n  dev_url: https://github.com/SUNCAT-Center/CatLearn\n\nextra:\n  recipe-maintainers:\n    - jan-janssen\n",
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.6.15",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/C/CatLearn/CatLearn-0.6.2.tar.gz",
 "version": "0.6.2"
}