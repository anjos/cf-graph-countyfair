{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/442612709.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/444472788.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/504217884.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/643257135.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/681749224.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/756496074.json"
   },
   "data": {
    "bot_rerun": 1637618319.6927602,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/785393753.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/786626887.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/806896263.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/859954484.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "terracotta",
 "hash_type": "sha256",
 "name": "terracotta",
 "new_version": "0.7.5",
 "new_version_attempts": {
  "0.7.0": 1,
  "0.7.1": 1,
  "0.7.2": 1,
  "0.7.3": 2,
  "0.7.4": 1,
  "0.7.5": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "terracotta"
  ]
 },
 "pinning_version": "2022.02.21.21.55.10",
 "pre_pr_migrator_attempts": {
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "python39": "not solvable: ['linux_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package apispec-webframeworks-0.5.2-py36h9f0ad1d_0 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'osx_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package apispec-webframeworks-0.5.2-py36h9f0ad1d_0 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"terracotta\" %}\n{% set version = \"0.7.5\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 1bc0437a15dc5a1bde3be290523459a7ab56aab5588e0daa6bfa08e49efe845f\n\nbuild:\n  number: 0\n  entry_points:\n    - terracotta=terracotta.scripts.cli:entrypoint\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - numpy >=1.15,!=1.17.0\n    - pip\n    - setuptools_scm_git_archive\n    - python\n  run:\n    - apispec\n    - apispec-webframeworks\n    - cachetools >=3.1.0\n    - click\n    - click-spinner\n    - flask\n    - flask_cors\n    - marshmallow >=3.0.0\n    - mercantile\n    - numpy >=1.15,!=1.17.0\n    - pillow\n    - python\n    - pyyaml >=3.10\n    - rasterio >=1.0\n    - shapely\n    - toml\n    - tqdm\n\ntest:\n  imports:\n    - terracotta\n    - terracotta.client\n    - terracotta.cmaps\n    - terracotta.drivers\n    - terracotta.handlers\n    - terracotta.scripts\n    - terracotta.server\n  commands:\n    - terracotta --help\n\nabout:\n  home: https://github.com/DHI-GRAS/terracotta\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: A modern XYZ tile server written in Python\n  description: Terracotta is a pure Python tile server that runs as a WSGI app on a dedicated webserver or as a serverless app on AWS Lambda. It is built on a modern Python 3.6 stack, powered by awesome open-source software such as Flask, Zappa, and Rasterio.\n  doc_url: https://pypi.org/project/terracotta/#description\n  dev_url: https://github.com/DHI-GRAS/terracotta\n\nextra:\n  recipe-maintainers:\n    - mxr-conda\n    - bubblyorca\n",
 "smithy_version": "3.17.2",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/t/terracotta/terracotta-0.7.5.tar.gz",
 "version": "0.7.5"
}