{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "lightwood",
 "hash_type": "sha256",
 "name": "lightwood",
 "new_version": "22.8.1.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "lightwood"
  ]
 },
 "raw_meta_yaml": "{% set name = \"lightwood\" %}\n{% set version = \"22.8.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/lightwood-{{ version }}.tar.gz\n  sha256: 43cce4b290ac275206d8f12c506d34b6b74f4aa8413815a693fc26a50de48fed\n\nbuild:\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n  number: 0\n\nrequirements:\n  host:\n    - pip\n    - python >=3.7\n  run:\n    - autopep8 >=1.5.7\n    - black >=21.9b0\n    - colorlog ==6.5.0\n    - dataclasses-json >=0.5.4\n    - dill ==0.3.4\n    - langdetect >=1.0.0,<=1.0.9\n    - lightgbm >=3.2.1,<=3.3.2\n    - neuralforecast ==0.1.0\n    - nltk >=3,<3.6\n    - numpy >=1.18.0,<=1.22.0\n    - optuna >=2.8.0,<2.10.0\n    - pandas >=1.1.5,<=1.3.3\n    - psutil >=5.7.0\n    - python >=3.7\n    - python-dateutil <2.8.1,>=2.1\n    - pytorch-lightning >=1.3.0\n    - requests >=2.0.0\n    - schema >=0.6.8\n    - scikit-learn <=1.0.2\n    - scipy >=1.5.4,<=1.7.1\n    - setuptools >=21.2.1\n    - sktime >=0.11.0,<0.12.0\n    - statsforecast ==0.7.0\n    - statsmodels >=0.12.0\n    - pytorch >=1.9.0\n    - torch-optimizer ==0.1.0\n    - transformers >=4.5.0,<=4.11.3\n    - typing_extensions\n    - wheel >=0.32.2\n\ntest:\n  imports:\n    - lightwood\n\nabout:\n  home: https://github.com/mindsdb/lightwood\n  summary: Lightwood is a toolkit for automatic machine learning model building\n  license: GPL-2.0-or-later\n  license_file:\n    - LICENSE\n  description: |\n    Lightwood is an AutoML framework that enables you to generate and customize machine learning pipelines declarative syntax called JSON-AI.\n\n    Our goal is to make the data science/machine learning (DS/ML) life cycle easier by allowing users to focus on what they want to do their data without needing to write repetitive boilerplate code around machine learning and data preparation. Instead, we enable you to focus on the parts of a model that are truly unique and custom.\n\n    Lightwood works with a variety of data types such as numbers, dates, categories, tags, text, arrays and various multimedia formats. These data types can be combined together to solve complex problems. We also support a time-series mode for problems that have between-row dependencies.\n\n    Our JSON-AI syntax allows users to change any and all parts of the models Lightwood automatically generates. The syntax outlines the specifics details in each step of the modeling pipeline. Users may override default values (for example, changing the type of a column) or alternatively, entirely replace steps with their own methods (ex: use a random forest model for a predictor). Lightwood creates a \"JSON-AI\" object from this syntax which can then be used to automatically generate python code to represent your pipeline.\n\nextra:\n  recipe-maintainers:\n    - paxcema\n",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/l/lightwood/lightwood-22.8.1.0.tar.gz",
 "version": "22.8.1.0"
}