{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/908067860.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-nlsic",
 "hash_type": "sha256",
 "name": "r-nlsic",
 "new_version": "1.0.2",
 "new_version_attempts": {
  "1.0.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-nlsic"
  ]
 },
 "pinning_version": "2022.04.12.16.55.22",
 "raw_meta_yaml": "{% set version = \"1.0.2\" %}\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-nlsic\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/nlsic_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/nlsic/nlsic_{{ version }}.tar.gz\n  sha256: 037e1e58c02e693090b7943e7de9af55dfdd9457f4f99560673b5144466156b7\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n    - cross-r-base {{ r_base }}    # [build_platform != target_platform]\n  host:\n    - r-base\n    - r-nnls\n  run:\n    - r-base\n    - r-nnls\n\ntest:\n  commands:\n    - $R -e \"library('nlsic')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('nlsic')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/MathsCell/nlsic\n  license: GPL-2.0-only\n  summary: We solve non linear least squares problems with optional equality and/or inequality constraints. Non linear iterations are globalized with back-tracking method. Linear problems are solved by dense QR decomposition from 'LAPACK' which can limit the size of treated problems. On the other side, we avoid condition\n    number degradation which happens in classical quadratic programming approach. Inequality constraints treatment on each non linear iteration is based on 'NNLS' method (by Lawson and Hanson). We provide an original function 'lsi_ln' for solving linear least squares problem with inequality constraints in least norm sens.\n    Thus if Jacobian of the problem is rank deficient a solution still can be provided. However, truncation errors are probable in this case. Equality constraints are treated by using a basis of Null-space. User defined function calculating residuals must return a list having residual vector (not their squared sum) and Jacobian.\n    If Jacobian is not in the returned list, package 'numDeriv' is used to calculated finite difference version of Jacobian. The 'NLSIC' method was fist published in Sokol et al. (2012) <doi:10.1093/bioinformatics/btr716>.\n  license_family: GPL2\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-2\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - sgsokol\n\n# Package: nlsic\n# Title: Non Linear Least Squares with Inequality Constraints\n# Version: 1.0.1\n# Authors@R: person(given = \"Serguei\", family = \"Sokol\", role = c(\"aut\", \"cre\"), email = \"sokol@insa-toulouse.fr\", comment = c(ORCID = \"0000-0002-5674-3327\"))\n# Maintainer: Serguei Sokol <sokol@insa-toulouse.fr>\n# Description: We solve non linear least squares problems with optional equality and/or inequality constraints. Non linear iterations are globalized with back-tracking method. Linear problems are solved by dense QR decomposition from 'LAPACK' which can limit the size of treated problems. On the other side, we avoid condition number degradation which happens in classical quadratic programming approach. Inequality constraints treatment on each non linear iteration is based on 'NNLS' method (by Lawson and Hanson). We provide an original function 'lsi_ln' for solving linear least squares problem with inequality constraints in least norm sens. Thus if Jacobian of the problem is rank deficient a solution still can be provided. However, truncation errors are probable in this case. Equality constraints are treated by using a basis of Null-space. User defined function calculating residuals must return a list having residual vector (not their squared sum) and Jacobian. If Jacobian is not in the returned list, package 'numDeriv' is used to calculated finite difference version of Jacobian. The 'NLSIC' method was fist published in Sokol et al. (2012) <doi:10.1093/bioinformatics/btr716>.\n# License: GPL-2\n# Encoding: UTF-8\n# RoxygenNote: 7.1.1\n# Depends: nnls\n# Suggests: numDeriv, RUnit, limSolve\n# URL: https://github.com/MathsCell/nlsic\n# BugReports: https://github.com/MathsCell/nlsic/issues\n# NeedsCompilation: no\n# Packaged: 2022-01-10 09:24:32 UTC; sokol\n# Author: Serguei Sokol [aut, cre] (<https://orcid.org/0000-0002-5674-3327>)\n# Repository: CRAN\n# Date/Publication: 2022-01-11 10:02:42 UTC\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/nlsic_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/nlsic/nlsic_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/nlsic_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/nlsic/nlsic_1.0.2.tar.gz"
 ],
 "version": "1.0.2"
}