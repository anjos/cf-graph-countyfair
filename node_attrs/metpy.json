{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/211234991.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/211267803.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/219169833.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/229229135.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/242473331.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/295063667.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/295066102.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.10.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/322979161.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/329867806.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.11.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/339659335.json"
   },
   "data": {
    "bot_rerun": 1579272528.0397367,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/340301536.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/359393428.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.12.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/464276665.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.12.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/543888735.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625705528.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/829830948.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "metpy",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The space MetPy aims for is GEMPAK (and maybe NCL)-like functionality,\nin a way that plugs easily into the existing scientific Python ecosystem\n(numpy, scipy, matplotlib). So, if you take the average GEMPAK script for\na weather map, you need to: read data, calculate a derived field, and\nshow on a map/skew-T. One of the benefits hoped to achieve over GEMPAK\nis to make it easier to use these routines for any meteorological Python\napplication; this means making it easy to pull out the LCL calculation\nand just use that, or re-use the Skew-T with your own data code. MetPy\nalso prides itself on being well-documented and well-tested, so that\non-going maintenance is easily manageable.\n",
   "dev_url": "https://github.com/Unidata/MetPy",
   "doc_url": "https://unidata.github.io/MetPy",
   "home": "https://github.com/Unidata/MetPy",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "MetPy is a collection of tools in Python for reading, visualizing and performing calculations with weather data."
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "dopplershift",
    "dcamron"
   ]
  },
  "package": {
   "name": "metpy",
   "version": "1.1.0"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "setuptools",
    "pip",
    "setuptools_scm"
   ],
   "run": [
    "python >=3.7",
    "importlib_metadata >=1.0.0",
    "importlib_resources >=1.3.0",
    "matplotlib-base >=3.0.1",
    "numpy >=1.17",
    "pandas >=0.24.0",
    "pint >=0.10.1",
    "pooch >=0.1",
    "pyproj >=2.3.0",
    "scipy >=1.2.0",
    "traitlets >=4.3.0",
    "xarray >=0.14.1",
    "cartopy >=0.17.0"
   ]
  },
  "source": {
   "sha256": "e5ef6967a0721cccc92d6aeae27768bbc9eac66db252c36be6e233f43f228e53",
   "url": "https://pypi.io/packages/source/M/MetPy/MetPy-1.1.0.tar.gz"
  },
  "test": {
   "imports": [
    "metpy.calc",
    "metpy.interpolate",
    "metpy.io",
    "metpy.plots",
    "metpy.units"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "importlib_metadata",
    "importlib_resources",
    "matplotlib-base",
    "numpy",
    "pandas",
    "pint",
    "pooch",
    "pyproj",
    "python",
    "scipy",
    "traitlets",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The space MetPy aims for is GEMPAK (and maybe NCL)-like functionality,\nin a way that plugs easily into the existing scientific Python ecosystem\n(numpy, scipy, matplotlib). So, if you take the average GEMPAK script for\na weather map, you need to: read data, calculate a derived field, and\nshow on a map/skew-T. One of the benefits hoped to achieve over GEMPAK\nis to make it easier to use these routines for any meteorological Python\napplication; this means making it easy to pull out the LCL calculation\nand just use that, or re-use the Skew-T with your own data code. MetPy\nalso prides itself on being well-documented and well-tested, so that\non-going maintenance is easily manageable.\n",
   "dev_url": "https://github.com/Unidata/MetPy",
   "doc_url": "https://unidata.github.io/MetPy",
   "home": "https://github.com/Unidata/MetPy",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "MetPy is a collection of tools in Python for reading, visualizing and performing calculations with weather data."
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "dopplershift",
    "dcamron"
   ]
  },
  "package": {
   "name": "metpy",
   "version": "1.1.0"
  },
  "requirements": {
   "host": [
    "python >=3.7",
    "setuptools",
    "pip",
    "setuptools_scm"
   ],
   "run": [
    "python >=3.7",
    "importlib_metadata >=1.0.0",
    "importlib_resources >=1.3.0",
    "matplotlib-base >=3.0.1",
    "numpy >=1.17",
    "pandas >=0.24.0",
    "pint >=0.10.1",
    "pooch >=0.1",
    "pyproj >=2.3.0",
    "scipy >=1.2.0",
    "traitlets >=4.3.0",
    "xarray >=0.14.1",
    "cartopy >=0.17.0"
   ]
  },
  "source": {
   "sha256": "e5ef6967a0721cccc92d6aeae27768bbc9eac66db252c36be6e233f43f228e53",
   "url": "https://pypi.io/packages/source/M/MetPy/MetPy-1.1.0.tar.gz"
  },
  "test": {
   "imports": [
    "metpy.calc",
    "metpy.interpolate",
    "metpy.io",
    "metpy.plots",
    "metpy.units"
   ]
  }
 },
 "name": "metpy",
 "new_version": "1.2.0",
 "new_version_attempts": {
  "0.12.1": 53,
  "0.12.2": 1,
  "1.0": 1,
  "1.0.1": 1,
  "1.2.0": 1
 },
 "new_version_errors": {
  "0.12.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '0.12.1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://pypi.io/packages/source/<{name[0]}}/<{name}}/<{name}}-<{version}}.tar.gz'\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "metpy"
  ]
 },
 "pinning_version": "2022.01.22.21.08.53",
 "raw_meta_yaml": "{% set name = \"MetPy\" %}\n{% set version = \"1.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: e5ef6967a0721cccc92d6aeae27768bbc9eac66db252c36be6e233f43f228e53\n\nbuild:\n  noarch: python\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n  number: 0\n\nrequirements:\n  host:\n    - python >=3.7\n    - setuptools\n    - pip\n    - setuptools_scm\n\n  run:\n    - python >=3.7\n    - importlib_metadata >=1.0.0\n    - importlib_resources >=1.3.0\n    - matplotlib-base >=3.0.1\n    - numpy >=1.17\n    - pandas >=0.24.0\n    - pint >=0.10.1\n    - pooch >=0.1\n    - pyproj >=2.3.0\n    - scipy >=1.2.0\n    - traitlets >=4.3.0\n    - xarray >=0.14.1\n    - cartopy >=0.17.0\n\ntest:\n  imports:\n    - metpy.calc\n    - metpy.interpolate\n    - metpy.io\n    - metpy.plots\n    - metpy.units\n\nabout:\n  home: https://github.com/Unidata/MetPy\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: MetPy is a collection of tools in Python for reading, visualizing and performing calculations with weather data.\n  description: |\n    The space MetPy aims for is GEMPAK (and maybe NCL)-like functionality,\n    in a way that plugs easily into the existing scientific Python ecosystem\n    (numpy, scipy, matplotlib). So, if you take the average GEMPAK script for\n    a weather map, you need to: read data, calculate a derived field, and\n    show on a map/skew-T. One of the benefits hoped to achieve over GEMPAK\n    is to make it easier to use these routines for any meteorological Python\n    application; this means making it easy to pull out the LCL calculation\n    and just use that, or re-use the Skew-T with your own data code. MetPy\n    also prides itself on being well-documented and well-tested, so that\n    on-going maintenance is easily manageable.\n  doc_url: https://unidata.github.io/MetPy\n  dev_url: https://github.com/Unidata/MetPy\n\nextra:\n  recipe-maintainers:\n    - dopplershift\n    - dcamron\n",
 "req": {
  "__set__": true,
  "elements": [
   "cartopy",
   "importlib_metadata",
   "importlib_resources",
   "matplotlib-base",
   "numpy",
   "pandas",
   "pint",
   "pip",
   "pooch",
   "pyproj",
   "python",
   "scipy",
   "setuptools",
   "setuptools_scm",
   "traitlets",
   "xarray"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "importlib_metadata",
    "importlib_resources",
    "matplotlib-base",
    "numpy",
    "pandas",
    "pint",
    "pooch",
    "pyproj",
    "python",
    "scipy",
    "traitlets",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.16.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.7",
    "setuptools",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy >=0.17.0",
    "importlib_metadata >=1.0.0",
    "importlib_resources >=1.3.0",
    "matplotlib-base >=3.0.1",
    "numpy >=1.17",
    "pandas >=0.24.0",
    "pint >=0.10.1",
    "pooch >=0.1",
    "pyproj >=2.3.0",
    "python >=3.7",
    "scipy >=1.2.0",
    "traitlets >=4.3.0",
    "xarray >=0.14.1"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/M/MetPy/MetPy-1.1.0.tar.gz",
 "version": "1.1.0"
}