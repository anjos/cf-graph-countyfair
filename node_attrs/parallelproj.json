{
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "parallelproj",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "1",
   "run_exports": [
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj"
   ],
   "string": "cuda10.2h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.9"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja"
   ],
   "host": [
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp"
   ]
  },
  "source": {
   "sha256": "148f174d3abdc573fe47e5aebf74878f123aeaf81cf32efe417d1a731c75df31",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.9.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "1",
   "run_exports": [
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj"
   ],
   "string": "cuda10.2h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.9"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja"
   ],
   "host": [
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "llvm-openmp"
   ]
  },
  "source": {
   "sha256": "148f174d3abdc573fe47e5aebf74878f123aeaf81cf32efe417d1a731c75df31",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.9.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1"
   ]
  }
 },
 "name": "parallelproj",
 "new_version": "1.2.9",
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "1",
   "run_exports": [
    "parallelproj"
   ],
   "string": "cpuh1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.9"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja"
   ],
   "host": [
    "llvm-openmp"
   ]
  },
  "source": {
   "sha256": "148f174d3abdc573fe47e5aebf74878f123aeaf81cf32efe417d1a731c75df31",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.9.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "llvm-openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "parallelproj"
  ]
 },
 "raw_meta_yaml": "{% set name = \"parallelproj\" %}\n{% set version = \"1.2.9\" %}\n{% set build_number = \"1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/gschramm/parallelproj/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 148f174d3abdc573fe47e5aebf74878f123aeaf81cf32efe417d1a731c75df31\n\nbuild:\n  run_exports:\n    - {{ pin_subpackage( name|lower, max_pin='x.x') }}\n  number: {{ build_number }}\n  ignore_run_exports:\n    - cudatoolkit\n  string: \"cpuh{{ PKG_HASH }}_{{ build_number }}\"   # [cuda_compiler_version == \"None\"]\n  string: \"cuda{{ cuda_compiler_version|string }}h{{ PKG_HASH }}_{{ build_number }}\"  # [cuda_compiler_version != \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}  # [cuda_compiler_version != \"None\"]\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != \"None\"]\n    - cmake >=3.23\n    - ninja\n  host:\n    - libgomp      # [linux]\n    - llvm-openmp  # [osx]\ntest:\n  commands:\n    - test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/include/parallelproj_c.h  # [unix]\n    - test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake  # [unix]\n    - test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT  # [linux and cuda_compiler_version != \"None\"]\n    - test -f $PREFIX/include/parallelproj_cuda.h  # [linux and cuda_compiler_version != \"None\"]\n    - if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1  # [win]\n\nabout:\n  home: https://github.com/gschramm/parallelproj\n  license:  MIT\n  license_file: LICENSE\n  summary: 'parallelized TOF PET projectors'\n\nextra:\n  recipe-maintainers:\n    - gschramm\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "libgomp",
   "llvm-openmp",
   "ninja"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp",
    "openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "openmp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake >=3.23",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp",
    "llvm-openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.9.tar.gz",
 "version": "1.2.9",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "1",
   "run_exports": [
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj",
    "parallelproj"
   ],
   "string": "cuda10.2h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.9"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja"
   ],
   "host": []
  },
  "source": {
   "sha256": "148f174d3abdc573fe47e5aebf74878f123aeaf81cf32efe417d1a731c75df31",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.9.tar.gz"
  },
  "test": {
   "commands": [
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}