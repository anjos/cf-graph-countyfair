{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/221667032.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/276371222.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.13"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/313697192.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/333401163.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/339640751.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/358884044.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/366475102.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/581690761.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/617052567.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/712869174.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/792039378.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "s3contents",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "A S3 and GCS backed ContentsManager implementation for Jupyter.\nIt aims to a be a transparent, drop-in replacement for Jupyter standard filesystem-backed storage system. With this implementation of a Jupyter Contents Manager you can save all your notebooks, regular files, directories structure directly to a S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 API compatible like minio.",
   "dev_url": "https://github.com/danielfrg/s3contents",
   "home": "https://github.com/danielfrg/s3contents",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.txt",
   "summary": "A S3-backed ContentsManager implementation for Jupyter"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv"
  },
  "extra": {
   "recipe-maintainers": [
    "mariusvniekerk",
    "danielfrg"
   ]
  },
  "package": {
   "name": "s3contents",
   "version": "0.9.0"
  },
  "requirements": {
   "build": [
    "poetry"
   ],
   "host": [
    "python >=3",
    "pip",
    "poetry",
    "setuptools_scm"
   ],
   "run": [
    "python >=3",
    "aiobotocore >=1.4.0",
    "boto3",
    "notebook",
    "s3fs >=2021.11.0,<2022.0.0",
    "gcsfs >=2021.11.0,<2022.0.0"
   ]
  },
  "source": {
   "fn": "s3contents-0.9.0.tar.gz",
   "sha256": "99078f29c286df7311d6d0e1f10a39035bb08455c5dd106cde6c3a836f2e2a77",
   "url": "https://pypi.io/packages/source/s/s3contents/s3contents-0.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "s3contents",
    "s3contents.tests"
   ],
   "requires": [
    "mock",
    "nose",
    "pytest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "poetry"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "aiobotocore",
    "boto3",
    "gcsfs",
    "notebook",
    "python",
    "s3fs"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "mock",
    "nose",
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "A S3 and GCS backed ContentsManager implementation for Jupyter.\nIt aims to a be a transparent, drop-in replacement for Jupyter standard filesystem-backed storage system. With this implementation of a Jupyter Contents Manager you can save all your notebooks, regular files, directories structure directly to a S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 API compatible like minio.",
   "dev_url": "https://github.com/danielfrg/s3contents",
   "home": "https://github.com/danielfrg/s3contents",
   "license": "Apache-2.0",
   "license_family": "APACHE",
   "license_file": "LICENSE.txt",
   "summary": "A S3-backed ContentsManager implementation for Jupyter"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv"
  },
  "extra": {
   "recipe-maintainers": [
    "mariusvniekerk",
    "danielfrg"
   ]
  },
  "package": {
   "name": "s3contents",
   "version": "0.9.0"
  },
  "requirements": {
   "build": [
    "poetry"
   ],
   "host": [
    "python >=3",
    "pip",
    "poetry",
    "setuptools_scm"
   ],
   "run": [
    "python >=3",
    "aiobotocore >=1.4.0",
    "boto3",
    "notebook",
    "s3fs >=2021.11.0,<2022.0.0",
    "gcsfs >=2021.11.0,<2022.0.0"
   ]
  },
  "source": {
   "fn": "s3contents-0.9.0.tar.gz",
   "sha256": "99078f29c286df7311d6d0e1f10a39035bb08455c5dd106cde6c3a836f2e2a77",
   "url": "https://pypi.io/packages/source/s/s3contents/s3contents-0.9.0.tar.gz"
  },
  "test": {
   "imports": [
    "s3contents",
    "s3contents.tests"
   ],
   "requires": [
    "mock",
    "nose",
    "pytest"
   ]
  }
 },
 "name": "s3contents",
 "new_version": "0.9.0",
 "new_version_attempts": {
  "0.5.0": 126,
  "0.5.1": 1,
  "0.6.1": 582,
  "0.6.2": 37,
  "0.6.3": 1,
  "0.7.0": 1,
  "0.9.0": 0
 },
 "new_version_errors": {
  "0.6.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '0.6.1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz'\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "s3contents"
  ]
 },
 "pinning_version": "2021.11.30.08.47.36",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"s3contents\" %}\n{% set version = \"0.9.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 99078f29c286df7311d6d0e1f10a39035bb08455c5dd106cde6c3a836f2e2a77\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv\n  noarch: python\n\nrequirements:\n  build:\n    - poetry\n  host:\n    - python >=3\n    - pip\n    - poetry\n    - setuptools_scm\n  run:\n    - python >=3\n    - aiobotocore >=1.4.0\n    - boto3\n    - notebook\n    - s3fs >=2021.11.0,<2022.0.0\n    - gcsfs >=2021.11.0,<2022.0.0\n\ntest:\n  requires:\n    - mock\n    - nose\n    - pytest\n  imports:\n    - s3contents\n    - s3contents.tests\n\nabout:\n  home: https://github.com/danielfrg/s3contents\n  license: Apache-2.0\n  license_family: APACHE\n  license_file: LICENSE.txt\n  summary: A S3-backed ContentsManager implementation for Jupyter\n  description: \"A S3 and GCS backed ContentsManager implementation for Jupyter.\\nIt aims to a be a transparent, drop-in replacement for Jupyter standard filesystem-backed storage system. With this implementation of a Jupyter Contents Manager you can save all your notebooks, regular files, directories structure directly to\\\n    \\ a S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 API compatible like minio.\"\n  dev_url: https://github.com/danielfrg/s3contents\n\nextra:\n  recipe-maintainers:\n    - mariusvniekerk\n    - danielfrg\n",
 "req": {
  "__set__": true,
  "elements": [
   "aiobotocore",
   "boto3",
   "gcsfs",
   "notebook",
   "pip",
   "poetry",
   "python",
   "s3fs",
   "setuptools_scm"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "poetry"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "aiobotocore",
    "boto3",
    "gcsfs",
    "notebook",
    "python",
    "s3fs"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "mock",
    "nose",
    "pytest"
   ]
  }
 },
 "smithy_version": "3.15.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "poetry"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python >=3",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "aiobotocore >=1.4.0",
    "boto3",
    "gcsfs >=2021.11.0,<2022.0.0",
    "notebook",
    "python >=3",
    "s3fs >=2021.11.0,<2022.0.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "mock",
    "nose",
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/s/s3contents/s3contents-0.9.0.tar.gz",
 "version": "0.9.0"
}