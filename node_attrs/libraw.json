{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/386886699.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/455768001.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503230006.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503859626.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/546011201.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "libraw",
 "hash_type": "sha256",
 "name": "libraw",
 "new_version": "0.20.2",
 "new_version_attempts": {
  "0.20.0": 1,
  "0.20.1": 1,
  "0.20.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libraw"
  ]
 },
 "pinning_version": "2020.12.26.13.11.41",
 "raw_meta_yaml": "{% set name = \"libraw\" %}\n{% set version = \"0.20.2\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  - folder: libraw\n    url: https://github.com/LibRaw/LibRaw/archive/{{ version }}.tar.gz\n    sha256: 02df7d403b34602b769bb38e5bf7d4258e075eeefbe980b6832e6e1491989d60\n\n  - folder: cmake\n    url: https://github.com/LibRaw/LibRaw-cmake/archive/1480fb919f24e7d53ad7b3a8b1ca83401119e889.tar.gz\n    sha256: 55b3c301e8a708c00dc51abb09fdaa095c7272f8d220d1c25d7f075367cb6d60\n    \nbuild:\n  number: 1\n  run_exports:\n    - {{ pin_subpackage(name, max_pin='x.x') }}\n\nrequirements:\n  build:\n    - automake  # [unix]\n    - libtool  # [unix]\n    - pkg-config\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - make  # [unix]\n    - cmake  # [win]\n  host:\n    - zlib\n    - lcms2\n    - jpeg\n    # - llvm-openmp  # [osx]\n    - libgomp      # [linux]\n  run:\n    - {{ pin_compatible('lcms2', max_pin='x.x') }}\n\ntest:\n  commands:\n#    - raw-identify -h\n#    - simple_dcraw -h\n    - test -f ${PREFIX}/include/libraw/libraw.h  # [unix]\n    - test -f ${PREFIX}/lib/libraw${SHLIB_EXT}  # [unix]\n    - if exist %PREFIX%\\\\Library\\\\include\\\\libraw\\\\libraw.h (exit 0) else (exit 1)  # [win]\n    - if exist $PREFIX$\\\\Library\\\\lib\\\\raw.lib (exit 0) else (exit 1)  # [win]\n    - if exist $PREFIX$\\\\Library\\\\bin\\\\raw.dll (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: http://www.libraw.org/\n  license: LGPL-2.1-only\n  license_family: LGPL\n  license_file: libraw/LICENSE.LGPL\n  description: |\n    LibRaw is a library for reading RAW files from digital photo cameras\n    (CRW/CR2, NEF, RAF, DNG, MOS, KDC, DCR, etc, virtually all RAW formats are supported).\n  summary: Library for reading and processing of RAW digicam images.\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - traversaro\n",
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "url": "https://github.com/LibRaw/LibRaw/archive/0.20.2.tar.gz",
 "version": "0.20.2"
}