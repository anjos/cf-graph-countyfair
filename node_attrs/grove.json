{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/203713921.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.7.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "grove",
 "hash_type": "sha256",
 "name": "quantum-grove-meta",
 "new_version": "1.7.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "grove",
   "quantum-grove"
  ]
 },
 "pinning_version": "2018.07.20",
 "raw_meta_yaml": "{% set name = \"quantum-grove\" %}\n{% set version = \"1.7.0\" %}\n{% set build_num = 2 %}\n\n\npackage:\n  name: {{ name }}-meta\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/quantum-grove-{{ version }}.tar.gz\n  sha256: a563efa7471abb932a1e9e4ab9f01aaa2b3136cda5854e0be3af35f334b88d7e\n\nbuild:\n  number: {{ build_num }}\n\noutputs:\n  - name: {{ name }}\n    build:\n        noarch: python\n    script: build_base.sh\n\n    requirements:\n      host:\n        - numpy\n        - pip\n        - pytest-runner\n        - python >=3.6\n      run:\n        - funcsigs\n        - matplotlib-base\n        - mock\n        - networkx\n        - numpy\n        - pyquil >=1.6.1\n        - python >=3.6\n        - scipy\n\n    test:\n      imports:\n        - grove\n        - grove.alpha\n        - grove.amplification\n        - grove.bernstein_vazirani\n        - grove.deutsch_jozsa\n        - grove.ising\n        - grove.pyqaoa\n        - grove.pyvqe\n        - grove.qft\n        - grove.simon\n        - grove.utils\n        - grove.tomography\n      commands:\n        - pip check\n      requires:\n        - pip\n\n\n  - name: grove\n    build:\n      noarch: generic\n      string: {{ build_num }}_metapackage\n    requirements:\n      run:\n        - {{ name }} {{ version }}\n    test:\n      imports:\n        - grove\n\n\nabout:\n  home: https://github.com/rigetticomputing/grove\n  license: Apache-2.0\n  license_family: Apache\n  license_file:\n    - LICENSE\n    - NOTICE\n  summary: Quantum algorithms built using pyQuil\n\n  description: |\n    A collection of quantum algorithms built using the Rigetti Forest platform.\n  doc_url: http://grove-docs.readthedocs.io/en/latest/\n  dev_url: https://github.com/rigetticomputing/grove\n\nextra:\n  recipe-maintainers:\n    - ntezak\n    - BastianZim\n  feedstock-name: grove\n",
 "smithy_version": "3.1.6",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/q/quantum-grove/quantum-grove-1.7.0.tar.gz",
 "version": "1.7.0"
}