{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/bf30fb2c-142c-400c-96e3-08d03f7943fd.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "r400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/559579149.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/565645586.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/651507301.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "r410"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-multiapply",
 "hash_type": "sha256",
 "name": "r-multiapply",
 "new_version": "2.1.3",
 "new_version_attempts": {
  "2.1.2": 1,
  "2.1.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-multiapply"
  ]
 },
 "pinning_version": "2021.05.24.03.00.35",
 "raw_meta_yaml": "{% set version = \"2.1.3\" %}\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-multiapply\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/multiApply_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/multiApply/multiApply_{{ version }}.tar.gz\n  sha256: e7824ecc132625a8928b5d38417520ab36eb867e6323bbcad9294e447c71bd7a\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-doparallel\n    - r-foreach\n    - r-plyr\n  run:\n    - r-base\n    - r-doparallel\n    - r-foreach\n    - r-plyr\n\ntest:\n  commands:\n    - $R -e \"library('multiApply')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('multiApply')\\\"\"  # [win]\n\nabout:\n  home: https://earth.bsc.es/gitlab/ces/multiApply\n  license: LGPL-3.0-only\n  summary: The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently\n    applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays\n    as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package\n    suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied.\n  license_family: LGPL\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/LGPL-3\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: multiApply\n# Title: Apply Functions to Multiple Multidimensional Arrays or Vectors\n# Version: 2.1.1\n# Authors@R: c( person(\"BSC-CNS\", role = c(\"aut\", \"cph\")), person(\"Nicolau\", \"Manubens\", , \"nicolau.manubens@bsc.es\", role = \"aut\"), person(\"Alasdair\", \"Hunter\", , \"alasdair.hunter@bsc.es\", role = \"aut\"), person(\"Nuria\", \"Perez\", , \"nuria.perez@bsc.es\", role = \"cre\"))\n# Description: The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied.\n# Depends: R (>= 3.2.0)\n# Imports: doParallel, foreach, plyr\n# Suggests: testthat\n# License: LGPL-3\n# URL: https://earth.bsc.es/gitlab/ces/multiApply\n# BugReports: https://earth.bsc.es/gitlab/ces/multiApply/issues\n# Encoding: UTF-8\n# LazyData: true\n# RoxygenNote: 5.0.0\n# NeedsCompilation: no\n# Packaged: 2019-09-03 14:10:50 UTC; nperez\n# Author: BSC-CNS [aut, cph], Nicolau Manubens [aut], Alasdair Hunter [aut], Nuria Perez [cre]\n# Maintainer: Nuria Perez <nuria.perez@bsc.es>\n# Repository: CRAN\n# Date/Publication: 2019-09-03 15:40:02 UTC\n",
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/multiApply_2.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/multiApply/multiApply_2.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/multiApply_2.1.3.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/multiApply/multiApply_2.1.3.tar.gz"
 ],
 "version": "2.1.3"
}