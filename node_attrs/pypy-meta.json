{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/388827476.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/487648834.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "pypy-meta",
 "name": "pypy-meta",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cffi",
   "pypy",
   "python"
  ]
 },
 "pinning_version": "2020.09.14.18.14.00",
 "raw_meta_yaml": "{% set version = \"7.3.9\" %}\n{% if python_version is not defined %}\n{% set python_version = \"3.8.13\" %}\n{% endif %}\n{% set cffi_version = \"1.15.0\" %}\n{% set python_maj_min = \".\".join(python_version.split(\".\")[:2]) %}\n# Keep increasing this until we get a new version, python_version and cffi_version. Do not reset\n{% set build_num = \"0\" %}\n{% set pypy_abi = \"\".join(version.split(\".\")[:2]) %}\n\npackage:\n  name: pypy-meta\n  version: {{ version }}\n\nbuild:\n  number: {{ build_num }}\n\noutputs:\n  - name: python\n    version: {{ python_version }}\n    build:\n      number: {{ build_num }}\n      string: {{ build_num }}_{{ pypy_abi }}_pypy\n      track_features:\n        - pypy\n      run_exports:\n        weak:\n          - pypy{{ python_maj_min }} >={{ version }}\n          - python_abi {{ python_maj_min }} *_pypy{{ python_maj_min.replace(\".\", \"\") }}_pp{{ pypy_abi }}\n        noarch:\n          - {{ pin_subpackage(\"python\", max_pin=\"x.x\", min_pin=\"x.x\") }}\n    requirements:\n      host:\n        - pypy{{ python_maj_min }} {{ version }}\n      run:\n        - pypy{{ python_maj_min }} {{ version }}\n        - python_abi {{ python_maj_min }} *_pypy{{ python_maj_min.replace(\".\", \"\") }}_pp{{ pypy_abi }}\n    test:\n      commands:\n        - python --version\n        - test $(python -c \"import sys;print('.'.join(str(i) for i in sys.version_info[:3]))\") == \"{{ python_version }}\"  # [unix]\n\n  - name: pypy\n    version: {{ version }}\n    build:\n      number: {{ build_num }}\n      string: {{ build_num }}_pypy{{ python_maj_min.replace(\".\", \"\") }}\n      noarch: generic\n    requirements:\n      run:\n        - python {{ python_version }} {{ build_num }}_{{ pypy_abi }}_pypy\n    test:\n      commands:\n        - pypy --version\n\n  - name: cffi\n    version: {{ cffi_version }}\n    build:\n      number: {{ build_num }}\n      string: {{ build_num }}_pypy{{ python_maj_min.replace(\".\", \"\") }}\n      noarch: generic\n    requirements:\n      run:\n        - pypy{{ python_maj_min }} {{ version }}\n        - python {{ python_version }} {{ build_num }}_{{ pypy_abi }}_pypy\n        - python_abi {{ python_maj_min }} *_pypy{{ python_maj_min.replace(\".\", \"\") }}_pp{{ pypy_abi }}\n    test:\n      commands:\n        - test $(python -c \"import cffi;print(cffi.__version__)\") == \"{{ cffi_version }}\"   # [unix]\n\nabout:\n  home: https://github.com/conda-forge/pypy-meta-feedstock\n  summary: Metapackage to select pypy as python implementation\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - isuruf\n    - mattip\n",
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.10",
 "strong_exports": false,
 "version": "7.3.9"
}