{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/625740262.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625750918.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/625757492.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/628273405.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/696870803.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/764711747.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/769243543.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pylexique",
 "hash_type": "sha256",
 "name": "pylexique",
 "new_version": "1.5.0",
 "new_version_attempts": {
  "1.2.0": 1,
  "1.4.0": 1,
  "1.5.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pylexique"
  ]
 },
 "pinning_version": "2021.10.29.07.34.22",
 "raw_meta_yaml": "{% set name = \"pylexique\" %}\n\n{% set version = \"1.5.0\" %}\n\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/pylexique-{{ version }}.tar.gz\n  sha256: 8c5a2f338f395ab43321822450b09882fba0709434ab796755cec5ce15765227\n\nbuild:\n  number: 0\n  entry_points:\n    - pylexique=pylexique.cli:main\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv --use-deprecated=out-of-tree-build\n\nrequirements:\n  host:\n    - pip\n    - pytest-runner\n    - python >=3.7\n    - poetry\n  run:\n    - python >=3.7\n    - setuptools\n    - dataclasses\n    - pandas\n    - colorama\n    - tqdm\n    - click >=8.0.3\n    - joblib\n\ntest:\n  imports:\n    - pylexique\n  commands:\n    - pylexique --help\n  requires:\n    - pip\n    - poetry\n\nabout:\n  description: |\n    Pylexique is a Python wrapper around Lexique383.\n    It allows to extract lexical information from more than 140 000 French words in an Object Oriented way.\n\n    Features:\n\n      - Extract all lexical information from a French word such as\n          - orthographic and phonemics representations\n          - associated lemmas\n          - syllabation\n          - grammatical category\n          - gender and number\n          - frequencies in a corpus of books and in a body of film subtitles, etc\u2026\n      - Get all related words to a given word.\n      - Easy to use Api.\n      - Easily integrate pylexique in your own projects as an imported library.\n      - Can be used as a command line tool.\n  home: https://github.com/SekouDiaoNlp/pylexique\n  summary: Pylexique is a Python wrapper around Lexique383\n  license: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - SekouDiaoNlp\n",
 "smithy_version": "3.14.1",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/p/pylexique/pylexique-1.5.0.tar.gz",
 "version": "1.5.0"
}