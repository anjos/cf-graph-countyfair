{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/198232267.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "6.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/216616991.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "7.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222630213.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/238896134.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "7.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/263060454.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "8.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/270242114.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/335476497.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375719183.json"
   },
   "data": {
    "bot_rerun": 1581793713.1915872,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "11-init"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/49de0114-8566-4f72-946f-907a1cf71a4d.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "head": {
     "ref": "<this_is_not_a_branch>"
    },
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "10.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/454859719.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "10.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/499580374.json"
   },
   "data": {
    "bot_rerun": 1602122433.1793563,
    "migrator_name": "MigrationYaml",
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501448616.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "11.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503441299.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/549908203.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "11.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/574666109.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "11.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/615642416.json"
   },
   "data": {
    "bot_rerun": 1620645502.3192935,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "12.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/644047895.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "12.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/686513889.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "12.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/747300397.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "13.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/838463668.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "13.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/886831638.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/908750150.json"
   },
   "data": {
    "bot_rerun": 1651733064.1487198,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/920224470.json"
   },
   "data": {
    "bot_rerun": 1651733064.1489053,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/923363213.json"
   },
   "data": {
    "bot_rerun": 1651733064.149121,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/928490020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/946756091.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/964728435.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/978938415.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "14.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1047351090.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1061462074.json"
   },
   "data": {
    "bot_rerun": 1663893422.1018326,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1064781613.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1076138264.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1090850154.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1110548626.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1124646051.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1139539894.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "15.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "clangdev",
 "hash_type": "sha256",
 "name": "clang_packages",
 "new_version": "15.0.6",
 "new_version_attempts": {
  "10.0.1": 1,
  "11.0.0": 1,
  "11.0.1": 1,
  "11.1.0": 1,
  "12.0.0": 5,
  "12.0.1": 1,
  "13.0.0": 1,
  "13.0.1": 1,
  "14.0.0": 1,
  "14.0.1": 1,
  "14.0.2": 1,
  "14.0.3": 3,
  "14.0.4": 1,
  "14.0.5": 1,
  "14.0.6": 1,
  "15.0.0": 1,
  "15.0.1": 2,
  "15.0.2": 1,
  "15.0.3": 1,
  "15.0.4": 2,
  "15.0.5": 1,
  "15.0.6": 1
 },
 "new_version_errors": {
  "12.0.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '12.0.0' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(\".rc\", \"-rc\") }}/clang-tools-extra-{{ version.replace(\".rc\", \"rc\") }}.src.tar.xz'\n - could not hash URL template 'https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(\".rc\", \"-rc\") }}/clang-{{ version.replace(\".rc\", \"rc\") }}.src.tar.xz'\n",
  "15.0.4": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '15.0.4' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(\".rc\", \"-rc\") }}/llvm-project-{{ version.replace(\".rc\", \"rc\") }}.src.tar.xz'\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "clang",
   "clang-15",
   "clang-format",
   "clang-format-15",
   "clang-tools",
   "clangdev",
   "clangxx",
   "libclang",
   "libclang-cpp",
   "libclang-cpp15",
   "libclang13",
   "python-clang"
  ]
 },
 "pinning_version": "2022.11.29.18.43.18",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set version = \"15.0.6\" %}\n{% set major_version = version.split(\".\")[0] %}\n{% set build_number = 0 %}\n\n{% set minor_aware_ext = major_version %}\n{% if version.split(\".\")[1] | int > 0 %}\n{% set minor_aware_ext = major_version + \".\" + version.split(\".\")[1] %}\n{% endif %}\n\n{% if libclang_soversion is not defined %}\n{% set libclang_soversion = \"13\" %}\n{% endif %}\n\npackage:\n  name: clang_packages\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(\".rc\", \"-rc\") }}/llvm-project-{{ version.replace(\".rc\", \"rc\") }}.src.tar.xz\n    sha256: 9d53ad04dc60cb7b30e810faf64c5ab8157dadef46c8766f67f286238256ff92\n    patches:\n      - patches/0001-Find-conda-gcc-installation.patch\n      - patches/0002-Fix-sysroot-detection-for-linux.patch\n      - patches/0003-clang-add-conda-specific-env-var-CONDA_BUILD_SYSROOT.patch\n      - patches/0004-Fix-normalizeProgramName-s-handling-of-dots-outside-.patch\n      - patches/0005-Set-VERSION-in-osx-as-well.patch\n      - patches/0006-Fix-crosscompiling-LLVM-tools.patch\n      # Disable -Werror,-Wundef-prefix=TARGET_OS as they are not yet defined in the 10.9 SDK used for osx-64\n      # Only enable it for TARGET_OS_OSX.\n      - patches/0007-Only-error-on-undefined-TARGET_OS_OSX.patch  # [osx and x86_64]\n      - patches/0008-set-libclang-SOVERSION-unconditionally.patch\n      # - patches/amd-roc-2.7.0.diff   # [variant != \"hcc\"]\n      # - patches/amd-roc-hcc-2.7.0.diff  # [variant == \"hcc\"]\n    # name folder for easier deletion; we do the equivalent of downloading\n    # the subproject sources, so the work folder then has clang in it;\n    # for details see build scripts\n    folder: llvm-project\n\nbuild:\n  number: {{ build_number }}\n  skip: true  # [variant == \"hcc\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake >=3.4.3\n    # Needed to unpack the source tarball\n    - m2w64-xz  # [win]\n    # \"compiling .pyc files\" fails without this\n    - python >3\n    # Building with ninja on windows for parallel builds\n    - ninja  # [win]\n    - make   # [unix]\n    - llvmdev =={{ version }}    # [build_platform != target_platform]\n  host:\n    - libcxx {{ cxx_compiler_version }}  # [osx]\n    - llvmdev =={{ version }}\n    - zlib                               # [linux or win]\n\ntest:\n  requires:\n    - {{ compiler('cxx') }}\n    - cmake >=3.4.3\n  files:\n    - mytest.c\n  commands:\n    - $PREFIX/bin/clang --version        # [unix]\n    - $PREFIX/bin/clang++ --version      # [unix]\n    - $PREFIX/bin/clang-check --version  # [unix]\n\n    - $PREFIX/bin/clang -v -c mytest.c      # [unix]\n    - '%LIBRARY_BIN%/clang -v -c mytest.c'  # [win]\n\n    - if not exist %LIBRARY_INC%\\\\clang\\\\Lex\\\\Lexer.h exit 1  # [win]\n    - test -f $PREFIX/include/clang/Lex/Lexer.h      # [unix]\n    - test -f $PREFIX/lib/libclangBasic.a            # [unix]\n\n\noutputs:\n  - name: clangdev\n    script: install_clangdev.sh  # [unix]\n    script: install_clangdev.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"clang-tools\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\", exact=True) }}\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - zlib                               # [linux or win]\n      run:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"clang-tools\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\", exact=True) }}\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n        - llvmdev =={{ version }}\n    test:\n      commands:\n        - test -f \"$PREFIX/include/clang/Config/config.h\"   # [unix]\n        - test -f \"$PREFIX/lib/libclangAST.a\"               # [unix]\n        - if not exist %LIBRARY_INC%\\\\clang/Config/config.h exit 1   # [win]\n        - if not exist %LIBRARY_LIB%\\\\clangAST.lib exit 1            # [win]\n\n  - name: libclang-cpp{{ minor_aware_ext }}\n    script: install_libclang_cpp.sh  # [unix]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n      run_exports:\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, max_pin=\"x.x\") }}   # [unix]\n      skip: true  # [win]\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib   # [linux]\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n    test:\n      commands:\n        - test ! -f \"$PREFIX/lib/libclang-cpp.so\"                             # [linux]\n        - test -f \"$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}\"         # [linux]\n        - test ! -f \"$PREFIX/lib/libclang-cpp.dylib\"                          # [osx]\n        - test -f \"$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib\"      # [osx]\n\n  - name: libclang-cpp\n    # note that this is just an empty wrapper on windows\n    script: install_libclang_cpp.sh  # [unix]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n      run_exports:   # [unix]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, max_pin=\"x.x\") }}   # [unix]\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                                                                # [linux]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, exact=True) }}  # [unix]\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}                        # [osx]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, exact=True) }}  # [unix]\n    test:\n      commands:\n        - test -f \"$PREFIX/lib/libclang-cpp.so\"                     # [linux]\n        - test -f \"$PREFIX/lib/libclang-cpp.dylib\"                  # [osx]\n        - if exist %LIBRARY_BIN%\\\\libclang-cpp.dll exit 1           # [win]\n\n  - name: libclang{{ libclang_soversion }}\n    script: install_libclang.sh  # [unix]\n    script: install_libclang.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n      run_exports:\n        # note that the name (e.g. libclang13) does not necessarily\n        # match the version lower bound (e.g. >=14.0.0)\n        - {{ pin_subpackage(\"libclang\" + libclang_soversion, max_pin=\"x.x\") }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja                      # [win]\n        - make                       # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - libcxx {{ cxx_compiler_version }}             # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                                          # [linux or win]\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n    test:\n      commands:\n        # presence of versioned libraries\n        - test -f \"$PREFIX/lib/libclang.so.{{ libclang_soversion }}\"                # [linux]\n        - test -f \"$PREFIX/lib/libclang.{{ libclang_soversion }}.dylib\"             # [osx]\n        - if not exist %LIBRARY_BIN%\\\\libclang-{{ libclang_soversion }}.dll exit 1  # [win]\n\n        # absence of unversioned libraries\n        - test ! -f \"$PREFIX/lib/libclang.so\"                              # [linux]\n        - test ! -f \"$PREFIX/lib/libclang.dylib\"                           # [osx]\n        - if exist %LIBRARY_BIN%\\\\libclang.dll exit 1                      # [win]\n        - if exist %LIBRARY_LIB%\\\\libclang.lib exit 1                      # [win]\n\n        # absence of major version if soversion is different\n        {% if libclang_soversion != major_version %}\n        - test ! -f \"$PREFIX/lib/libclang.so.{{ major_version }}\"          # [linux]\n        - test ! -f \"$PREFIX/lib/libclang.{{ major_version }}.dylib\"       # [osx]\n        - if exist %LIBRARY_BIN%\\\\libclang-{{ major_version }}.dll exit 1  # [win]\n        {% endif %}\n\n  - name: libclang\n    script: install_libclang.sh  # [unix]\n    script: install_libclang.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n      run_exports:\n        # note that the name (e.g. libclang13) does not necessarily\n        # match the version lower bound (e.g. >=14.0.0)\n        - {{ pin_subpackage(\"libclang\" + libclang_soversion, max_pin=None) }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja                      # [win]\n        - make                       # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - libcxx {{ cxx_compiler_version }}                           # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                                                        # [linux or win]\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\" + libclang_soversion, exact=True) }}\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}                # [osx]\n        - {{ pin_subpackage(\"libclang\" + libclang_soversion, exact=True) }}\n    test:\n      commands:\n        - test -f \"$PREFIX/lib/libclang.so\"                # [linux]\n        - test -f \"$PREFIX/lib/libclang.dylib\"             # [osx]\n        - if not exist %LIBRARY_LIB%\\\\libclang.lib exit 1  # [win]\n\n  - name: clang-{{ major_version }}\n    script: install_clang.sh  # [unix]\n    script: install_clang.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - libcxx                             # [osx]\n        - cmake >=3.4.3\n        - ninja                              # [win]\n        - make                               # [unix]\n        - llvmdev =={{ version }}            # [build_platform != target_platform]\n      host:\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                               # [linux or win]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, exact=True) }}  # [unix]\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}                        # [osx]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, exact=True) }}  # [unix]\n      run_constrained:\n        - clangdev {{ version }}\n        - clangxx {{ version }}\n        - clang-tools {{ version }}\n        - llvm-tools {{ version }}\n    test:\n      commands:\n        - clang-{{ major_version }} --version\n        - test ! -f \"$PREFIX/bin/clang\"                                   # [unix]\n        - test ! -f \"$PREFIX/bin/clang-cl\"                                # [unix]\n        - test ! -f \"$PREFIX/bin/clang-cpp\"                               # [unix]\n        - if exist %LIBRARY_BIN%\\\\clang.exe exit 1                        # [win]\n        - if exist %LIBRARY_BIN%\\\\clang-cl.exe exit 1                     # [win]\n        - if exist %LIBRARY_BIN%\\\\clang-cpp.exe exit 1                    # [win]\n        - test ! -f \"$PREFIX/lib/libclang-cpp.so\"                         # [linux]\n        - test -f \"$PREFIX/lib/libclang-cpp.so.{{ minor_aware_ext }}\"     # [linux]\n        - test ! -f \"$PREFIX/lib/libclang-cpp.dylib\"                      # [osx]\n        - test -f \"$PREFIX/lib/libclang-cpp.{{ minor_aware_ext }}.dylib\"  # [osx]\n        - test -f \"$PREFIX/lib/clang/{{ '.'.join(version.split('.')[:3]) }}/include/stdatomic.h\"                    # [unix]\n        - if not exist %LIBRARY_LIB%\\\\clang\\\\{{ '.'.join(version.split('.')[:3]) }}\\\\include\\\\stdatomic.h exit 1    # [win]\n\n  - name: clang\n    script: install_clang_symlinks.sh  # [unix]\n    script: install_clang_symlinks.bat  # [win]\n    requirements:\n      host:\n        - zlib                            # [win]\n        - gcc_impl_{{ target_platform }}  # [linux]\n        - {{ pin_subpackage(\"clang-\" ~ major_version, exact=True) }}\n      run:\n        - gcc_impl_{{ target_platform }}  # [linux]\n        - {{ pin_subpackage(\"clang-\" ~ major_version, exact=True) }}\n    test:\n      commands:\n        - clang --version\n        - clang-cl --version\n        - clang-cpp --version\n\n  - name: clangxx\n    script: install_clangxx.sh  # [unix]\n    script: install_clangxx.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      host:\n        - zlib  # [win]\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n    test:\n      requires:\n        - {{ compiler(\"cxx\") }}\n      files:\n        - mytest.cxx\n      commands:\n        - clang++ --version\n        - clang++ -v -c mytest.cxx\n\n  - name: clang-format-{{ major_version }}\n    script: install_clang_format.sh  # [unix]\n    script: install_clang_format.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n      # for windows, use the clang-format package.\n      skip: true  # [win]\n    requirements:\n      build:\n        # \"compiling .pyc files\" fails without this\n        - python >3\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\", exact=True) }}\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                            # [linux or win]\n        - libxml2                         # [win]\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}                            # [osx]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, max_pin=\"x.x\") }}   # [unix]\n    test:\n      commands:\n        - clang-format-{{ major_version }} --version\n        - test ! -f ${PREFIX}/bin/clang-format                   # [unix]\n        - if exist %LIBRARY_BIN%\\\\clang-format.exe exit 1        # [win]\n        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]\n        - if exist %LIBRARY_BIN%\\\\c-index-test.exe exit 1        # [win]\n\n  - name: clang-format\n    script: install_clang_format.sh  # [unix]\n    script: install_clang_format.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        # \"compiling .pyc files\" fails without this\n        - python >3\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\", exact=True) }}\n        - {{ pin_subpackage(\"clang-format-\" + major_version, exact=True) }}      # [unix]\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                               # [linux or win]\n      run:\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}                           # [osx]\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, max_pin=\"x.x\") }}  # [unix]\n        - {{ pin_subpackage(\"clang-format-\" + major_version, exact=True) }}      # [unix]\n    test:\n      commands:\n        - clang-format --version\n        - test ! -f ${PREFIX}/bin/c-index-test                   # [unix]\n        - if exist %LIBRARY_BIN%\\\\c-index-test.exe exit 1        # [win]\n\n  - name: clang-tools\n    script: install_clang_tools.sh  # [unix]\n    script: install_clang_tools.bat  # [win]\n    build:\n      track_features:\n        - hcc          # [variant==\"hcc\"]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    requirements:\n      build:\n        # \"compiling .pyc files\" fails without this\n        - python >3\n        - {{ compiler('cxx') }}\n        - cmake >=3.4.3\n        - ninja  # [win]\n        - make   # [unix]\n        - llvmdev =={{ version }}    # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage(\"clang\", exact=True) }}\n        - {{ pin_subpackage(\"clangxx\", exact=True) }}\n        - {{ pin_subpackage(\"libclang\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\", exact=True) }}\n        - {{ pin_subpackage(\"clang-format\", exact=True) }}\n        - libcxx {{ cxx_compiler_version }}  # [osx]\n        - llvmdev =={{ version }}\n        - llvm =={{ version }}\n        - zlib                               # [linux or win]\n      run:\n        - ucrt                                          # [win]\n        - {{ pin_compatible(\"libcxx\", max_pin=None) }}  # [osx]\n        - {{ pin_subpackage(\"clang-format\", exact=True) }}\n        - {{ pin_subpackage(\"libclang-cpp\" + minor_aware_ext, max_pin=\"x.x\") }}   # [unix]\n        - {{ pin_subpackage(\"libclang\", max_pin=\"x.x\") }}                         # [unix]\n      run_constrained:\n        - clangdev {{ version }}\n    test:\n      commands:\n        - clang-check --version\n        - clang-tidy --version\n\n  - name: python-clang\n    build:\n      noarch: python\n      # Building this output using this recipe is only supported on unix\n      # It can still be installed on Windows as it is marked as `noarch: python`\n      skip: true  # [not linux64]\n      string: {{ variant }}_h{{ PKG_HASH }}_{{ build_number }}\n    script: build_python_bindings.sh\n    requirements:\n      host:\n        - python >=3.7\n      run:\n        - python >=3.7\n        - libclang =={{ version }}\n    test:\n      source_files:\n        - clang/bindings/python/tests\n        - clang/bindings/python/examples/cindex\n      imports:\n        - clang\n        - clang.cindex\n      commands:\n        - cd clang/bindings/python\n        - python -m unittest discover -v\n\nabout:\n  home: http://llvm.org/\n  license: Apache-2.0 WITH LLVM-exception\n  license_file: clang/LICENSE.TXT\n  license_family: Apache\n  summary: Development headers and libraries for Clang\n  dev_url: https://github.com/llvm/llvm-project\n\nextra:\n  recipe-maintainers:\n    - JohanMabille\n    - inducer\n    - isuruf\n    - jakirkham\n    - SylvainCorlay\n    - timsnyder\n    - chrisburr\n    - xhochy\n    - h-vetinari\n  feedstock-name: clangdev\n",
 "smithy_version": "3.22.0",
 "strong_exports": false,
 "url": "https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/llvm-project-15.0.6.src.tar.xz",
 "version": "15.0.6"
}