{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/216130823.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/231229898.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "8.6.9"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/248383402.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/344261160.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "8.6.10"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/466384309.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "tk",
 "hash_type": "sha256",
 "name": "tk",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "tk"
  ]
 },
 "pinning_version": "2020.08.10.21.36.31",
 "raw_meta_yaml": "{% set version = \"8.6.12\" %}\n{% set maj_min = \".\".join(version.split(\".\")[:2]) %}\n\npackage:\n  name: tk\n  version: {{ version }}\n\nsource:\n  - url: https://downloads.sourceforge.net/tcl/tcl{{ version }}-src.tar.gz\n    folder: tcl{{ version }}\n    sha256: 26c995dd0f167e48b11961d891ee555f680c175f7173ff8cb829f4ebcde4c1a6\n  - url: https://downloads.sourceforge.net/tcl/tk{{ version }}-src.tar.gz\n    folder: tk{{ version }}\n    sha256: 12395c1f3fcb6bed2938689f797ea3cdf41ed5cb6c4766eec8ac949560310630\n    patches:\n      - patches/bitmap_osx.patch  # [osx]\n\nbuild:\n  number: 0\n  detect_binary_files_with_prefix: true\n  run_exports:\n    # pin to major.minor because library names have that info in them\n    - {{ pin_subpackage('tk', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ cdt('xorg-x11-proto-devel') }}  # [linux]\n    - {{ cdt('libx11-devel') }}          # [linux]\n    - {{ cdt('libxcb') }}                # [linux]\n    - {{ cdt('libxau') }}                # [linux]\n    - make                               # [linux]\n  host:\n    - zlib  # [unix]\n\ntest:\n\n  files:\n    - hello.tcl\n\n  commands:\n    # Check for binaries.\n    {% for ver_suffix in [\"\", maj_min] %}\n    - test -f \"${PREFIX}/bin/tclsh{{ ver_suffix }}\"                                            # [unix]\n    - test -f \"${PREFIX}/bin/wish{{ ver_suffix }}\"                                             # [unix]\n    - if not exist %LIBRARY_PREFIX%\\\\bin\\\\wish{{ ver_suffix.replace(\".\", \"\") }}.exe exit 1     # [win]\n    - if not exist %LIBRARY_PREFIX%\\\\bin\\\\tclsh{{ ver_suffix.replace(\".\", \"\") }}.exe exit 1    # [win]\n    {% endfor %}\n\n    # Check for includes.\n    {% set tcl_tk_includes = [\n            \"tcl\",\n            \"tclDecls\",\n            \"tclPlatDecls\",\n            \"tclPlatDecls\",\n            \"tclTomMathDecls\",\n            \"tclTomMath\",\n            \"tk\",\n            \"tkDecls\",\n            \"tkPlatDecls\"\n    ] %}\n    {% for each_tcl_tk_include in tcl_tk_includes %}\n    - test -f \"${PREFIX}/include/{{ each_tcl_tk_include }}.h\"                        # [unix]\n    - if not exist %LIBRARY_PREFIX%\\\\include\\\\{{ each_tcl_tk_include }}.h exit 1     # [win]\n    {% endfor %}\n\n    # Check for libraries.\n    # Library naming note: t means \"full thread support\" in Windows\n    #    https://sourceforge.net/p/tcl/mailman/tcl-bugs/thread/From_noreply@sourceforge.net_Mon_Jul_23_11:46:16_2012/\n    {% set tcl_tk_libs = [\n            \"tcl\",\n            \"tk\"\n    ] %}\n    {% for each_tcl_tk_lib in tcl_tk_libs %}\n    - test -f \"${PREFIX}/lib/lib{{ each_tcl_tk_lib }}{{ maj_min }}.dylib\"                                        # [osx]\n    - test -f \"${PREFIX}/lib/lib{{ each_tcl_tk_lib }}{{ maj_min }}.so\"                                           # [linux]\n    - test -f \"${PREFIX}/lib/lib{{ each_tcl_tk_lib }}stub{{ maj_min }}.a\"                                        # [unix]\n    - if not exist %LIBRARY_PREFIX%\\\\lib\\\\{{ each_tcl_tk_lib }}{{ maj_min.replace(\".\", \"\") }}t.lib exit 1         # [win]\n    - if not exist %LIBRARY_PREFIX%\\\\bin\\\\{{ each_tcl_tk_lib }}{{ maj_min.replace(\".\", \"\") }}t.dll exit 1         # [win]\n    - if not exist %LIBRARY_PREFIX%\\\\lib\\\\{{ each_tcl_tk_lib }}stub{{ maj_min.replace(\".\", \"\") }}.lib exit 1     # [win]\n    {% endfor %}\n\n    # Check commands work and run a simple program.\n    - tclsh hello.tcl\n    - tclsh{{ maj_min }} hello.tcl                       # [unix]\n    - tclsh{{ maj_min.replace(\".\", \"\") }} hello.tcl      # [win]\n    - wish hello.tcl\n    - wish{{ maj_min }} hello.tcl                        # [unix]\n    - wish{{ maj_min.replace(\".\", \"\") }}t hello.tcl      # [win]\n\nabout:\n  home: http://www.tcl.tk/\n  license: TCL\n  license_family: BSD\n  license_file: tcl{{ version }}/license.terms\n  summary: A dynamic programming language with GUI support.  Bundles Tcl and Tk.\n  dev_url: https://github.com/tcltk/tk\n\nextra:\n  recipe-maintainers:\n    - jakirkham\n    - msarahan\n    - pelson\n    - ocefpaf\n    - isuruf\n    - matthiasdiener\n",
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.9",
 "strong_exports": false,
 "url": "https://downloads.sourceforge.net/tcl/tcl8.6.12-src.tar.gz",
 "version": "8.6.12"
}