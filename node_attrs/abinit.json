{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/419466736.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51106"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/419659384.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "9.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513493828.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gcc930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/619205460.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf480"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/725254803.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf481"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/748268651.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "9.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/771133742.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/776755619.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "9.6.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1012483940.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51122"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "abinit",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "ABINIT is a software suite to calculate the optical, mechanical,\nvibrational, and other observable properties of materials. Starting\nfrom the quantum equations of density functional theory, you can\nbuild up to advanced applications with perturbation theories based on\nDFT, and many-body Green's functions (GW and DMFT) ...\n",
   "dev_url": "https://github.com/abinit/abinit/",
   "doc_url": "https://wiki.abinit.org/doku.php",
   "home": "https://www.abinit.org",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "ABINIT is an atomic-scale simulation software suite."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jan-janssen",
    "gmatteo",
    "jmbeuken"
   ]
  },
  "package": {
   "name": "abinit",
   "version": "9.6.2"
  },
  "requirements": {
   "build": [
    "m4",
    "autoconf",
    "automake",
    "make",
    "libtool",
    "fortran_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "mpich",
    "libblas",
    "liblapack",
    "libxc <5.0",
    "zlib",
    "_openmp_mutex",
    "fftw",
    "fftw * mpi_mpich_*",
    "hdf5",
    "hdf5 * mpi_mpich_*",
    "libnetcdf",
    "libnetcdf * mpi_mpich_*",
    "netcdf-fortran",
    "netcdf-fortran * mpi_mpich_*"
   ],
   "run": [
    "mpich",
    "libxc <5.0",
    "fftw * mpi_mpich_*",
    "hdf5 * mpi_mpich_*",
    "libnetcdf * mpi_mpich_*",
    "netcdf-fortran * mpi_mpich_*"
   ]
  },
  "source": {
   "patches": [
    "optim.patch"
   ],
   "sha256": "5fba537bac99f53ae02781f1f374247503241b80ce329dc51fe2e986b13198f0",
   "url": "https://github.com/abinit/abinit/archive/refs/tags/9.6.2.tar.gz"
  },
  "test": {
   "commands": [
    "abinit -b",
    "abinit tbase1_1.in"
   ],
   "files": [
    "01h.pspgth",
    "tbase1_1.files",
    "tbase1_1.in"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "autoconf",
    "automake",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "libtool",
    "m4",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "_openmp_mutex",
    "fftw",
    "hdf5",
    "libblas",
    "liblapack",
    "libnetcdf",
    "libxc",
    "mpich",
    "netcdf-fortran",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw",
    "hdf5",
    "libnetcdf",
    "libxc",
    "mpich",
    "netcdf-fortran"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "ABINIT is a software suite to calculate the optical, mechanical,\nvibrational, and other observable properties of materials. Starting\nfrom the quantum equations of density functional theory, you can\nbuild up to advanced applications with perturbation theories based on\nDFT, and many-body Green's functions (GW and DMFT) ...\n",
   "dev_url": "https://github.com/abinit/abinit/",
   "doc_url": "https://wiki.abinit.org/doku.php",
   "home": "https://www.abinit.org",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "ABINIT is an atomic-scale simulation software suite."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "jan-janssen",
    "gmatteo",
    "jmbeuken"
   ]
  },
  "package": {
   "name": "abinit",
   "version": "9.6.2"
  },
  "requirements": {
   "build": [
    "m4",
    "autoconf",
    "automake",
    "make",
    "libtool",
    "fortran_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host": [
    "mpich",
    "libblas",
    "liblapack",
    "libxc <5.0",
    "zlib",
    "_openmp_mutex",
    "fftw",
    "fftw * mpi_mpich_*",
    "hdf5",
    "hdf5 * mpi_mpich_*",
    "libnetcdf",
    "libnetcdf * mpi_mpich_*",
    "netcdf-fortran",
    "netcdf-fortran * mpi_mpich_*"
   ],
   "run": [
    "mpich",
    "libxc <5.0",
    "fftw * mpi_mpich_*",
    "hdf5 * mpi_mpich_*",
    "libnetcdf * mpi_mpich_*",
    "netcdf-fortran * mpi_mpich_*"
   ]
  },
  "source": {
   "patches": [
    "optim.patch"
   ],
   "sha256": "5fba537bac99f53ae02781f1f374247503241b80ce329dc51fe2e986b13198f0",
   "url": "https://github.com/abinit/abinit/archive/refs/tags/9.6.2.tar.gz"
  },
  "test": {
   "commands": [
    "abinit -b",
    "abinit tbase1_1.in"
   ],
   "files": [
    "01h.pspgth",
    "tbase1_1.files",
    "tbase1_1.in"
   ]
  }
 },
 "name": "abinit",
 "new_version": "9.6.2",
 "new_version_attempts": {
  "9.0.4": 1,
  "9.6.1": 1,
  "9.6.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "abinit"
  ]
 },
 "pinning_version": "2022.07.29.16.12.45",
 "pre_pr_migrator_attempts": {
  "gcc930": 1
 },
 "pre_pr_migrator_status": {
  "gcc930": "bot error: Traceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 38, in __call__\n    return cls._cache_[arg]\nKeyError: '>=0*,<0+'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 38, in __call__\n    return cls._cache_[arg]\nKeyError: '<0+'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 38, in __call__\n    return cls._cache_[arg]\nKeyError: '0+'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 938, in main\n    hash_type=attrs.get(\"hash_type\", \"sha256\"),\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 245, in run\n    solvable, errors, _ = is_recipe_solvable(feedstock_dir)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/mamba_solver.py\", line 433, in is_recipe_solvable\n    additional_channels=additional_channels,\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/mamba_solver.py\", line 583, in _is_recipe_solvable_on_platform\n    _solvable, _err = mamba_solver.solve(run_req)\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/mamba_solver.py\", line 285, in solve\n    _specs = [_norm_spec(s) for s in specs]\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/mamba_solver.py\", line 285, in <listcomp>\n    _specs = [_norm_spec(s) for s in specs]\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/mamba_solver.py\", line 82, in _norm_spec\n    m = MatchSpec(myspec)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/match_spec.py\", line 55, in __call__\n    return super(MatchSpecType, cls).__call__(**parsed)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/match_spec.py\", line 177, in __init__\n    self._match_components = self._build_components(**kwargs)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/match_spec.py\", line 403, in _build_components\n    return frozendict(_make_component(key, value) for key, value in iteritems(kwargs))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/match_spec.py\", line 403, in <genexpr>\n    return frozendict(_make_component(key, value) for key, value in iteritems(kwargs))\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/match_spec.py\", line 417, in _make_component\n    matcher = _implementors[field_name](value)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 40, in __call__\n    val = cls._cache_[arg] = super(SingleStrArgCachingType, cls).__call__(arg)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 497, in __init__\n    vspec_str, matcher, is_exact = self.get_matcher(vspec)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 508, in get_matcher\n    tup = tuple(VersionSpec(s) for s in vspec_tree[1:])\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 508, in <genexpr>\n    tup = tuple(VersionSpec(s) for s in vspec_tree[1:])\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 40, in __call__\n    val = cls._cache_[arg] = super(SingleStrArgCachingType, cls).__call__(arg)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 497, in __init__\n    vspec_str, matcher, is_exact = self.get_matcher(vspec)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 546, in get_matcher\n    self.matcher_vo = VersionOrder(vo_str)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 40, in __call__\n    val = cls._cache_[arg] = super(SingleStrArgCachingType, cls).__call__(arg)\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.7/site-packages/conda/models/version.py\", line 220, in __init__\n    raise InvalidVersionSpec(vstr, \"empty version component\")\nconda.exceptions.InvalidVersionSpec: Invalid version '0+': empty version component\n"
 },
 "raw_meta_yaml": "{% set name = \"abinit\" %}\n{% set version = \"9.6.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/abinit/abinit/archive/refs/tags/{{ version }}.tar.gz\n  sha256: 5fba537bac99f53ae02781f1f374247503241b80ce329dc51fe2e986b13198f0\n  patches:\n    - optim.patch\n\nbuild:\n  number: 1\n  skip: true  # [not linux]\n\n{% if mpi != 'nompi' %}\n{% set mpi_prefix = \"mpi_\" + mpi %}\n{% else %}\n{% set mpi_prefix = \"nompi\" %}\n{% endif %}\n\nrequirements:\n  build:\n    - m4\n    - autoconf\n    - automake\n    - make\n    - libtool\n    - openmpi-mpifort  # [mpi == 'openmpi']\n    - {{ compiler('fortran') }}\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - {{ mpi }}\n    - libblas\n    - liblapack\n    - libxc <5.0\n    - zlib\n    - _openmp_mutex\n    # need to list libnetcdf and netcdf-fortran twice to get version\n    # pinning from conda_build_config and build pinning from {{ mpi_prefix }}\n    - fftw\n    - fftw * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - hdf5\n    - hdf5 * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - libnetcdf\n    - libnetcdf * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - netcdf-fortran\n    - netcdf-fortran * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n  run:\n    - {{ mpi }}\n    - libxc <5.0\n    - fftw * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - hdf5 * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - libnetcdf * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n    - netcdf-fortran * {{ mpi_prefix }}_*  # [mpi != 'nompi']\n\ntest:\n  files:\n    - 01h.pspgth\n    - tbase1_1.files\n    - tbase1_1.in\n  commands:\n    - abinit -b\n    - abinit tbase1_1.in\n\nabout:\n  home: https://www.abinit.org\n  license: GPL-3.0-only\n  license_family: GPL\n  license_file: COPYING\n  summary: ABINIT is an atomic-scale simulation software suite.\n\n  description: |\n    ABINIT is a software suite to calculate the optical, mechanical,\n    vibrational, and other observable properties of materials. Starting\n    from the quantum equations of density functional theory, you can\n    build up to advanced applications with perturbation theories based on\n    DFT, and many-body Green's functions (GW and DMFT) ...\n  doc_url: https://wiki.abinit.org/doku.php\n  dev_url: https://github.com/abinit/abinit/\n\nextra:\n  recipe-maintainers:\n    - jan-janssen\n    - gmatteo\n    - jmbeuken\n",
 "req": {
  "__set__": true,
  "elements": [
   "_openmp_mutex",
   "autoconf",
   "automake",
   "c_compiler_stub",
   "cxx_compiler_stub",
   "fftw",
   "fortran_compiler_stub",
   "hdf5",
   "libblas",
   "liblapack",
   "libnetcdf",
   "libtool",
   "libxc",
   "m4",
   "make",
   "mpich",
   "netcdf-fortran",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "autoconf",
    "automake",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "libtool",
    "m4",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "_openmp_mutex",
    "c_compiler_stub",
    "ctng-compilers",
    "cxx_compiler_stub",
    "fftw",
    "fortran_compiler_stub",
    "hdf5",
    "libblas",
    "liblapack",
    "libnetcdf",
    "libxc",
    "mpich",
    "netcdf-fortran",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cxx_compiler_stub",
    "fftw",
    "fortran_compiler_stub",
    "hdf5",
    "libnetcdf",
    "libxc",
    "mpich",
    "netcdf-fortran"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "autoconf",
    "automake",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "fortran_compiler_stub",
    "libtool",
    "m4",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "_openmp_mutex",
    "fftw",
    "fftw * mpi_mpich_*",
    "hdf5",
    "hdf5 * mpi_mpich_*",
    "libblas",
    "liblapack",
    "libnetcdf",
    "libnetcdf * mpi_mpich_*",
    "libxc <5.0",
    "mpich",
    "netcdf-fortran",
    "netcdf-fortran * mpi_mpich_*",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "fftw * mpi_mpich_*",
    "hdf5 * mpi_mpich_*",
    "libnetcdf * mpi_mpich_*",
    "libxc <5.0",
    "mpich",
    "netcdf-fortran * mpi_mpich_*"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/abinit/abinit/archive/refs/tags/9.6.2.tar.gz",
 "version": "9.6.2"
}