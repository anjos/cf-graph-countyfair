{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/375473751.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pytentiostat",
 "hash_type": "sha256",
 "name": "pytentiostat",
 "new_version": "0.0.5",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pytentiostat"
  ]
 },
 "pinning_version": "2020.02.12",
 "raw_meta_yaml": "{% set name = \"pytentiostat\" %}\n{% set version = \"0.0.5\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/juami/{{ name }}/archive/{{ version }}.tar.gz\n  sha256: 05862ead9f4373d8ac5b36df9f9b000cff9ac79fec6b81d5ef2e50189cd0c712\n\nbuild:\n  noarch: python\n  number: 1\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python >=3\n    - pip\n  run:\n    - python >=3\n    - pyfirmata\n    - pandas\n    - matplotlib-base\n    - pyyaml\n    - pyserial\n\ntest:\n  imports:\n    - pytentiostat\n\nabout:\n  home: https://github.com/juami/pytentiostat\n  license: BSD 3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'python code to run the JUAMI potentiostat'\n\n  description: |\n    The JUAMI potentiostat is a cheap (<$100) potentiostat built on the Arduino platform\n    for use in classroom demonstrations and simple research.  It can carry out\n    electrochemical scans such as one would use for testing performance of an\n    electrochemical cell or battery.  It was developed by a team from JUAMI, the\n    joint undertaking for an African Materials Institute (www.juami.org) which has\n    a mission to help develop research collaborations in materials science between\n    US and African researchers.  Pytentiostat is python code for running the\n    potentiostat.  For more information, contact Prof. Simon Billinge at email\n    sb2896@columbia.edu\n  doc_url: https://pytentiostat.github.io/\n  dev_url: https://github.com/juami/pytentiostat\n\nextra:\n  recipe-maintainers:\n    - sbillinge\n    - chiahaoliu\n",
 "smithy_version": "3.6.8",
 "strong_exports": false,
 "url": "https://github.com/juami/pytentiostat/archive/0.0.5.tar.gz",
 "version": "0.0.5"
}