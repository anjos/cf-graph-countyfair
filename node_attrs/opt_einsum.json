{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/198231254.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/199919650.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Noarch",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/208435593.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/208684467.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/210601128.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/211903989.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222696164.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/235201811.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/235205020.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/237157610.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/306608118.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/309960463.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/322978526.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/382693711.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/403832460.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/454836622.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "opt_einsum",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Einsum is a very powerful function for contracting tensors of arbitrary dimension and index. However, it is typically only optimized to contract two terms at a time resulting in non-optimal scaling. This package optimizes the contraction order for arbitrarily large speedups.\nSee the docs for more information: http://optimized-einsum.readthedocs.io\n",
   "dev_url": "https://github.com/dgasmith/opt_einsum",
   "home": "http://github.com/dgasmith/opt_einsum",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optimizing einsum functions in NumPy, Tensorflow, Dask, and more with contraction order optimization."
  },
  "build": {
   "noarch": "python",
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "dgasmith",
    "loriab",
    "xhochy"
   ]
  },
  "package": {
   "name": "opt_einsum",
   "version": "3.3.0"
  },
  "requirements": {
   "host": [
    "python >=3.5",
    "setuptools",
    "pip"
   ],
   "run": [
    "python >=3.5",
    "numpy"
   ]
  },
  "source": {
   "sha256": "59f6475f77bbc37dcf7cd748519c0ec60722e91e63ca114e68821c0c54a46549",
   "url": "https://pypi.io/packages/source/o/opt_einsum/opt_einsum-3.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pytest --pyargs opt_einsum",
    "pip check"
   ],
   "requires": [
    "python >=3.5",
    "pytest",
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Einsum is a very powerful function for contracting tensors of arbitrary dimension and index. However, it is typically only optimized to contract two terms at a time resulting in non-optimal scaling. This package optimizes the contraction order for arbitrarily large speedups.\nSee the docs for more information: http://optimized-einsum.readthedocs.io\n",
   "dev_url": "https://github.com/dgasmith/opt_einsum",
   "home": "http://github.com/dgasmith/opt_einsum",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optimizing einsum functions in NumPy, Tensorflow, Dask, and more with contraction order optimization."
  },
  "build": {
   "noarch": "python",
   "number": "1",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "dgasmith",
    "loriab",
    "xhochy"
   ]
  },
  "package": {
   "name": "opt_einsum",
   "version": "3.3.0"
  },
  "requirements": {
   "host": [
    "python >=3.5",
    "setuptools",
    "pip"
   ],
   "run": [
    "python >=3.5",
    "numpy"
   ]
  },
  "source": {
   "sha256": "59f6475f77bbc37dcf7cd748519c0ec60722e91e63ca114e68821c0c54a46549",
   "url": "https://pypi.io/packages/source/o/opt_einsum/opt_einsum-3.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pytest --pyargs opt_einsum",
    "pip check"
   ],
   "requires": [
    "python >=3.5",
    "pytest",
    "pip"
   ]
  }
 },
 "name": "opt_einsum",
 "new_version": "3.3.0",
 "new_version_attempts": {
  "3.2.1": 1,
  "3.3.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "opt_einsum"
  ]
 },
 "pinning_version": "2020.07.21.17.10.15",
 "raw_meta_yaml": "{% set name = \"opt_einsum\" %}\n{% set version = \"3.3.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 59f6475f77bbc37dcf7cd748519c0ec60722e91e63ca114e68821c0c54a46549\n\nbuild:\n  noarch: python\n  number: 1\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python >=3.5\n    - setuptools\n    - pip\n  run:\n    - python >=3.5\n    - numpy\n\ntest:\n  requires:\n    - python >=3.5\n    - pytest\n    - pip\n  commands:\n    - pytest --pyargs opt_einsum\n    - pip check\n\nabout:\n  home: http://github.com/dgasmith/opt_einsum\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Optimizing einsum functions in NumPy, Tensorflow, Dask, and more with contraction order optimization.\n\n  description: >\n    Einsum is a very powerful function for contracting tensors of arbitrary dimension and index. However, it is typically only optimized to contract two terms at a time resulting in non-optimal scaling. This package optimizes the contraction order for arbitrarily large speedups.\n\n    See the docs for more information: http://optimized-einsum.readthedocs.io\n\n  dev_url: https://github.com/dgasmith/opt_einsum\n\nextra:\n  recipe-maintainers:\n    - dgasmith\n    - loriab\n    - xhochy\n",
 "req": {
  "__set__": true,
  "elements": [
   "numpy",
   "pip",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python"
   ]
  }
 },
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.4\n",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.5",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python >=3.5"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "python >=3.5"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/o/opt_einsum/opt_einsum-3.3.0.tar.gz",
 "version": "3.3.0"
}