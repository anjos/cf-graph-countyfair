{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/847996496.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "tbb2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/848003091.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/911216403.json"
   },
   "data": {
    "bot_rerun": 1658972584.5187407,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1010287475.json"
   },
   "data": {
    "bot_rerun": 1660050090.30774,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1052875745.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 3,
    "migrator_version": 0,
    "name": "boost1780"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1102560301.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1106526135.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "gtsam",
 "hash_type": "sha256",
 "name": "gtsam",
 "new_version": "4.1.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "gtsam"
  ]
 },
 "pinning_version": "2022.11.01.06.59.37",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"gtsam\" %}\n{% set version = \"4.1.1\" %}\n\npackage:\n  name: gtsam\n  version: '{{ version }}'\n\nsource:\n  url: https://github.com/borglab/gtsam/archive/refs/tags/{{ version }}.tar.gz\n  sha256: c7b5e6cdad52b141c272778f47baf628975457be3e26ed96a7bc2ae685a00af0\n  patches:\n    - nobuild-examples-timing.patch\n    - unvendor-findboost.patch\n    - unvendor-findtbb.patch\n    - fix-boost.patch\n    - fix-metis-lib.patch\n    - 1102.patch\n    - fix-python-build-win.patch  # [win]\nbuild:\n  number: 4\n  run_exports:\n    - '{{ pin_subpackage(name, max_pin=\"x.x\") }}'\n\nrequirements:\n  build:\n    - '{{ compiler(\"c\") }}'\n    - '{{ compiler(\"cxx\") }}'\n    - ninja\n    - cmake\n    - pybind11                               # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n  host:\n    - python\n    - boost\n    - boost-cpp\n    - eigen\n    - geographiclib-cpp\n    - metis\n    - suitesparse\n    - tbb\n    - tbb-devel\n    - pybind11\n    - pyparsing\n    - numpy\n    - setuptools\n    - pip\n  run:\n    - python\n    - pyparsing\n    - numpy\n    - boost-cpp\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libgtsam${SHLIB_EXT}  # [not win]\n    - test -f ${PREFIX}/lib/cmake/gtwrap/gtwrapConfig.cmake  # [not win]\n    - test -f ${PREFIX}/lib/cmake/GTSAM/GTSAMConfig.cmake  # [not win]\n    - test -f ${PREFIX}/include/gtsam/base/types.h  # [not win]\n    - if exist %PREFIX%\\\\Library\\\\include\\\\gtsam\\\\base\\\\types.h (exit 0) else (exit 1)  # [win]\n    - if exist $PREFIX$\\\\Library\\\\lib\\\\gtsam.lib (exit 0) else (exit 1)  # [win]\n    - if exist $PREFIX$\\\\Library\\\\bin\\\\gtsam.dll (exit 0) else (exit 1)  # [win]\n  imports:   # [not win]\n    - gtsam  # [not win]\n\n\nabout:\n  home: https://github.com/borglab/gtsam\n  summary: GTSAM is a library of C++ classes that implement smoothing and mapping (SAM) in robotics and vision\n  license: BSD-3-Clause\n  license_file:\n    - LICENSE\n    - LICENSE.BSD\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - ameysutavani\n    - Tobias-Fischer\n    - traversaro\n",
 "smithy_version": "3.21.2",
 "strong_exports": false,
 "url": "https://github.com/borglab/gtsam/archive/refs/tags/4.1.1.tar.gz",
 "version": "4.1.1"
}