{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/626071118.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/774531033.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/817126198.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.108.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "coin-or-osi",
 "hash_type": "sha256",
 "name": "coin-or-osi",
 "new_version": "0.108.7",
 "new_version_attempts": {
  "0.108.7": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "coin-or-osi"
  ]
 },
 "pinning_version": "2022.01.09.15.48.10",
 "raw_meta_yaml": "{% set name = \"coin-or-osi\" %}\n{% set version = \"0.108.7\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/coin-or/Osi/archive/releases/{{ version }}.tar.gz\n  sha256: f1bc53a498585f508d3f8d74792440a30a83c8bc934d0c8ecf8cd8bc0e486228\n  patches:\n    - 0001-Patch-for-downstream.patch\n\nbuild:\n  number: 1\n  skip: true  # [win]\n  run_exports:\n    - {{ pin_subpackage(name, min_pin='x.x', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - gnuconfig  # [unix]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - pkg-config\n    - make  # [unix]\n  host:\n    - coin-or-utils\n    - zlib\n    - bzip2\n    - libblas\n    - libcblas\n    - liblapack\n  run_constrained:\n    - coincbc * *_metapackage\n\ntest:\n  commands:\n    - test -f $PREFIX/lib/libOsi${SHLIB_EXT}\n    - test -f $PREFIX/include/coin/OsiConfig.h\n\nabout:\n  home: https://github.com/coin-or/Osi\n  dev_url: https://github.com/coin-or/Osi\n  license: EPL-2.0\n  license_family: OTHER\n  license_file: LICENSE\n  summary: Coin OR Open Solver Interface (OSI)\n  description: |\n    Osi (Open Solver Interface) provides an abstract base class to a generic\n    linear programming (LP) solver, along with derived classes for specific\n    solvers. Many applications may be able to use the Osi to insulate themselves\n    from a specific LP solver. That is, programs written to the OSI standard may\n    be linked to any solver with an OSI interface and should produce correct\n    results. The OSI has been significantly extended compared to its first\n    incarnation. Currently, the OSI supports linear programming solvers and has\n    rudimentary support for integer programming. Among others the following\n    operations are supported:\n\n      - creating the LP formulation;\n      - directly modifying the formulation by adding rows/columns;\n      - modifying the formulation by adding cutting planes provided by CGL;\n      - solving the formulation (and resolving after modifications);\n      - extracting solution information;\n      - invoking the underlying solver's branch-and-bound component.\n\nextra:\n  recipe-maintainers:\n    - wolfv\n    - tkralphs\n    - jschueller\n",
 "smithy_version": "3.16.1",
 "strong_exports": false,
 "url": "https://github.com/coin-or/Osi/archive/releases/0.108.7.tar.gz",
 "version": "0.108.7"
}