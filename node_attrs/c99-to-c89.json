{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/211460568.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/258170411.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "compiler_stack": "comp7",
  "max_py_ver": "37",
  "max_r_ver": "35",
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure",
   "win": "azure"
  }
 },
 "feedstock_name": "c99-to-c89",
 "hash_type": "sha256",
 "name": "c99-to-c89",
 "new_version": "1.0.4",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "c99-to-c89"
  ]
 },
 "pinning_version": "2019.03.04",
 "raw_meta_yaml": "{% set version = \"1.0.4\" %}\n\npackage:\n  name: c99-to-c89\n  version: {{ version }}\n\nsource:\n  url: https://github.com/AnacondaRecipes/c99-to-c89/archive/release-{{ version }}.tar.gz\n  sha256: 1df2ec430d34e9034d162969fe1a12cee50fa67cacdcc60d7b57b6c45b576467\n\n\nbuild:\n  number: 1000\n  skip: True  # [unix]\n  skip: true  # [win and vc!=14]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - msinttypes  # [win and vc==9]\n    - m2-sed\n    - m2-base\n    - m2-make\n    - m2-filesystem\n    - m2-p7zip\n    - m2w64-tools-git\n\ntest:\n  requires:\n    - {{ compiler('c') }}\n  files:\n    - tests\n  commands:\n    - echo on\n    - echo cd %CD%\n    - set C99_TO_C89_CONV_DEBUG_LEVEL=0\n    - set C99_TO_C89_WRAP_DEBUG_LEVEL=0\n    - set C99_TO_C89_WRAP_SAVE_TEMPS=1\n    - set C99_TO_C89_WRAP_NO_LINE_DIRECTIVES=1\n    # Simple but large test:\n    - c99wrap cl /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c\n    - echo /nologo -DDLL_EXPORT -DHAVE_CONFIG_H -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE -Dlzma_EXPORTS -I%CD%\\tests /DWIN32 /D_WINDOWS /Fo%TEMP%\\check.c.obj -c %CD%\\tests\\check.c > response-file\n    # Same test but via a response-file:\n    - c99wrap cl @response-file\n    # Small tests from now on so can safely enable a lot of debug output:\n    - set C99_TO_C89_CONV_DEBUG_LEVEL=2\n    - set C99_TO_C89_WRAP_DEBUG_LEVEL=2\n    # Test fix for broken handling of empty cond-statement in loops when moving the decl out of the init-expression:\n    # for (int i = 0 ; ; ++i) {} => int i = 0 ; ; for ( ; i++) {}\n    - c99wrap cl /Folzma_encoder_optimal_normal.c.obj -c %CD%\\tests\\lzma_encoder_optimal_normal.c\n    # Simple case I broke when attempting to fix cursor position management bug tested below:\n    - c99wrap cl /Focheck-2.c.obj -c %CD%\\tests\\check-2.c\n    # The cl pre-processor does not remove line continuations and the cl compiler cannot handle these:\n    - c99wrap cl /Fotest-macro-line-continuation.o -c %CD%\\tests\\test-macro-line-continuation.c\n    - c99wrap cl /Fotest-pragma-comment.o -c %CD%\\tests\\test-pragma-comment.c\n    # Next problem, cursor position management bug. \"else if\" => \"elseif\" and all other spaces vanish\n    # after insertion text to an earlier position on the same line, fixed by maintaining relative spacing.\n    # .. this test must be the last one due it exiting in both cases (though we could probably make it a\n    # c99wrap test instead so failure to compile would cause a natural exit).\n    - c99conv -ms %CD%\\tests\\stream_encoder.c.obj_preprocessed.c stream_encoder.c.converted.c\n    - findstr elseif stream_encoder.c.converted.c && (exit /b 1) || (exit /b 0)\n\nabout:\n  home: https://github.com/libav/c99-to-c89\n  license: Apache 2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: 'Tool to convert C99 code to MSVC-compatible C89, with many Anaconda Distribution fixes'\n  dev_url: https://github.com/libav/c99-to-c89\n\nextra:\n  recipe-maintainers:\n    - mingwandroid\n    - ocefpaf\n    - patricksnape\n",
 "smithy_version": "3.2.14",
 "strong_exports": false,
 "url": "https://github.com/AnacondaRecipes/c99-to-c89/archive/release-1.0.4.tar.gz",
 "version": "1.0.4"
}