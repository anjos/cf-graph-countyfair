{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/449103028.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/465597008.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/484038514.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/599212660.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/616307575.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "sphinx-js",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "When you write a JavaScript library, how do you explain it to people? If\nit's a small project in a domain your users are familiar with, JSDoc's\nalphabetical list of routines might suffice. But in a larger project, it is\nuseful to intersperse prose with your API docs without having to copy and\npaste things.\n\nsphinx-js lets you use the industry-leading Sphinx documentation tool with\nJS projects. It provides a handful of directives, patterned after the\nPython-centric autodoc ones, for pulling JSDoc-formatted documentation into\nreStructuredText pages. And, because you can keep using JSDoc in your code,\nyou remain compatible with the rest of your JS tooling, like Google's\nClosure Compiler.\n",
   "home": "https://github.com/mozilla/sphinx-js",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Autodoc-style extraction into Sphinx for your JS project"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv --no-deps"
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "sphinx-js",
   "version": "3.1.2"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.7"
   ],
   "run": [
    "jinja2 >=2.0,<3.0",
    "nodejs",
    "parsimonious",
    "python >=3.7",
    "sphinx >=3.0.0"
   ]
  },
  "source": {
   "sha256": "04fe0d2fec6d39b505d70500d0132cfa0efc834760c9598048c1a9dbbc175732",
   "url": "https://pypi.io/packages/source/s/sphinx-js/sphinx-js-3.1.2.tar.gz"
  },
  "test": {
   "commands": null,
   "imports": [
    "sphinx_js"
   ],
   "requires": [
    "pytest",
    "python >=3.7",
    "recommonmark",
    "sphinx"
   ],
   "source_files": [
    "tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "nodejs",
    "parsimonious",
    "python",
    "sphinx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest",
    "python",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "When you write a JavaScript library, how do you explain it to people? If\nit's a small project in a domain your users are familiar with, JSDoc's\nalphabetical list of routines might suffice. But in a larger project, it is\nuseful to intersperse prose with your API docs without having to copy and\npaste things.\n\nsphinx-js lets you use the industry-leading Sphinx documentation tool with\nJS projects. It provides a handful of directives, patterned after the\nPython-centric autodoc ones, for pulling JSDoc-formatted documentation into\nreStructuredText pages. And, because you can keep using JSDoc in your code,\nyou remain compatible with the rest of your JS tooling, like Google's\nClosure Compiler.\n",
   "home": "https://github.com/mozilla/sphinx-js",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Autodoc-style extraction into Sphinx for your JS project"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/bin/python -m pip install . -vv --no-deps"
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "sphinx-js",
   "version": "3.1.2"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.7"
   ],
   "run": [
    "jinja2 >=2.0,<3.0",
    "nodejs",
    "parsimonious",
    "python >=3.7",
    "sphinx >=3.0.0"
   ]
  },
  "source": {
   "sha256": "04fe0d2fec6d39b505d70500d0132cfa0efc834760c9598048c1a9dbbc175732",
   "url": "https://pypi.io/packages/source/s/sphinx-js/sphinx-js-3.1.2.tar.gz"
  },
  "test": {
   "commands": null,
   "imports": [
    "sphinx_js"
   ],
   "requires": [
    "pytest",
    "python >=3.7",
    "recommonmark",
    "sphinx"
   ],
   "source_files": [
    "tests"
   ]
  }
 },
 "name": "sphinx-js",
 "new_version": "3.1.2",
 "new_version_attempts": {
  "3.0": 1,
  "3.0.1": 1,
  "3.1": 1,
  "3.1.1": 1,
  "3.1.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "sphinx-js"
  ]
 },
 "pinning_version": "2021.04.15.09.30.17",
 "raw_meta_yaml": "{% set name = \"sphinx-js\" %}\n{% set version = \"3.1.2\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 04fe0d2fec6d39b505d70500d0132cfa0efc834760c9598048c1a9dbbc175732\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv --no-deps\n\nrequirements:\n  host:\n    - pip\n    - python >=3.7\n  run:\n    # apparently not pinned for now because pip solver\n    # - docutils\n    - jinja2 >=2.0,<3.0\n    - nodejs\n    # TODO: should be pinned, needs historical version\n    # - parsimonious >=0.7.0,<0.8.0\n    - parsimonious\n    - python >=3.7\n    - sphinx >=3.0.0\n\ntest:\n  requires:\n    - pytest\n    - python >=3.7\n    - recommonmark\n    - sphinx\n    # - pip\n  source_files:\n    - tests\n  imports:\n    - sphinx_js\n  commands:\n    # TODO: still can't pip check because parsimonious\n    # - python -m pip check\n\nabout:\n  home: https://github.com/mozilla/sphinx-js\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Autodoc-style extraction into Sphinx for your JS project\n\n  description: |\n    When you write a JavaScript library, how do you explain it to people? If\n    it's a small project in a domain your users are familiar with, JSDoc's\n    alphabetical list of routines might suffice. But in a larger project, it is\n    useful to intersperse prose with your API docs without having to copy and\n    paste things.\n\n    sphinx-js lets you use the industry-leading Sphinx documentation tool with\n    JS projects. It provides a handful of directives, patterned after the\n    Python-centric autodoc ones, for pulling JSDoc-formatted documentation into\n    reStructuredText pages. And, because you can keep using JSDoc in your code,\n    you remain compatible with the rest of your JS tooling, like Google's\n    Closure Compiler.\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n",
 "req": {
  "__set__": true,
  "elements": [
   "jinja2",
   "nodejs",
   "parsimonious",
   "pip",
   "python",
   "sphinx"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2",
    "nodejs",
    "parsimonious",
    "python",
    "sphinx"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest",
    "python",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "smithy_version": "3.10.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.7"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "jinja2 >=2.0,<3.0",
    "nodejs",
    "parsimonious",
    "python >=3.7",
    "sphinx >=3.0.0"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest",
    "python >=3.7",
    "recommonmark",
    "sphinx"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/s/sphinx-js/sphinx-js-3.1.2.tar.gz",
 "version": "3.1.2"
}