{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/310918737.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/419763687.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/421063436.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/456634953.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "flake8-black",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.2.1"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6",
    "flake8 >=3",
    "black >=19.3b0"
   ]
  },
  "source": {
   "sha256": "f26651bc10db786c03f4093414f7c9ea982ed8a244cec323c984feeffdf4c118",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.2.1"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6",
    "flake8 >=3",
    "black >=19.3b0"
   ]
  },
  "source": {
   "sha256": "f26651bc10db786c03f4093414f7c9ea982ed8a244cec323c984feeffdf4c118",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "name": "flake8-black",
 "new_version": "0.2.1",
 "new_version_attempts": {
  "0.1.2": 1,
  "0.2.0": 1,
  "0.2.1": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.2.1"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6",
    "flake8 >=3",
    "black >=19.3b0"
   ]
  },
  "source": {
   "sha256": "f26651bc10db786c03f4093414f7c9ea982ed8a244cec323c984feeffdf4c118",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "flake8-black"
  ]
 },
 "pinning_version": "2020.07.24.15.53.25",
 "raw_meta_yaml": "{% set name = \"flake8-black\" %}\n{% set version = \"0.2.1\" %}\n{% set sha256 = \"f26651bc10db786c03f4093414f7c9ea982ed8a244cec323c984feeffdf4c118\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n    - flake8 >=3\n    - black >=19.3b0\n\ntest:\n  commands:\n    - 'flake8 --version | grep black:'\n\nabout:\n  home: https://github.com/peterjc/flake8-black\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.rst\n  summary: Extension for flake8 for validating Python code style using black\n  dev_url: https://github.com/peterjc/flake8-black\n  description: |\n    Black, \"The Uncompromising Code Formatter\", is normally run to edit your\n    Python code in place to match their coding style, a strict subset of the\n    PEP 8 style guide. The point of this plugin is to be able to run\n    black --check ... from within the flake8 plugin ecosystem. You might use\n    this via a git pre-commit hook, or as part of your continuous integration\n    testing.\n\nextra:\n  recipe-maintainers:\n    - peterjc\n",
 "req": {
  "__set__": true,
  "elements": [
   "black",
   "flake8",
   "pip",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.4\n",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.6"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black >=19.3b0",
    "flake8 >=3",
    "python >=3.6"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.1.0.tar.gz",
 "version": "0.2.1",
 "win_64_meta_yaml": {
  "about": {
   "description": "Black, \"The Uncompromising Code Formatter\", is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\nPEP 8 style guide. The point of this plugin is to be able to run\nblack --check ... from within the flake8 plugin ecosystem. You might use\nthis via a git pre-commit hook, or as part of your continuous integration\ntesting.\n",
   "dev_url": "https://github.com/peterjc/flake8-black",
   "home": "https://github.com/peterjc/flake8-black",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.rst",
   "summary": "Extension for flake8 for validating Python code style using black"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "-m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "peterjc"
   ]
  },
  "package": {
   "name": "flake8-black",
   "version": "0.2.1"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6",
    "flake8 >=3",
    "black >=19.3b0"
   ]
  },
  "source": {
   "sha256": "f26651bc10db786c03f4093414f7c9ea982ed8a244cec323c984feeffdf4c118",
   "url": "https://pypi.io/packages/source/f/flake8-black/flake8-black-0.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "flake8 --version | grep black:"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "black",
    "flake8",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}