{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.610"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/201401505.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.620"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/215997041.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.630"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/222968384.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.641"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/227066691.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/236981519.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.650"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/245335687.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.660"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.670"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/267983546.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.700"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/271079332.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.701"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/289914865.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.710"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/291211572.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.711"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/297228119.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.720"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/321802847.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.730"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/329022745.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/347143487.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.750"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/356496448.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.761"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/386449449.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.770"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/427140296.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.780"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/437204124.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.781"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/438559029.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.782"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500756750.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.790"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/559947245.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.800"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/576642340.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.812"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/607671963.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/607695642.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/607745783.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/665364529.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.900"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/665470574.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.901"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/667014963.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.902"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/675717846.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.910"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/676414242.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/771421481.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/804052488.json"
   },
   "data": {
    "bot_rerun": 1639766166.4719403,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.920"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/807844519.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.921"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/808630733.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/816620211.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.931"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/877719934.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.940"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/879706179.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.941"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/888821611.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.942"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/903466248.json"
   },
   "data": {
    "bot_rerun": 1655749723.6648986,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/921041385.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.950"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/947081053.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.960"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/959552591.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.961"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/974153504.json"
   },
   "data": {
    "bot_rerun": 1667932581.7680023,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1001234684.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.971"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1069040697.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.981"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1075225998.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.982"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1101009639.json"
   },
   "data": {
    "bot_rerun": 1667932581.7683015,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1113262452.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.990"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1114920273.json"
   },
   "data": {
    "bot_rerun": 1667950721.5346975,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1114936303.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1115225609.json"
   },
   "data": {
    "bot_rerun": 1668117399.6106768,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1118391584.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1122149090.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.991"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "mypy",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "ls $SP_DIR/mypy/*.so"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "name": "mypy-split",
 "new_version": "0.991",
 "new_version_attempts": {
  "0.780": 1,
  "0.781": 1,
  "0.782": 1,
  "0.790": 1,
  "0.800": 1,
  "0.812": 1,
  "0.900": 1,
  "0.901": 1,
  "0.902": 1,
  "0.910": 1,
  "0.920": 1,
  "0.921": 1,
  "0.930": 1,
  "0.931": 1,
  "0.940": 1,
  "0.941": 2,
  "0.942": 1,
  "0.950": 1,
  "0.960": 1,
  "0.961": 1,
  "0.971": 1,
  "0.981": 1,
  "0.982": 2,
  "0.990": 1,
  "0.991": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "export MYPY_USE_MYPYC=1",
      "export SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "mypy",
   "mypyc"
  ]
 },
 "pinning_version": "2022.11.14.21.30.17",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set version = \"0.990\" %}\n\npackage:\n  name: mypy-split\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/m/mypy/mypy-{{ version }}.tar.gz\n  sha256: 72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d\n\nbuild:\n  number: 2\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - {{ compiler('c') }}\n  host:\n    - python\n\noutputs:\n  - name: mypy\n    build:\n      script:\n        - export MYPY_USE_MYPYC=1  # [not win]\n        - export SETUPTOOLS_USE_DISTUTILS=stdlib  # [not win]\n        - set MYPY_USE_MYPYC=1     # [win]\n        - set SETUPTOOLS_USE_DISTUTILS=stdlib  # [win]\n        # mypy searches for <>-stubs in site.getsitepackages()\n        # which points to $SP_DIR, even in cross-python\n        - cp -rv $BUILD_PREFIX/lib/python$PY_VER/site-packages/*-stubs $SP_DIR  # [build_platform != target_platform]\n        - cp -rv $BUILD_PREFIX/lib/python$PY_VER/site-packages/tomli* $SP_DIR  # [build_platform != target_platform]\n        - {{ PYTHON }} -m pip install . --no-deps -vv\n      entry_points:\n        - mypy = mypy.__main__:console_entry\n        - stubgen = mypy.stubgen:main\n        - dmypy = mypy.dmypy.client:console_entry\n        - stubtest = mypy.stubtest:main\n        # CLI provided here, but doesn't depend on a compiler\n        - mypyc = mypyc.__main__:main\n\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ compiler('c') }}\n        # mypy's build imports this module, which has a C extension,\n        # so it has to be native to the build platform\n        - typed-ast >=1.4.0,<2                   # [build_platform != target_platform and py<38]\n        - tomli >=1.1.0\n      host:\n        - python\n        - pip\n        - mypy_extensions >=0.4.3\n        - typed-ast >=1.4.0,<2  # [py<38]\n        - typing_extensions >=3.10\n        - types-setuptools\n        - types-psutil\n        - types-typed-ast >=1.5.8,<1.6.0\n        - tomli >=1.1.0\n      run:\n        - python\n        - mypy_extensions >=0.4.3\n        - typed-ast >=1.4.0,<2  # [py<38]\n        - typing_extensions >=3.10\n        - tomli >=1.1.0\n        # extra: dmypy\n        - psutil >=4.0\n\n    test:\n      requires:\n        - pip\n      imports:\n        - mypy\n        - mypy.dmypy\n        - mypy.plugins\n        - mypy.server\n        - mypyc\n      commands:\n        - pip check\n        - dmypy --help\n        - mypy --help\n        - mypyc --help\n        - stubgen --help\n        - stubtest --help\n        - dir %SP_DIR%\\mypy\\*.pyd /s /b  # [win]\n        - ls $SP_DIR/mypy/*.so  # [linux and not (aarch64 and py==310)]\n\n  - name: mypyc\n    requirements:\n      host:\n        - python\n      run:\n        - {{ pin_subpackage(\"mypy\", exact=True) }}\n        - c-compiler\n        - python\n    test:\n      files:\n        - test_mypyc.py\n      requires:\n        - pip\n      commands:\n        - pip check\n        - mypyc --help\n        - python test_mypyc.py\n    about:\n      home: https://mypyc.readthedocs.io\n      license: MIT\n      license_family: MIT\n      license_file: LICENSE\n      dev_url: https://github.com/python/mypy/blob/master/mypyc\n      summary: Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code.\n      description: |\n        The compiled language is a strict, gradually typed Python variant. It\n        restricts the use of some dynamic Python features to gain performance,\n        but it's mostly compatible with standard Python.\n\n        Mypyc uses mypy to perform type checking and type inference. Most type\n        system features in the stdlib typing module are supported.\n\n        Compiled modules can import arbitrary Python modules and third-party\n        libraries. You can compile anything from a single performance-critical\n        module to your entire codebase. You can run the modules you compile also\n        as normal, interpreted Python modules.\n\n        Existing code with type annotations is often 1.5x to 5x faster when\n        compiled. Code tuned for mypyc can be 5x to 10x faster.\n\n        Mypyc currently aims to speed up non-numeric code, such as server\n        applications. Mypyc is also used to compile itself (and mypy).\n\nabout:\n  home: http://mypy-lang.org\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Optional static typing for Python\n  description: |\n    Add type annotations to your Python programs, and use mypy to type check\n    them. Mypy is essentially a Python linter on steroids, and it can catch\n    many programming errors by analyzing your program, without actually having\n    to run it.  Mypy has a powerful type system with features such as type\n    inference, gradual typing, generics and union types.\n  doc_url: http://mypy.readthedocs.io\n  dev_url: https://github.com/python/mypy\n\nextra:\n  feedstock-name: mypy\n  recipe-maintainers:\n    - nehaljwani\n    - ocefpaf\n    - matthiasdiener\n    - bollwyvl\n",
 "req": {
  "__set__": true,
  "elements": [
   "c-compiler",
   "c_compiler_stub",
   "mypy",
   "mypy_extensions",
   "pip",
   "psutil",
   "python",
   "tomli",
   "types-psutil",
   "types-setuptools",
   "types-typed-ast",
   "typing_extensions"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "c_compiler_stub",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.21.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli >=1.1.0"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions >=0.4.3",
    "pip",
    "python",
    "tomli >=1.1.0",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast >=1.5.8,<1.6.0",
    "typing_extensions >=3.10"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions >=0.4.3",
    "psutil >=4.0",
    "python",
    "tomli >=1.1.0",
    "typing_extensions >=3.10"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz",
 "version": "0.990",
 "win_64_meta_yaml": {
  "about": {
   "description": "Add type annotations to your Python programs, and use mypy to type check\nthem. Mypy is essentially a Python linter on steroids, and it can catch\nmany programming errors by analyzing your program, without actually having\nto run it.  Mypy has a powerful type system with features such as type\ninference, gradual typing, generics and union types.\n",
   "dev_url": "https://github.com/python/mypy",
   "doc_url": "http://mypy.readthedocs.io",
   "home": "http://mypy-lang.org",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Optional static typing for Python"
  },
  "build": {
   "number": "2"
  },
  "extra": {
   "feedstock-name": "mypy",
   "recipe-maintainers": [
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl",
    "nehaljwani",
    "ocefpaf",
    "matthiasdiener",
    "bollwyvl"
   ]
  },
  "outputs": [
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "build": {
     "entry_points": [
      "mypy = mypy.__main__:console_entry",
      "stubgen = mypy.stubgen:main",
      "dmypy = mypy.dmypy.client:console_entry",
      "stubtest = mypy.stubtest:main",
      "mypyc = mypyc.__main__:main"
     ],
     "script": [
      "set MYPY_USE_MYPYC=1",
      "set SETUPTOOLS_USE_DISTUTILS=stdlib",
      "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . --no-deps -vv"
     ]
    },
    "name": "mypy",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "tomli >=1.1.0"
     ],
     "host": [
      "python",
      "pip",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "types-setuptools",
      "types-psutil",
      "types-typed-ast >=1.5.8,<1.6.0",
      "tomli >=1.1.0"
     ],
     "run": [
      "python",
      "mypy_extensions >=0.4.3",
      "typing_extensions >=3.10",
      "tomli >=1.1.0",
      "psutil >=4.0"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "dmypy --help",
      "mypy --help",
      "mypyc --help",
      "stubgen --help",
      "stubtest --help",
      "dir %SP_DIR%\\mypy\\*.pyd /s /b"
     ],
     "imports": [
      "mypy",
      "mypy.dmypy",
      "mypy.plugins",
      "mypy.server",
      "mypyc"
     ],
     "requires": [
      "pip"
     ]
    }
   },
   {
    "about": {
     "description": "The compiled language is a strict, gradually typed Python variant. It\nrestricts the use of some dynamic Python features to gain performance,\nbut it's mostly compatible with standard Python.\n\nMypyc uses mypy to perform type checking and type inference. Most type\nsystem features in the stdlib typing module are supported.\n\nCompiled modules can import arbitrary Python modules and third-party\nlibraries. You can compile anything from a single performance-critical\nmodule to your entire codebase. You can run the modules you compile also\nas normal, interpreted Python modules.\n\nExisting code with type annotations is often 1.5x to 5x faster when\ncompiled. Code tuned for mypyc can be 5x to 10x faster.\n\nMypyc currently aims to speed up non-numeric code, such as server\napplications. Mypyc is also used to compile itself (and mypy).\n",
     "dev_url": "https://github.com/python/mypy/blob/master/mypyc",
     "home": "https://mypyc.readthedocs.io",
     "license": "MIT",
     "license_family": "MIT",
     "license_file": "LICENSE",
     "summary": "Mypyc compiles Python modules to C extensions. It uses standard Python type hints to generate fast code."
    },
    "name": "mypyc",
    "requirements": {
     "host": [
      "python"
     ],
     "run": [
      "mypy",
      "c-compiler",
      "python"
     ]
    },
    "test": {
     "commands": [
      "pip check",
      "mypyc --help",
      "python test_mypyc.py"
     ],
     "files": [
      "test_mypyc.py"
     ],
     "requires": [
      "pip"
     ]
    }
   }
  ],
  "package": {
   "name": "mypy-split",
   "version": "0.990"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "python",
    "python",
    "python"
   ]
  },
  "source": {
   "sha256": "72382cb609142dba3f04140d016c94b4092bc7b4d98ca718740dc989e5271b8d",
   "url": "https://pypi.io/packages/source/m/mypy/mypy-0.990.tar.gz"
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "tomli"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mypy_extensions",
    "pip",
    "python",
    "tomli",
    "types-psutil",
    "types-setuptools",
    "types-typed-ast",
    "typing_extensions"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c-compiler",
    "mypy",
    "mypy_extensions",
    "psutil",
    "python",
    "tomli",
    "typing_extensions"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}