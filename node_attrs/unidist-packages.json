{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "unidist-packages",
 "hash_type": "sha256",
 "name": "unidist-packages",
 "new_version": "0.1.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "unidist",
   "unidist-all",
   "unidist-dask",
   "unidist-mpi",
   "unidist-ray"
  ]
 },
 "raw_meta_yaml": "{% set name = \"unidist\" %}\n{% set version = \"0.1.0\" %}\n\npackage:\n  name: {{ name }}-packages\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 5b2cc602604f75ed6a9323cd4cd0585a1c806d3465f50ecb7ff31772b80f2edb\n\nbuild:\n  noarch: python\n  number: 0\n\n# the outputs map the unidist options on PyPI (see upstream definition\n# https://github.com/modin-project/unidist/blob/0.1.0/setup.py#L39-L55)\n# from \"unidist[<option>]\" to \"unidist-<option>\" as a conda-forge package\noutputs:\n  - name: unidist-all\n    build:\n      noarch: python\n    requirements:\n      host:\n        - python >=3.7.1\n      run:\n        - python >=3.7.1\n        - {{ pin_subpackage('unidist', exact=True) }}\n        - {{ pin_subpackage('unidist-dask', exact=True) }}\n        - {{ pin_subpackage('unidist-ray', exact=True) }}\n        - {{ pin_subpackage('unidist-mpi', exact=True) }}\n    test:\n      imports:\n        # dummy test; actual tests are in subpackages\n        - unidist\n\n  - name: unidist\n    build:\n      noarch: python\n      script: python -m pip install . --ignore-installed -vv\n      entry_points:\n        - unidist = unidist.cli.__main__:main\n    requirements:\n      host:\n        - pip\n        - python >=3.7.1\n      run:\n        - python >=3.7.1\n        - packaging\n        - cloudpickle\n    test:\n      imports:\n        - unidist\n      commands:\n        # unidist has multiprocessing and python backends by default so we test both\n        - python -c \"import unidist; import unidist.config as cfg; cfg.Backend.put('python'); unidist.init(); ref = unidist.put(1); unidist.get(ref)\"\n        - python -c \"import unidist; import unidist.config as cfg; cfg.Backend.put('multiprocessing'); unidist.init(); ref = unidist.put(1); unidist.get(ref)\"\n        - unidist --help\n\n  - name: unidist-dask\n    build:\n      noarch: python\n    requirements:\n      host:\n        - python >=3.7.1\n      run:\n        - python >=3.7.1\n        - {{ pin_subpackage('unidist', exact=True) }}\n        - dask >=2.22.0\n        - distributed >=2.22.0\n    test:\n      imports:\n        - unidist\n      commands:\n        - python -c \"import unidist; import unidist.config as cfg; cfg.Backend.put('dask'); unidist.init(); ref = unidist.put(1); unidist.get(ref)\"\n\n  - name: unidist-ray\n    build:\n      noarch: python\n    requirements:\n      host:\n        - python >=3.7.1\n      run:\n        - python >=3.7.1\n        - {{ pin_subpackage('unidist', exact=True) }}\n        - ray-default >=1.4.0\n        # aioredis 2.x breaks Ray\n        # ref: https://github.com/conda-forge/ray-packages-feedstock/issues/38\n        - aioredis <2\n    test:\n      imports:\n        - unidist\n      commands:\n        - python -c \"import unidist; import unidist.config as cfg; cfg.Backend.put('ray'); unidist.init(); ref = unidist.put(1); unidist.get(ref)\"\n\n  - name: unidist-mpi\n    build:\n      noarch: python\n    requirements:\n      host:\n        - python >=3.7.1\n      run:\n        - python >=3.7.1\n        - {{ pin_subpackage('unidist', exact=True) }}\n        - mpi4py >=3.0.3\n        - msgpack-python\n    test:\n      # We do not run actual tests for mpi backend because\n      # those are currently failing on Windows.\n      # See more in https://github.com/modin-project/unidist/issues/69.\n      # We should run the tests after the issue is fixed.\n      imports:\n        - unidist\n\nabout:\n  home: https://github.com/modin-project/unidist\n  license: Apache-2.0 AND LicenseRef-Public-Domain\n  license_family: Apache\n  license_file:\n    - LICENSE\n    - licenses/versioneer-LICENSE.txt\n  summary: Unified Distributed Execution\n  description: |\n    unidist is a framework that is intended to provide the unified API\n    for distributed execution by supporting various performant execution backends.\n    At the moment the following backends are supported under the hood:\n    Ray, MPI, Dask, Python Multiprocessing, as well as a sequential Python backend for debugging.\n  doc_url: https://unidist.readthedocs.io/\n  dev_url: https://github.com/modin-project/unidist\n\nextra:\n  recipe-maintainers:\n    - YarShev\n",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/u/unidist/unidist-0.1.0.tar.gz",
 "version": "0.1.0"
}