{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/801285129.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/810933383.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "sqlmodel",
 "hash_type": "sha256",
 "name": "sqlmodel",
 "new_version": "0.0.6",
 "new_version_attempts": {
  "0.0.5": 1,
  "0.0.6": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "sqlmodel"
  ]
 },
 "pinning_version": "2021.12.28.08.47.33",
 "raw_meta_yaml": "{% set name = \"sqlmodel\" %}\n{% set version = \"0.0.6\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/sqlmodel-{{ version }}.tar.gz\n  sha256: 3b4f966b9671b24d85529d274e6c4dbc7753b468e35d2d6a40bd75cad1f66813\n\nbuild:\n  number: 0\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - poetry\n    - python >=3.6\n  run:\n    - pydantic >=1.8.2\n    - python >=3.6\n    - sqlalchemy >=1.4.17\n    - sqlalchemy2-stubs\n\ntest:\n  imports:\n    - sqlmodel\n    - sqlmodel.engine\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/tiangolo/sqlmodel\n  summary: SQL databases in Python, designed for simplicity, compatibility, and robustness.\n  doc_url: https://sqlmodel.tiangolo.com/\n  license: MIT\n  license_file: LICENSE\n  description: |\n    SQLModel is designed to simplify interacting with SQL databases in FastAPI\n     applications, it was created by the same author. It combines SQLAlchemy\n     and Pydantic and tries to simplify the code you write as much as possible,\n     allowing you to reduce the code duplication to a minimum, but while getting\n     the best developer experience possible. SQLModel is, in fact, a thin layer\n     on top of Pydantic and SQLAlchemy, carefully designed to be compatible with\n     both.\n\nextra:\n  recipe-maintainers:\n    - thewchan\n",
 "smithy_version": "3.16.1",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/s/sqlmodel/sqlmodel-0.0.6.tar.gz",
 "version": "0.0.6"
}