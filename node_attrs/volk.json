{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/338752619.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375881247.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/377681501.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/0189fb39-26f6-485e-a60a-566cf526627c.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/389679444.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/485486150.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500919574.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/525318623.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/541986685.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.4.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/551898593.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/627108777.json"
   },
   "data": {
    "bot_rerun": 1619818434.524286,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/627205148.json"
   },
   "data": {
    "bot_rerun": 1619818434.5244904,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/628211941.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/628212519.json"
   },
   "data": {
    "bot_rerun": 1620248017.8588364,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/630901679.json"
   },
   "data": {
    "bot_rerun": 1620272430.916357,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/631574814.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/662450137.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.5.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/848973576.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.5.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1045783236.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.5.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "volk",
 "hash_type": "sha256",
 "name": "volk-split",
 "new_version": "2.5.2",
 "new_version_attempts": {
  "2.3.0": 96,
  "2.4.0": 1,
  "2.4.1": 1,
  "2.5.0": 1,
  "2.5.1": 1,
  "2.5.2": 1
 },
 "new_version_errors": {
  "2.3.0": "We found a problem parsing the recipe: \n\nwhile parsing a block mapping\n  in \"<unicode string>\", line 35, column 3:\n      commands:\n      ^ (line: 35)\nexpected <block end>, but found ','\n  in \"<unicode string>\", line 38, column 27:\n            \"volk-config-info\",\n                              ^ (line: 38)"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "volk",
   "volk-dev",
   "volk-modtool"
  ]
 },
 "pinning_version": "2022.09.04.15.41.14",
 "raw_meta_yaml": "{% set version = \"2.5.2\" %}\n{% set build_number = 1 %}\n\npackage:\n  name: volk-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/gnuradio/volk/releases/download/v{{ version }}/volk-{{ version }}.tar.gz\n  sha256: ead6d39d390a03cec0d65d474b5222654103b304f7f00c730d69ea54a2ca7006\n  patches:\n    - 0001-Add-main-to-volk_modtool-script-usable-as-an-entry-p.patch\n    - 0001-Add-support-for-Apple-M1-AArch64-SoCs.patch\n\nbuild:\n  number: {{ build_number }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake >=3.8\n    - gstreamer-orc  # [not win]\n    - mako >=0.4.2\n    - ninja\n    - pkg-config\n    # set constraint to avoid a matrix for different python versions\n    - python >=3.6\n  host:\n    - gstreamer-orc  # [not win]\n\noutputs:\n  - name: volk\n    script: install_volk.bat  # [win]\n    script: install_volk.sh  # [not win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('volk', max_pin='x.x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n      host:\n        - gstreamer-orc  # [not win]\n      run:\n        - {{ pin_compatible('gstreamer-orc', max_pin='x.x') }}  # [not win]\n    test:\n      commands:\n        # verify CLI tools\n        {% set volk_cmds = [\"volk-config-info\", \"volk_profile\"] %}\n        {% for cmd in volk_cmds %}\n        - command -v {{ cmd }}  # [unix]\n        - where {{ cmd }}  # [win]\n        {% endfor %}\n\n        # verify libraries\n        - test -f $PREFIX/lib/libvolk${SHLIB_EXT}  # [unix]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\volk.dll exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\volk.lib exit 1  # [win]\n\n        # run selection of commands\n        - list_cpu_features_volk\n        - volk-config-info --version --prefix --cc --cflags --all-machines --avail-machines --machine --alignment --malloc\n\n  - name: volk-modtool\n    script: install_volk_modtool.bat  # [win]\n    script: install_volk_modtool.sh  # [not win]\n    build:\n      string: py_{{ build_number }}\n      noarch: python\n      entry_points:\n        - volk_modtool = volk_modtool.__main__:main\n    requirements:\n      build:\n        - cmake\n      run:\n        - python\n    test:\n      commands:\n        - volk_modtool\n      imports:\n        - volk_modtool\n\n  - name: volk-dev\n    build:\n      run_exports:\n        - {{ pin_subpackage('volk', max_pin='x.x') }}\n    requirements:\n      run:\n        - {{ pin_subpackage('volk', exact=True) }}\n        - {{ pin_subpackage('volk-modtool', exact=True) }}\n    test:\n      commands:\n        - volk-config-info --version --prefix --cc --cflags --all-machines --avail-machines --machine --alignment --malloc\n        - volk_modtool\n      imports:\n        - volk_modtool\n\nabout:\n  home: https://github.com/gnuradio/volk\n  license: GPL-3.0-or-later AND Apache-2.0\n  license_file:\n    - COPYING\n    - LICENSE_CPU_FEATURES\n  summary: The Vector Optimized Library of Kernels\n  description: |\n    VOLK is the Vector-Optimized Library of Kernels. It is a free library,\n    currently offered under the GPLv3, that contains kernels of hand-written\n    SIMD code for different mathematical operations. Since each SIMD\n    architecture can be very different and no compiler has yet come along to\n    handle vectorization properly or highly efficiently, VOLK approaches the\n    problem differently.\n\n    For each architecture or platform that a developer wishes to vectorize for,\n    a new proto-kernel is added to VOLK. At runtime, VOLK will select the\n    correct proto-kernel. In this way, the users of VOLK call a kernel for\n    performing the operation that is platform/architecture agnostic. This\n    allows us to write portable SIMD code that is optimized for a variety of\n    platforms.\n\n  doc_url: http://libvolk.org/doxygen/index.html\n  dev_url: https://github.com/gnuradio/volk\n\nextra:\n  feedstock-name: volk\n  recipe-maintainers:\n    - ryanvolz\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "https://github.com/gnuradio/volk/releases/download/v2.5.2/volk-2.5.2.tar.gz",
 "version": "2.5.2"
}