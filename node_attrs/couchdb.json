{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/962050675.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu70"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1013961745.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "openssl3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "couchdb",
 "hash_type": "sha256",
 "name": "couchdb",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "couchdb"
  ]
 },
 "pinning_version": "2022.08.01.12.11.42",
 "raw_meta_yaml": "{% set name = \"couchdb\" %}\n{% set version = \"3.2.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  - url: https://couchdb.neighbourhood.ie/downloads/{{ version }}/win/apache-couchdb-{{ version }}.msi  # [win]\n    sha256: f7d354d5ede02d2af748f8d3230bd46b9c3e70e7cd6430ddf2095916d260060e  # [win]\n  - url: https://archive.apache.org/dist/couchdb/source/{{ version }}/apache-couchdb-{{ version }}.tar.gz  # [unix]\n    sha256: 69c9fd6f80133557f68a02e92dda72a4fd646d646f429f45bb8329a30f82f20e  # [unix]\n\nbuild:\n  number: 3\n\nrequirements:\n  build:\n    - {{ compiler('c') }}  # [unix]\n    - {{ compiler('cxx') }}  # [unix]\n    - make  # [unix]\n  host:\n    - erlang 24.*  # [unix]\n    - openssl  # [unix]\n    - icu  # [unix]\n    - spidermonkey 91.*  # [unix]\n  run:\n    - openssl  # [unix]\n    - icu  # [unix]\n    - ncurses  # [unix]\n    - libzlib  # [unix]\n    - spidermonkey 91.*  # [unix]\n\ntest:\n  commands:\n    - couchjs -V\n\nabout:\n  home: https://couchdb.apache.org/\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE.txt\n  summary: |\n    Seamless multi-master sync, that\n    scales from Big Data to Mobile,\n    with an Intuitive HTTP/JSON API\n    and designed for Reliability.\n  description: |\n    Apache CouchDB\u2122 lets you access your data where you need it. The Couch Replication Protocol is implemented in a variety of projects and products that span every imaginable computing environment from globally distributed server-clusters, over mobile phones to web browsers.\n\n    Store your data safely, on your own servers, or with any leading cloud provider. Your web- and native applications love CouchDB, because it speaks JSON natively and supports binary data for all your data storage needs.\n\n    The Couch Replication Protocol lets your data flow seamlessly between server clusters to mobile phones and web browsers, enabling a compelling offline-first user-experience while maintaining high performance and strong reliability. CouchDB comes with a developer-friendly query language, and optionally MapReduce for simple, efficient, and comprehensive data retrieval. \n  doc_url: https://docs.couchdb.org/en/stable/\n  dev_url: https://github.com/apache/couchdb\n\nextra:\n  recipe-maintainers:\n    - pepijndevos\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://archive.apache.org/dist/couchdb/source/3.2.2/apache-couchdb-3.2.2.tar.gz",
 "version": "3.2.2"
}