{
 "PRed": [
  {
   "PR": {
    "id": "7cff1ef7-c09b-4342-9fff-82e38a84f643",
    "merged_at": "fix aarch missing prs",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "GFortranOSXRebuild",
    "migrator_version": 0,
    "name": "fortran_compiler_stub-7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/494537001.json"
   },
   "data": {
    "bot_rerun": 1602901640.8941147,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500053447.json"
   },
   "data": {
    "bot_rerun": 1602205666.6035836,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gcc930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500288554.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gcc930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/505177514.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/593312692.json"
   },
   "data": {
    "bot_rerun": 1620069783.6754756,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/629316100.json"
   },
   "data": {
    "bot_rerun": 1628618163.8948107,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.9.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/84a87161-d38e-4ab6-b227-f3b7889b76db.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "mkl2021"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/679443417.json"
   },
   "data": {
    "bot_rerun": 1628618163.8950298,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/707552514.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/827171702.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "mkl2022"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/908360361.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.10.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "blas",
 "hash_type": "sha256",
 "name": "blas-split",
 "new_version": "3.10.1",
 "new_version_attempts": {
  "3.10.0": 2,
  "3.10.1": 1,
  "3.9.1": 2
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "blas",
   "blas-devel",
   "libblas",
   "libcblas",
   "liblapack",
   "liblapacke"
  ]
 },
 "pinning_version": "2022.04.12.21.56.28",
 "raw_meta_yaml": "{% set version = \"3.9.0\" %}\n# if build_num is reset to 0 (for new version), update increment for blas_minor below\n{% set build_num = 16 %}\n{% set version_major = version.split(\".\")[0] %}\n# blas_major denotes major infrastructural change to how blas is managed\n{% set blas_major = \"2\" %}\n# make sure we do not create colliding version strings of output \"blas\"\n# for builds across lapack-versions within the same blas_major\n{% set blas_minor = build_num + 100 %}\n{% set build_string_platform = target_platform | default(\"linux-64\") %}\n{% set build_string_platform = build_string_platform.replace(\"-\", \"\") %}\n\npackage:\n  name: blas-split\n  version: \"{{ version }}\"\n\nsource:\n  - url: https://github.com/Reference-LAPACK/lapack/archive/v{{ version }}.tar.gz\n    sha256: 106087f1bb5f46afdfba7f569d0cbe23dacb9a07cd24733765a0e89dbe1ad573\n    patches:\n      # Test BLAS and LAPACKE in addition to LAPACK\n      - patches/0001-Test-BLAS-and-LAPACKE-in-addition-to-LAPACK.patch\n      # Only the test-suite is compiled here, and we therefore do not need to\n      # carry all the patches that the lapack-feedstock has (see comment below)\n\n  - url: https://github.com/isuruf/vecLibFort/archive/99af8640e98c829b41c3235e3706760cd5696fe4.tar.gz\n    sha256: 80de7c6e83d1d84d016b4cb299f2c15f5a82b9d36865dd5c16bf221fe9a303ad\n    folder: vecLibFort\n\nbuild:\n  number: \"{{ build_num }}\"\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}               # [unix]\n    - {{ compiler(\"fortran\") }}         # [unix]\n    - {{ compiler(\"m2w64_c\") }}         # [win]\n    - {{ compiler(\"m2w64_fortran\") }}   # [win]\n    - cmake\n    - m2-make   # [win]\n    - make      # [not win]\n    - posix     # [win]\n    # The following are actual build dependencies of this recipe; however, they\n    # only get installed by the build scripts, since they must be installed in a\n    # different environment (otherwise there'd be a variant collision)! The build\n    # script will link to those netlib libraries and set up the netlib test suite.\n    # For the different blas variants, build_pkg.{sh|bat} will then point those\n    # links to the respective libraries of the desired variant, and *then* run\n    # the test suite (in test_blas.{sh|bat}) to see that everything works correctly.\n    # Note: These libraries are built in the lapack-feedstock.\n    # - libblas    {{ version }} *netlib\n    # - libcblas   {{ version }} *netlib\n    # - liblapack  {{ version }} *netlib\n    # - liblapacke {{ version }} *netlib\n\noutputs:\n  - name: libblas\n    script: build_pkg.sh     # [unix]\n    script: build_pkg.bat    # [win]\n    build:\n      string: \"{{ build_num }}_{{ build_string_platform }}_{{ blas_impl }}\"\n      run_exports:\n        - {{ pin_subpackage(\"libblas\", max_pin=\"x\") }}\n      track_features:\n       - blas_{{ blas_impl }}  # [blas_impl != blas_default_impl]\n    requirements:\n      build:\n        - {{ compiler('fortran') }}   # [blas_impl == 'accelerate']\n      host:\n        - libopenblas 0.3.21   # [blas_impl == 'openblas']\n        # from https://github.com/conda-forge/intel_repack-feedstock/\n        - mkl 2022.1           # [blas_impl == 'mkl']\n        - blis 0.9.0           # [blas_impl == 'blis']\n      run:\n        - {{ pin_compatible(\"libopenblas\", max_pin=\"x.x.x\", exact=win) }}  # [blas_impl == 'openblas']\n        - {{ pin_compatible(\"mkl\", max_pin=\"x\", exact=win) }}              # [blas_impl == 'mkl']\n        - {{ pin_compatible(\"blis\", max_pin=\"x.x.x\", exact=win) }}         # [blas_impl == 'blis']\n      run_constrained:\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}    # [blas_impl != 'blis']\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}   # [blas_impl != 'blis']\n        - blas * {{ blas_impl }}\n    files:\n      - lib/libblas.so                          # [linux]\n      - lib/libblas.dylib                       # [osx]\n      - lib/libblas.so.{{ version_major }}      # [linux]\n      - lib/libblas.{{ version_major }}.dylib   # [osx]\n      - Library/bin/libblas.dll                 # [win]\n      - lib/libvecLibFort-ng.dylib              # [blas_impl == 'accelerate']\n      - lib/liblapack-netlib.*.dylib            # [blas_impl == 'accelerate']\n      - lib/liblapacke-netlib.*.dylib           # [blas_impl == 'accelerate']\n    test:\n      commands:\n        # Following line is just to help conda-build's used variables detection\n        - echo hello  # [blas_impl_lib == 'blas']\n        - test -f $PREFIX/lib/libblas.so.{{ version_major }}      # [linux]\n        - test -f $PREFIX/lib/libblas.{{ version_major }}.dylib   # [osx]\n        - if not exist %LIBRARY_BIN%/libblas.dll exit 1           # [win]\n\n  - name: libcblas\n    script: build_pkg.sh     # [unix]\n    script: build_pkg.bat    # [win]\n    build:\n      string: \"{{ build_num }}_{{ build_string_platform }}_{{ blas_impl }}\"\n      run_exports:\n        - {{ pin_subpackage(\"libcblas\", max_pin=\"x\") }}\n      track_features:\n       - blas_{{ blas_impl }}     # [blas_impl != blas_default_impl]\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n      run_constrained:\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}    # [blas_impl != 'blis']\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}   # [blas_impl != 'blis']\n        - blas * {{ blas_impl }}\n    files:\n      - lib/libcblas.so                          # [linux]\n      - lib/libcblas.dylib                       # [osx]\n      - lib/libcblas.so.{{ version_major }}      # [linux]\n      - lib/libcblas.{{ version_major }}.dylib   # [osx]\n      - Library/bin/libcblas.dll                 # [win]\n    test:\n      commands:\n        - test -f $PREFIX/lib/libcblas.so.{{ version_major }}      # [linux]\n        - test -f $PREFIX/lib/libcblas.{{ version_major }}.dylib   # [osx]\n        - if not exist %LIBRARY_BIN%/libcblas.dll exit 1           # [win]\n\n  {% if blas_impl != 'blis' %}\n  - name: liblapack\n    script: build_pkg.sh     # [unix]\n    script: build_pkg.bat    # [win]\n    build:\n      string: \"{{ build_num }}_{{ build_string_platform }}_{{ blas_impl }}\"\n      run_exports:\n        - {{ pin_subpackage(\"liblapack\", max_pin=\"x.x\") }}\n      track_features:\n       - blas_{{ blas_impl }}     # [blas_impl != blas_default_impl]\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n      run_constrained:\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}\n        - blas * {{ blas_impl }}\n    files:\n      - lib/liblapack.so                          # [linux]\n      - lib/liblapack.dylib                       # [osx]\n      - lib/liblapack.so.{{ version_major }}      # [linux]\n      - lib/liblapack.{{ version_major }}.dylib   # [osx]\n      - Library/bin/liblapack.dll                 # [win]\n    test:\n      commands:\n        - test -f $PREFIX/lib/liblapack.so.{{ version_major }}      # [linux]\n        - test -f $PREFIX/lib/liblapack.{{ version_major }}.dylib   # [osx]\n        - if not exist %LIBRARY_BIN%/liblapack.dll exit 1           # [win]\n\n  - name: liblapacke\n    script: build_pkg.sh     # [unix]\n    script: build_pkg.bat    # [win]\n    build:\n      string: \"{{ build_num }}_{{ build_string_platform }}_{{ blas_impl }}\"\n      run_exports:\n        - {{ pin_subpackage(\"liblapacke\", max_pin=\"x.x\") }}\n      track_features:\n       - blas_{{ blas_impl }}     # [blas_impl != blas_default_impl]\n    requirements:\n      host:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}\n      run:\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}\n      run_constrained:\n        - blas * {{ blas_impl }}\n    files:\n      - lib/liblapacke.so                          # [linux]\n      - lib/liblapacke.dylib                       # [osx]\n      - lib/liblapacke.so.{{ version_major }}      # [linux]\n      - lib/liblapacke.{{ version_major }}.dylib   # [osx]\n      - Library/bin/liblapacke.dll                 # [win]\n    test:\n      commands:\n        - test -f $PREFIX/lib/liblapacke.so.{{ version_major }}      # [linux]\n        - test -f $PREFIX/lib/liblapacke.{{ version_major }}.dylib   # [osx]\n        - if not exist %LIBRARY_BIN%/liblapacke.dll exit 1           # [win]\n  {% endif %}\n\n  - name: blas-devel\n    # uses lapack {{ version }}, not {{ blas_major }}\n    script: install_blas_devel.sh   # [unix]\n    build:\n      string: \"{{ build_num }}_{{ build_string_platform }}_{{ blas_impl }}\"\n    requirements:\n      host:\n        - openblas   0.3.21  # [blas_impl == \"openblas\"]\n        - mkl-devel  2022.1  # [blas_impl == \"mkl\"]\n      run:\n        - openblas   0.3.21  # [blas_impl == \"openblas\"]\n        - mkl-devel  2022.1  # [blas_impl == \"mkl\"]\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}      # [blas_impl != 'blis']\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}     # [blas_impl != 'blis']\n        - liblapack  {{ version }} *netlib                   # [blas_impl == 'blis']\n        - liblapacke {{ version }} *netlib                   # [blas_impl == 'blis']\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n    test:\n      commands:\n        - test -f $PREFIX/lib/pkgconfig/blas.pc                     # [unix and blas_impl == \"openblas\"]\n        - test -f $PREFIX/lib/liblapack.so                          # [linux]\n        - test -f $PREFIX/lib/liblapack.dylib                       # [osx]\n        - if not exist %LIBRARY_BIN%/liblapack.dll exit 1           # [win]\n\n\n  # For compatiblity\n  - name: blas\n    version: \"{{ blas_major }}.{{ blas_minor }}\"\n    script: test_blas.sh   # [unix]\n    script: test_blas.bat  # [win]\n    build:\n      string: \"{{ blas_impl }}\"\n      activate_in_script: True\n    requirements:\n      build:\n        - {{ compiler('c') }}                 # [unix]\n        - {{ compiler('fortran') }}           # [unix]\n        - {{ compiler('m2w64_c') }}           # [win]\n        - {{ compiler('m2w64_fortran') }}     # [win]\n        - cmake\n        - m2-make       # [win]\n        - posix         # [win]\n        - llvm-openmp   # [linux and ((blas_impl == \"openblas\") or (blas_impl == \"mkl\"))]\n      host:\n      # Building with blis fails due to a conda-build bug\n      {% if blas_impl != 'blis' %}\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n      {% else %}\n        - blis 0.9.0\n      {% endif %}\n      run:\n        - {{ pin_subpackage(\"liblapack\", exact=True) }}      # [blas_impl != 'blis']\n        - {{ pin_subpackage(\"liblapacke\", exact=True) }}     # [blas_impl != 'blis']\n        - liblapack  {{ version }} *netlib                   # [blas_impl == 'blis']\n        - liblapacke {{ version }} *netlib                   # [blas_impl == 'blis']\n        - {{ pin_subpackage(\"libcblas\", exact=True) }}\n        - {{ pin_subpackage(\"libblas\", exact=True) }}\n        - {{ pin_subpackage(\"blas-devel\", exact=True) }}\n    test:\n      commands:\n        - test -f $PREFIX/lib/liblapacke.so                          # [linux]\n        - test -f $PREFIX/lib/liblapacke.so.{{ version_major }}      # [linux]\n        - test -f $PREFIX/lib/liblapacke.dylib                       # [osx]\n        - test -f $PREFIX/lib/liblapacke.{{ version_major }}.dylib   # [osx]\n        - if not exist %LIBRARY_BIN%/liblapacke.dll exit 1           # [win]\n\nabout:\n  home: https://github.com/conda-forge/blas-feedstock\n  license: BSD-3-Clause\n  license_file:\n    - LICENSE.txt\n    - {{ blas_impl }}_license.txt  # [win]\n  summary: Metapackage to select the BLAS variant. Use conda's pinning mechanism in your environment to control which variant you want.\n\nextra:\n  recipe-maintainers:\n    - jakirkham\n    - pelson\n    - isuruf\n    - ocefpaf\n    - h-vetinari\n  feedstock-name: blas\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/Reference-LAPACK/lapack/archive/v3.9.0.tar.gz",
 "version": "3.9.0"
}