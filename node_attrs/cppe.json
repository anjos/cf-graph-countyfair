{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/559310522.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560336321.json"
   },
   "data": {
    "bot_rerun": 1611424602.0698438,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560405167.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560474452.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/683117960.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37-windows"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/775797398.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/911347634.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "cppe",
 "hash_type": "sha256",
 "name": "cppe",
 "new_version": "0.3.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cppe"
  ]
 },
 "pinning_version": "2022.04.16.05.14.45",
 "raw_meta_yaml": "{% set name = \"cppe\" %}\n{% set version = \"0.3.1\" %}\n{% set sha256 = \"38d4230ba3ace78936049c23ad4b1fe9e704fd250ec57cc9733cb3904b62cf7c\" %}\n{% set build = 7 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/maxscheurer/cppe/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: {{ build }}\n  skip: true  # [win]\n  binary_relocation: true\n  run_exports:\n    - {{ pin_subpackage('cppe', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - cmake >=3.5\n    - {{ compiler('cxx') }}\n    - ninja\n    - llvm-openmp  # [osx]\n    - libgomp      # [linux]\n  host:\n    - pybind11 >=2.6\n    - pybind11-abi\n    - python\n  run:\n    - python\n\ntest:\n  requires:\n    - numpy\n  commands:\n    # Verify C++ library\n    - test -f $PREFIX/lib/libcppe$SHLIB_EXT                 # [not win]\n    - if not exist %PREFIX%\\\\Library\\\\bin\\\\cppe.dll exit 1  # [win]\n    - if not exist %PREFIX%\\\\Library\\\\lib\\\\cppe.lib exit 1  # [win]\n    # Inspect linkage\n    - ldd -v $PREFIX/lib/libcppe$SHLIB_EXT        # [linux]\n    - otool -L $PREFIX/lib/libcppe$SHLIB_EXT      # [osx]\n    # Verify Python extension library\n    - export PYLIB_EXT=`$PYTHON -c 'from numpy import distutils; print(distutils.misc_util.get_shared_lib_extension(is_python_ext=True))'`\n    - test -f $SP_DIR/cppe$PYLIB_EXT                                      # [not win]\n    - if not exist %PREFIX%\\\\Lib\\\\site-packages\\\\cppe%PYLIB_EXT% exit 1  # [win]\n    # Inspect linkage\n    - ldd -v $SP_DIR/cppe$PYLIB_EXT  # [linux]\n    - otool -L $SP_DIR/cppe$PYLIB_EXT  # [osx]\n  imports:\n    - cppe\n\noutputs:\n  - name: cppe\n    files:\n      # header files\n      - include/cppe              # [not win]\n      - Library\\include\\cppe      # [win]\n      # C++ library\n      - lib/libcppe*              # [not win]\n      - Library\\bin\\cppe*         # [win]\n      - Library\\lib\\cppe*         # [win]\n      # CMake files\n      - share/cmake/cppe\n      # Python extension\n      - {{ SP_DIR }}/cppe*       # [not win]\n      - Lib\\site-packages\\cppe*  # [win]\n\nabout:\n  home: https://github.com/maxscheurer/cppe\n  dev_url: https://github.com/maxscheurer/cppe\n  doc_url: https://cppe.readthedocs.io\n  doc_source_url: https://github.com/maxscheurer/cppe/blob/master/doc/source/index.rst\n  license: LGPL-3.0-or-later\n  license_file: LICENSE\n  license_url: https://opensource.org/licenses/LGPL-3.0\n  license_family: LGPL\n  summary: \"C++ and Python library for Polarizable Embedding calculations\"\n\nextra:\n  recipe-maintainers:\n    - robertodr\n    - maxscheurer\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/maxscheurer/cppe/archive/v0.3.1.tar.gz",
 "version": "0.3.1"
}