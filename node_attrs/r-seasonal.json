{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/5f96618b-d90d-4c66-b433-a7a7270fc49a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "r400"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/585951340.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/592625173.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.8.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/603065564.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.8.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/651757255.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "r410"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/670304470.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.8.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/736913273.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.8.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/911884634.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.9.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-seasonal",
 "hash_type": "sha256",
 "name": "r-seasonal",
 "new_version": "1.9.0",
 "new_version_attempts": {
  "1.8.0": 1,
  "1.8.1": 1,
  "1.8.2": 1,
  "1.8.3": 1,
  "1.8.4": 1,
  "1.9.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-seasonal"
  ]
 },
 "pinning_version": "2022.04.17.23.07.46",
 "raw_meta_yaml": "{% set version = \"1.9.0\" %}\n\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-seasonal\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/seasonal_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/seasonal/seasonal_{{ version }}.tar.gz\n  sha256: 40dc25ea890ad6abcabccf12019e1bcffefd925265c2cc14b49a767a7ac4f54e\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip  # [win]\n\n  host:\n    - r-base\n    - r-x13binary\n\n  run:\n    - r-base\n    - r-x13binary\n\ntest:\n  commands:\n    - $R -e \"library('seasonal')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('seasonal')\\\"\"  # [win]\n\nabout:\n  home: http://www.seasonal.website\n  license: GPL-2.0-or-later\n  summary: Easy-to-use interface to X-13-ARIMA-SEATS, the seasonal adjustment software by the US Census Bureau. It offers full access to almost all options and outputs of X-13, including X-11 and SEATS, automatic ARIMA model search, outlier detection and support for user defined holiday variables, such as Chinese New Year\n    or Indian Diwali. A graphical user interface can be used through the 'seasonalview' package. Uses the X-13-binaries from the 'x13binary' package.\n  license_family: GPL3\n  license_file: {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-3\n\nextra:\n  recipe-maintainers:\n    - mxr-conda\n    - rluria14\n    - ndmaxar\n    - RyanHackney\n    - conda-forge/r\n    - oblute\n\n# The original CRAN metadata for this package was:\n\n# Package: seasonal\n# Type: Package\n# Title: R Interface to X-13-ARIMA-SEATS\n# Version: 1.7.1\n# Date: 2020-06-06\n# Authors@R: c( person(\"Christoph\", \"Sax\", email = \"christoph.sax@gmail.com\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0002-7192-7044\")), person(\"Dirk\", \"Eddelbuettel\", role = c(\"ctb\"), comment = c(ORCID = \"0000-0001-6419-907X\")) )\n# Description: Easy-to-use interface to X-13-ARIMA-SEATS, the seasonal adjustment software by the US Census Bureau. It offers full access to almost all options and outputs of X-13, including X-11 and SEATS, automatic ARIMA model search, outlier detection and support for user defined holiday variables, such as Chinese New Year or Indian Diwali. A graphical user interface can be used through the 'seasonalview' package. Uses the X-13-binaries from the 'x13binary' package.\n# Depends: R (>= 2.15)\n# Imports: x13binary\n# Suggests: seasonalview (>= 0.1.3)\n# License: GPL-3\n# URL: http://www.seasonal.website\n# BugReports: https://github.com/christophsax/seasonal\n# LazyData: true\n# RoxygenNote: 7.1.0\n# Encoding: UTF-8\n# NeedsCompilation: no\n# Packaged: 2020-06-06 09:30:43 UTC; christoph\n# Author: Christoph Sax [aut, cre] (<https://orcid.org/0000-0002-7192-7044>), Dirk Eddelbuettel [ctb] (<https://orcid.org/0000-0001-6419-907X>)\n# Maintainer: Christoph Sax <christoph.sax@gmail.com>\n# Repository: CRAN\n# Date/Publication: 2020-06-06 10:10:02 UTC\n\n# See\n# https://docs.conda.io/projects/conda-build for\n# more information about meta.yaml\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/seasonal_1.9.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/seasonal/seasonal_1.9.0.tar.gz",
  "https://cran.r-project.org/src/contrib/seasonal_1.9.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/seasonal/seasonal_1.9.0.tar.gz"
 ],
 "version": "1.9.0"
}