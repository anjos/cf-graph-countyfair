{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/d3078257-598e-4663-bfdf-91fd20dcfc10.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf480"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/662650570.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/724521403.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf481"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/724717068.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/738539488.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/934824813.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1007699949.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "5.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "yambo",
 "hash_type": "sha256",
 "name": "yambo",
 "new_version": "5.1.1",
 "new_version_attempts": {
  "5.0.3": 1,
  "5.0.4": 1,
  "5.1.0": 1,
  "5.1.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "yambo"
  ]
 },
 "pinning_version": "2022.07.25.18.25.33",
 "pre_pr_migrator_attempts": {
  "hdf51122": 114,
  "netcdf_fortran46": 100
 },
 "pre_pr_migrator_status": {
  "hdf51122": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/2841054766\">bot CI job</a>): main: ['linux_64_: Encountered problems while solving:\\n  - nothing provides requested netcdf-fortran mpi_openmpi_.*\\n']",
  "netcdf_fortran46": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/2841054766\">bot CI job</a>): main: ['linux_64_: Encountered problems while solving:\\n  - nothing provides requested netcdf-fortran mpi_openmpi_.*\\n']"
 },
 "raw_meta_yaml": "{% set name = \"yambo\" %}\n{% set version = \"5.1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/yambo-code/yambo/archive/refs/tags/{{ version }}.tar.gz\n  sha256: c85036ca60507e627c47b6c6aee8241830349e88110e1ce9132ef03ab2c4e9f6\n\nbuild:\n  number: 0\n  skip: true  # [not linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('fortran') }}\n    - make\n    - m4\n    - libgomp  # [linux]\n    - llvm-openmp  # [osx]\n    - wget\n  host:\n    - openmpi\n    - fftw\n    - libblas\n    - liblapack\n    - hdf5 * *openmpi*\n    - libnetcdf * *openmpi*\n    - netcdf-fortran * *openmpi*\n    # re-enable after complex variants of libraries are available\n    # https://github.com/conda-forge/petsc-feedstock/issues/17\n    # - slepc\n    # - petsc\n  run:\n    - openmpi\n    - fftw\n    - zlib\n    - libcurl\n\ntest:\n  commands:\n    - yambo --help\n\nabout:\n  home: http://www.yambo-code.org/\n  license: GPL-2.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: Open-source many-body perturbation theory and time-dependent density functional theory\n  description: |\n    YAMBO implements Many-Body Perturbation Theory (MBPT) methods (such as GW and BSE) and Time-Dependent Density Functional Theory (TDDFT), which allows for accurate prediction of fundamental properties as band gaps of semiconductors, band alignments, defect quasi-particle energies, optics and out-of-equilibrium properties of materials.\n    The code resorts to previously computed electronic structure, usually at the Density Functional Theory (DFT) level and for this reason it is interfaced with two of the most used planewave DFT codes used in scientific community, Quantum ESPRESSO and Abinit.\n  doc_url: http://www.yambo-code.org/\n  dev_url: http://www.yambo-code.org/\n\nextra:\n  recipe-maintainers:\n    - ltalirz\n    - nicspalla\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/yambo-code/yambo/archive/refs/tags/5.1.1.tar.gz",
 "version": "5.1.1"
}