{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/529756197.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/529756338.json"
   },
   "data": {
    "bot_rerun": 1606768283.370902,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/529804603.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "libopus",
 "hash_type": "sha256",
 "name": "libopus",
 "new_version": "1.3.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libopus"
  ]
 },
 "pinning_version": "2020.11.30.18.15.16",
 "raw_meta_yaml": "{% set version = \"1.3.1\" %}\n\npackage:\n  name: libopus\n  version: {{ version }}\n\nsource:\n  url: https://github.com/xiph/opus/archive/v{{ version }}.tar.gz\n  sha256: 4834a8944c33a7ecab5cad9454eeabe4680ca1842cb8f5a2437572dbf636de8f\n  patches:\n    - cmake_use_packageversion.patch\n\nbuild:\n  number: 1\n  run_exports:\n    # seems to be maintaining compatibility across minor versions\n    # https://abi-laboratory.pro/tracker/timeline/opus/\n    - {{ pin_subpackage('libopus', max_pin='x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - make               # [unix]\n    - autoconf           # [unix]\n    - libtool            # [unix]\n    - automake           # [unix]\n    - ninja              # [win]\n    - cmake              # [win]\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libopus${SHLIB_EXT}  # [unix]\n    - if exist %LIBRARY_LIB%\\opus.lib (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_BIN%\\opus.dll (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: http://opus-codec.org/\n  license: BSD-3-Clause\n  license_file: COPYING\n  summary: Opus Interactive Audio Codec\n  description: |\n    Opus is a totally open, royalty-free, highly versatile\n    audio codec. Opus is unmatched for interactive speech\n    and music transmission over the Internet, but is also\n    intended for storage and streaming applications. It is\n    standardized by the Internet Engineering Task Force\n    (IETF) as RFC 6716 which incorporated technology from\n    Skype's SILK codec and Xiph.Org's CELT codec.\n  doc_url: http://opus-codec.org/docs/\n  dev_url: http://opus-codec.org/development/\n\nextra:\n  recipe-maintainers:\n    - wolfv\n",
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "url": "https://github.com/xiph/opus/archive/v1.3.1.tar.gz",
 "version": "1.3.1"
}