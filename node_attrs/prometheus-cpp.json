{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/1001485200.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "prometheus-cpp",
 "hash_type": "sha256",
 "name": "prometheus-cpp",
 "new_version": "1.0.1",
 "new_version_attempts": {
  "1.0.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "prometheus-cpp"
  ]
 },
 "pinning_version": "2022.07.19.11.33.02",
 "raw_meta_yaml": "# code: language: jinja-yaml\n{% set name = \"prometheus-cpp\" %}\n{% set version = \"1.0.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  - url: https://github.com/jupp0r/prometheus-cpp/releases/download/v{{ version }}/prometheus-cpp-with-submodules.tar.gz\n    sha256: 053f865548c7a199107f88c1f0f7b399fb75f933f9a7759e1eabcf37c261c3e6\n\nbuild:\n  number: 0\n  always_include_files:\n    - lib/cmake/prometheus-cpp/           # [unix]\n    - Library/lib/cmake/prometheus-cpp/   # [win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake >=3.1\n    - ninja\n\n    # For cross-compiling\n    - libcurl                 # [build_platform != target_platform]\n    - curl                    # [build_platform != target_platform]\n    - zlib                    # [build_platform != target_platform]\n  host:\n    - libcurl\n    - zlib\n  run:\n    - zlib\n    - libcurl\n\ntest:\n  commands:\n    - test -d $PREFIX/include/prometheus/                                   # [unix]\n    - test -d $PREFIX/lib/cmake/prometheus-cpp/                             # [unix]\n    - test -f $PREFIX/lib/cmake/prometheus-cpp/prometheus-cpp-config.cmake  # [unix]\n    - test -f \"${PREFIX}/lib/libprometheus-cpp-core${SHLIB_EXT}\"           # [unix]\n    - test -f \"${PREFIX}/lib/libprometheus-cpp-pull${SHLIB_EXT}\"           # [unix]\n    - test -f \"${PREFIX}/lib/libprometheus-cpp-push${SHLIB_EXT}\"           # [unix]\n    - if not exist %LIBRARY_INC%\\prometheus exit 1                                        # [win]\n    - if not exist %LIBRARY_LIB%\\cmake\\prometheus-cpp exit 1                              # [win]\n    - if not exist %LIBRARY_LIB%\\cmake\\prometheus-cpp\\prometheus-cpp-config.cmake exit 1  # [win]\n    - dir %LIBRARY_LIB%\\prometheus-*.lib                                                  # [win]\n    - if not exist %LIBRARY_LIB%\\prometheus-cpp-core.lib exit 1                           # [win]\n    - if not exist %LIBRARY_LIB%\\prometheus-cpp-pull.lib exit 1                      # [win]\n    - if not exist %LIBRARY_LIB%\\prometheus-cpp-push.lib exit 1                      # [win]\n\nabout:\n  home: https://github.com/jupp0r/prometheus-cpp\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Prometheus Client Library for Modern C++\n  description: |\n    This library aims to enable Metrics-Driven Development for C++ services. It implements the\n    Prometheus Data Model, a powerful abstraction on which to collect and expose metrics. We\n    offer the possibility for metrics to be collected by Prometheus, but other push/pull collections\n    can be added as plugins.\n  dev_url: https://github.com/jupp0r/prometheus-cpp\n\nextra:\n  recipe-maintainers:\n    - lidavidm\n    - mariusvniekerk\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/jupp0r/prometheus-cpp/releases/download/v1.0.1/prometheus-cpp-with-submodules.tar.gz",
 "version": "1.0.1"
}