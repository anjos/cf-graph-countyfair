{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/514108907.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/514109342.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/564365161.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/712677996.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/827185771.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/998327271.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1019277869.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.2.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "libwebp-base",
 "hash_type": "sha256",
 "name": "libwebp-base",
 "new_version": "1.2.4",
 "new_version_attempts": {
  "1.2.0": 1,
  "1.2.1": 1,
  "1.2.2": 1,
  "1.2.3": 1,
  "1.2.4": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libwebp-base"
  ]
 },
 "pinning_version": "2022.08.05.23.22.55",
 "raw_meta_yaml": "{% set version = \"1.2.4\" %}\n{% set major,minor,patch = version.split('.') %}\n\npackage:\n  name: libwebp-base\n  version: {{ version }}\n\nsource:\n  url: http://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-{{ version }}.tar.gz\n  sha256: 7bf5a8a28cc69bcfa8cb214f2c3095703c6b73ac5fba4d5480c205331d9494df\n  patches:\n    - patches/0001-match-naming-convention-used-by-nmake-also-for-windo.patch  # [win]\n    - patches/0002-use-standard-location-for-cmake-config-files.patch          # [win]\n\nbuild:\n  number: 0\n  run_exports:\n    # https://abi-laboratory.pro/?view=timeline&l=libwebp\n    - {{ pin_subpackage('libwebp-base') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - cmake    # [win]\n    - ninja    # [win]\n    - libtool  # [unix]\n    - make     # [unix]\n  run_constrained:\n    # 1.1 is when libwebp-base was split from libwebp\n    - libwebp {{ version }}\n\n{% set libraries = [\"libwebp\", \"libwebpdemux\", \"libwebpmux\", \"libwebpdecoder\"] %}\n{% set headers = [\"decode.h\", \"demux.h\", \"encode.h\", \"mux_types.h\", \"mux.h\", \"types.h\"] %}\n{% set binaries = [\"cwebp\", \"dwebp\", \"gif2webp\", \"img2webp\", \"webpinfo\", \"webpmux\"] %}\n\ntest:\n  commands:\n    {% for each_lib in libraries %}\n      # shared libraries\n      - test -f $PREFIX/lib/{{ each_lib }}.so                 # [linux]\n      - test -f $PREFIX/lib/{{ each_lib }}.dylib              # [osx]\n      - if not exist %LIBRARY_LIB%\\{{ each_lib }}.lib exit 1  # [win]\n      - if not exist %LIBRARY_BIN%\\{{ each_lib }}.dll exit 1  # [win]\n\n      # absence of static libraries; removed in v1.2.3\n      # should not be packaged in conda-forge, see also CFEP-18\n      - test ! -f $PREFIX/lib/{{ each_lib }}.a                # [unix]\n\n      # config files; unix currently doesn't have CMake, only pkgconfig\n      - test $PREFIX/pkgconfig/{{ each_lib }}.pc              # [unix]\n      - if not exist %LIBRARY_PREFIX%\\cmake\\WebPConfig.cmake exit 1  # [win]\n    {% endfor %}\n\n    # headers\n    {% for each_header in headers %}\n      - test -f $PREFIX/include/webp/{{ each_header }} || (echo \"{{ each_header }} not found\" && exit 1)  # [unix]\n      - if not exist %LIBRARY_INC%\\webp\\{{ each_header }} exit 1                                          # [win]\n    {% endfor %}\n\n    # All binaries should be excluded from libwebp-base. Various binaries\n    # link against libtiff, libpng, libgif, so they must be separated to prevent\n    # circular imports https://github.com/conda-forge/staged-recipes/pull/11101\n    {% for each_bin in binaries %}\n      - test ! -f $PREFIX/bin/{{ each_bin }}               # [unix]\n      - if exist %LIBRARY_BIN%\\{{ each_bin }}.exe exit 1   # [win]\n    {% endfor %}\n\nabout:\n  home: https://developers.google.com/speed/webp\n  license: BSD-3-Clause\n  license_file: COPYING\n  summary: WebP image library\n  description: >\n    WebP is a method of lossy and lossless compression that can be used on a\n    large variety of photographic, translucent and graphical images found on the\n    web. The degree of lossy compression is adjustable so a user can choose the\n    trade-off between file size and image quality.\n    libwebp-base provides the headers and shared libraries. For cwebp and dwep,\n    binaries install libwebp.\n  doc_url: https://developers.google.com/speed/webp/docs/using\n  dev_url: https://chromium.googlesource.com/webm/libwebp\n\nextra:\n  recipe-maintainers:\n    - carterbox\n    - dschreij\n    - ocefpaf\n",
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "url": "http://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.4.tar.gz",
 "version": "1.2.4"
}