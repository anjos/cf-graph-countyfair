{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/199894850.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Compiler",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/262395310.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "BlasRebuild",
    "migrator_version": 0,
    "name": "blas2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/797449597.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu69"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/831799152.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "mkl2022"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/888289277.json"
   },
   "data": {
    "bot_rerun": 1648861997.9894733,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda_112_ppc64le_aarch64"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/896293921.json"
   },
   "data": {
    "bot_rerun": 1650427252.0247622,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu70"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/917473007.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu70"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "kaldi",
 "hash_type": "sha256",
 "name": "kaldi-split",
 "new_version": false,
 "outputs_names": {
  "__set__": true,
  "elements": [
   "kaldi"
  ]
 },
 "pinning_version": "2022.04.24.03.02.13",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set version = \"5.5.1016\" %}\n# minor/major is https://github.com/kaldi-asr/kaldi/blob/master/src/.version;\n# patch version is the number of commits since then, see\n# https://github.com/kaldi-asr/kaldi/blob/master/cmake/VersionHelper.cmake\n{% set commit = \"5a37217e107bc9cb5e4e1ad2b290cecbdedfa799\" %}\n{% set kaldi_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\n{% set kaldi_libraries = [\n    \"base\", \"matrix\", \"cudamatrix\", \"util\", \"feat\", \"tree\", \"gmm\", \"transform\",\n    \"fstext\", \"hmm\", \"lm\", \"decoder\", \"lat\", \"nnet\", \"nnet2\", \"nnet3\",\n    \"rnnlm\", \"chain\", \"ivector\", \"online2\", \"kws\"\n] + (cuda_compiler_version != \"None\") * [\n    \"cudafeat\", \"cudadecoder\"\n] + (not win) * [\n    \"online\"\n] %}\n# This list should be substantially longer, but upstream just globs\n# all *.h files. These are just stand-ins (one header per folder),\n# but relevant headers can be added as needed/desired.\n{% set kaldi_headers = [\n    \"base/io-funcs.h\", \"matrix/cblas-wrappers.h\", \"cudamatrix/cu-array.h\",\n    \"util/basic-filebuf.h\", \"feat/feature-common.h\", \"tree/build-tree.h\",\n    \"gmm/am-diag-gmm.h\", \"transform/cmvn.h\",\n    \"fstext/context-fst.h\", \"hmm/hmm-utils.h\", \"lm/arpa-file-parser.h\",\n    \"decoder/grammar-fst.h\", \"lat/arctic-weight.h\", \"nnet/nnet-activation.h\",\n    \"nnet2/am-nnet.h\", \"nnet3/attention.h\", \"rnnlm/sampler.h\",\n    \"chain/chain-datastruct.h\", \"ivector/plda.h\", \"online2/online-endpoint.h\",\n    \"kws/kaldi-kws.h\", \"itf/options-itf.h\"\n] + (cuda_compiler_version != \"None\") * [\n    \"cudafeat/lane-desc.h\", \"cudadecoder/cuda-fst.h\"\n] + (not win) * [\n    \"online/online-decodable.h\"\n] %}\n\npackage:\n  name: kaldi-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/kaldi-asr/kaldi/archive/{{ commit }}.tar.gz\n  sha256: 153ae41654046f1997c247d3328c17124745b70be090fe1ee73442160e7b08c7\n  patches:\n    - patches/0001-Update-cmake.patch\n    - patches/0002-Remove-Windows-executables.patch\n\nbuild:\n  number: 3\n  skip: true  # [cuda_compiler_version == \"10.2\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n\noutputs:\n  - name: kaldi\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                # [cuda_compiler_version == \"None\"]\n    script: build_kaldi.sh   # [not win]\n    script: build_kaldi.bat  # [win]\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}  # [not win]\n        - {{ compiler('cuda') }}     # [cuda_compiler_version != \"None\"]\n        - cmake\n        - ninja\n        - m2-patch  # [win]\n        - libtool   # [not win]\n        - automake  # [not win]\n      host:\n        - icu\n        - libblas\n        - libcblas\n        - liblapack\n        - liblapacke\n        - magma           # [cuda_compiler_version != \"None\"]\n        - pthreads-win32  # [win]\n        - zlib\n      run:\n        - libblas\n        - libcblas\n        - liblapack\n        - liblapacke\n        - magma    # [cuda_compiler_version != \"None\"]\n        - openfst  # [not win and build_platform == target_platform]\n        - ucrt     # [win]\n      run_exports:\n        - {{ pin_subpackage('kaldi', max_pin='x.x.x') }}\n    test:\n      # will also run run_test.py (checking the binaries)\n      commands:\n        # libraries:\n        {% for each_lib in kaldi_libraries %}\n            # shared\n            - test -f $PREFIX/lib/libkaldi-{{ each_lib }}.so               # [linux]\n            - test -f $PREFIX/lib/libkaldi-{{ each_lib }}.dylib            # [osx]\n            # windows doesn't yet build dynamic libs\n            # - if not exist %LIBRARY_BIN%\\kaldi-{{ each_lib }}.dll exit 1   # [win]\n            - if not exist %LIBRARY_LIB%\\kaldi-{{ each_lib }}.lib exit 1   # [win]\n\n            # absence of static libraries\n            - test ! -f $PREFIX/lib/libkaldi-{{ each_lib }}.a              # [not win]\n        {% endfor %}\n\n        # headers:\n        {% for each_header in kaldi_headers %}\n            - test -f $PREFIX/include/kaldi/{{ each_header }} || (echo \"{{ each_header }} not found\" && exit 1)  # [unix]\n            - if not exist %LIBRARY_INC%\\kaldi\\{{ \"\\\\\".join(each_header.split(\"/\")) }} exit 1                    # [win]\n        {% endfor %}\n\nabout:\n  home: http://kaldi-asr.org/\n  license: Apache-2.0\n  license_file: COPYING\n  summary: 'Kaldi is a toolkit for speech recognition written in C++.'\n  description: |\n    Kaldi is intended for use by speech recognition researchers. It is a framework rather than a library.\n  doc_url: http://kaldi-asr.org/doc\n  dev_url: https://github.com/kaldi-asr/kaldi\n\nextra:\n  recipe-maintainers:\n    - mmcauliffe\n    - mcernak\n    - h-vetinari\n  feedstock-name: kaldi\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/kaldi-asr/kaldi/archive/5a37217e107bc9cb5e4e1ad2b290cecbdedfa799.tar.gz",
 "version": "5.5.1016"
}