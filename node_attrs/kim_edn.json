{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/728121587.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/728830885.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.3.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "kim_edn",
 "hash_type": "sha256",
 "name": "kim-edn",
 "new_version": "1.3.1",
 "new_version_attempts": {
  "1.3.0": 1,
  "1.3.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "kim-edn"
  ]
 },
 "pinning_version": "2021.09.06.19.10.42",
 "raw_meta_yaml": "{% set name = \"kim-edn\" %}\n{% set version = \"1.3.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 1606498d2b8e438aaae4ea74a25d84215702ea83a786f22e1bbcbd5b4a71c38f\n\nbuild:\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n\ntest:\n  imports:\n    - kim_edn\n\nabout:\n  home: https://github.com/openkim/kim-edn\n  license: LGPL-2.1-or-later\n  license_family: LGPL\n  license_file: LICENSE\n  summary: KIM-EDN encoder and decoder for Python\n  description: |\n    KIM-EDN encoder and decoder embraces a subset of\n    edn <https://openkim.org/doc/schema/edn-format> as a standard data\n    format. The primary purpose of this data format choice is to serve as a\n    notational superset to JSON with the enhancements being that it (1)\n    allows for comments and (2) treats commas as whitespace enabling easier\n    templating. KIM-EDN encoder and decoder works for Python 3.6+. It is pure\n    Python code with no dependencies.\n  dev_url: https://github.com/openkim/kim-edn\n\nextra:\n  recipe-maintainers:\n    - yafshar\n",
 "smithy_version": "3.12",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/k/kim-edn/kim-edn-1.3.1.tar.gz",
 "version": "1.3.1"
}