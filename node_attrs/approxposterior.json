{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/201500163.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.post1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.post1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/346445716.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375779113.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "approxposterior",
 "hash_type": "sha256",
 "name": "approxposterior",
 "new_version": "0.4",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "approxposterior"
  ]
 },
 "pinning_version": "2020.02.12",
 "raw_meta_yaml": "{% set name = \"approxposterior\" %}\n{% set version = \"0.4\" %}\n{% set sha256 = \"5a6a64a7291d17450771f2471f92253511e77c86e82b6dcd04d5ffb4a64c1ebc\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 1\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=3.5\n  run:\n    - python >=3.5\n    - numpy\n    - matplotlib-base\n    - scipy\n    - george\n    - emcee >=3\n    - corner\n    - scikit-learn\n    - h5py\n\ntest:\n  imports:\n    - approxposterior\n    - approxposterior.approx\n\nabout:\n  home: http://github.com/dflemin3/approxposterior\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: 'Python implementation of Bayesian Approximate Posterior Estimation algorithm'\n\n  description: |\n    This package is a Python implementation of Bayesian Active Learning for\n    Posterior Estimation by Kandasamy et al. (2015) and Adaptive Gaussian\n    process approximation for Bayesian inference with expensive likelihood\n    functions by Wang & Li (2017). These algorithms allows the user to compute\n    approximate posterior probability distributions using computationally\n    expensive forward models by training a Gaussian Process (GP) surrogate\n    for the likelihood evaluation. The algorithms leverage the inherent\n    uncertainty in the GP's predictions to identify high-likelihood regions\n    in parameter space where the GP is uncertain. The algorithms then run the\n    forward model at these points to compute their likelihood and re-trains\n    the GP to maximize the GP's predictive ability while minimizing the number\n    of forward model evaluations. Check out Bayesian Active Learning for\n    Posterior Estimation by Kandasamy et al. (2015) and Adaptive Gaussian\n    process approximation for Bayesian inference with expensive likelihood\n    functions by Wang & Li (2017) for in-depth descriptions of the respective\n    algorithms.\n  doc_url: https://dflemin3.github.io/approxposterior/\n  dev_url: https://github.com/dflemin3/approxposterior\n\nextra:\n  recipe-maintainers:\n    - dflemin3\n    - jakevdp\n",
 "smithy_version": "3.6.8",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/a/approxposterior/approxposterior-0.4.tar.gz",
 "version": "0.4"
}