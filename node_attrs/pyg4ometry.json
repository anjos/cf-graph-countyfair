{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/889901666.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "vtk910"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/889909831.json"
   },
   "data": {
    "bot_rerun": 1648254963.9243352,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "vtk903"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/889918003.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/890051701.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "vtk903"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/897201943.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/898152640.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/902236746.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "pyg4ometry",
 "hash_type": "sha256",
 "name": "pyg4ometry",
 "new_version": "1.0.2",
 "new_version_attempts": {
  "1.0.2": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyg4ometry"
  ]
 },
 "pinning_version": "2022.04.06.21.38.29",
 "raw_meta_yaml": "{% set name = \"pyg4ometry\" %}\n{% set version = \"1.0.2\" %}\n{% set antlr_version = \"4.7.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  - url: https://bitbucket.org/jairhul/pyg4ometry/get/v{{ version }}.tar.gz\n    sha256: 6e2c1224baedbdc681c053b8d281616035ea2118a141018b63a680f924a443d5\n    folder: pyg4ometry\n    patches:\n      - 0001-Fix-setting-includeSearchDirs-and-librarySearchDirs.patch\n      - 0002-Remove-test-only-dependencies.patch\n  - url: https://www.antlr.org/download/antlr-{{ antlr_version }}-complete.jar\n    sha256: 6852386d7975eff29171dae002cc223251510d35f291ae277948f381a7b380b4\n\nbuild:\n  number: 0\n  skip: true  # [win or py<38]\n  script:\n    - cd pyg4ometry\n    # Regenerate the antlr parsers so they can be used with a newer version of the runtime\n    - find pyg4ometry/ -name '*.g4' -print -exec java -jar \"$SRC_DIR/antlr-{{ antlr_version }}-complete.jar\" {} -Dlanguage=Python3 -visitor \\;\n    # Update the antlr-python-runtime dependency pin for setuptools\n    - sed -E -i.bak 's@\"antlr4-python3-runtime==.+\"@\"antlr4-python3-runtime=={{ antlr_version }}\"@g' setup.py\n    - grep antlr4-python3-runtime=={{ antlr_version }} setup.py\n    # Build and install pyg4ometry itself\n    - {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - pybind11                               # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - make\n    - sed\n    - openjdk\n  host:\n    - python\n    - pip\n    - cgal\n    - vtk\n    - pybind11\n    - cython\n    - mpfr\n    - gmp\n  run:\n    - python\n    - antlr-python-runtime ={{ antlr_version }}\n    - matplotlib-base\n    - pandas\n    - networkx\n    - numpy\n    - vtk\n    - configparser\n    - sympy >=1.7\n    - scipy\n\ntest:\n  imports:\n    - pyg4ometry\n    - pyg4ometry.convert\n    - pyg4ometry.fluka\n    - pyg4ometry.geant4\n    - pyg4ometry.visualisation\n  requires:\n    - pip\n  commands:\n    - pip check\n\nabout:\n  home: https://bitbucket.org/jairhul/pyg4ometry/\n  license: GPL-3.0-only\n  license_file:\n    - pyg4ometry/LICENCE.txt\n    - pyg4ometry/COPYING.txt\n  summary: Python code for rapid creation and conversion of radiation transport Monte Carlo (Geant4 and Fluka) geometries\n  doc_url: http://www.pp.rhul.ac.uk/bdsim/pyg4ometry/\n  dev_url: https://bitbucket.org/jairhul/pyg4ometry/\n\nextra:\n  recipe-maintainers:\n    - chrisburr\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://bitbucket.org/jairhul/pyg4ometry/get/v1.0.2.tar.gz",
 "version": "1.0.2"
}