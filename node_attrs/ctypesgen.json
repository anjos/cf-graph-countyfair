{
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "ctypesgen",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "ctypesgen reads parses c header files and creates a wrapper for libraries based on what it finds. Preprocessor macros are handled in a manner consistent with typical c code. Preprocessor macro functions are translated into Python functions that are then made available to the user of the newly-generated Python wrapper library. ctypesgen can also output JSON, which can be used with Mork, which generates bindings for Lua, using the alien module (which binds libffi to Lua).",
   "dev_url": "https://github.com/davidjamesca/ctypesgen.git",
   "doc_url": "https://github.com/davidjamesca/ctypesgen/wiki",
   "home": "https://github.com/davidjamesca/ctypesgen/",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE",
   "summary": "Python wrapper generator for ctypes"
  },
  "build": {
   "entry_points": [
    "ctypesgen = ctypesgen.main:main"
   ],
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "duncanmmacleod"
   ]
  },
  "package": {
   "name": "ctypesgen",
   "version": "1.0.2"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=2.7",
    "setuptools"
   ],
   "run": [
    "python >=2.7"
   ]
  },
  "source": {
   "sha256": "409ff3984ecf2aef09008045a713d61031990e95834074bff27957430223b729",
   "url": "https://github.com/davidjamesca/ctypesgen/archive/ctypesgen-1.0.2.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pip check",
    "ctypesgen --help"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "ctypesgen reads parses c header files and creates a wrapper for libraries based on what it finds. Preprocessor macros are handled in a manner consistent with typical c code. Preprocessor macro functions are translated into Python functions that are then made available to the user of the newly-generated Python wrapper library. ctypesgen can also output JSON, which can be used with Mork, which generates bindings for Lua, using the alien module (which binds libffi to Lua).",
   "dev_url": "https://github.com/davidjamesca/ctypesgen.git",
   "doc_url": "https://github.com/davidjamesca/ctypesgen/wiki",
   "home": "https://github.com/davidjamesca/ctypesgen/",
   "license": "BSD-2-Clause",
   "license_file": "LICENSE",
   "summary": "Python wrapper generator for ctypes"
  },
  "build": {
   "entry_points": [
    "ctypesgen = ctypesgen.main:main"
   ],
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "duncanmmacleod"
   ]
  },
  "package": {
   "name": "ctypesgen",
   "version": "1.0.2"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=2.7",
    "setuptools"
   ],
   "run": [
    "python >=2.7"
   ]
  },
  "source": {
   "sha256": "409ff3984ecf2aef09008045a713d61031990e95834074bff27957430223b729",
   "url": "https://github.com/davidjamesca/ctypesgen/archive/ctypesgen-1.0.2.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pip check",
    "ctypesgen --help"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "name": "ctypesgen",
 "new_version": "1.1.1",
 "new_version_attempts": {
  "1.1.0": 8,
  "1.1.1": 17
 },
 "new_version_errors": {
  "1.1.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '1.1.0' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/davidjamesca/ctypesgen/archive/{{ name }}-{{ version }}.tar.gz'\n",
  "1.1.1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '1.1.1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/davidjamesca/ctypesgen/archive/{{ name }}-{{ version }}.tar.gz'\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ctypesgen"
  ]
 },
 "raw_meta_yaml": "{% set name = \"ctypesgen\" %}\n{% set version = \"1.0.2\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/davidjamesca/ctypesgen/archive/{{ name }}-{{ version }}.tar.gz\n  sha256: 409ff3984ecf2aef09008045a713d61031990e95834074bff27957430223b729\n\nbuild:\n  entry_points:\n    - ctypesgen = ctypesgen.main:main\n  noarch: python\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=2.7\n    - setuptools\n  run:\n    - python >=2.7\n\ntest:\n  requires:\n    - pip\n  commands:\n    - python -m pip check\n    - ctypesgen --help\n\nabout:\n  home: https://github.com/davidjamesca/ctypesgen/\n  dev_url: https://github.com/davidjamesca/ctypesgen.git\n  doc_url: https://github.com/davidjamesca/ctypesgen/wiki\n  license: BSD-2-Clause\n  license_file: LICENSE\n  summary: Python wrapper generator for ctypes\n  description:\n    ctypesgen reads parses c header files and creates a wrapper for\n    libraries based on what it finds.\n    Preprocessor macros are handled in a manner consistent with typical\n    c code.\n    Preprocessor macro functions are translated into Python functions\n    that are then made available to the user of the newly-generated\n    Python wrapper library.\n    ctypesgen can also output JSON, which can be used with Mork, which\n    generates bindings for Lua, using the alien module\n    (which binds libffi to Lua).\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n",
 "req": {
  "__set__": true,
  "elements": [
   "pip",
   "python",
   "setuptools"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=2.7",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python >=2.7"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://github.com/davidjamesca/ctypesgen/archive/ctypesgen-1.0.2.tar.gz",
 "version": "1.0.2"
}