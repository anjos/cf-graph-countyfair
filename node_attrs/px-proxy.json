{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/336030962.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/356502337.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2018-11-20"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/3c7040ab-7df8-445e-8d2a-77381bb7556c.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503634950.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/c0aea0d6-f929-4d06-a902-196b78eabe55.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/779921946.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/834055419.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2019-05-20"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "win": "azure"
  }
 },
 "feedstock_name": "px-proxy",
 "hash_type": "sha256",
 "name": "px-proxy",
 "new_version": "2019-05-20",
 "new_version_attempts": {
  "2019-05-20": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "px-proxy"
  ]
 },
 "pinning_version": "2022.01.27.16.51.01",
 "raw_meta_yaml": "{% set name = \"px-proxy\" %}\n{% set version = \"v0.5.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: 20220127\n\nsource:\n  url: https://github.com/genotrance/{{ name[:2] }}/archive/{{ version }}.tar.gz\n  sha256: a830deaec80afc519873dffc4a0f45de6ce0aa26917dc4b9a3d85f34311568dd\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv\n  skip: true  # [not win]\n  entry_points:\n    - px = px:main\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - futures  # [py2k]\n    - keyring\n    - netaddr\n    - ntlm-auth\n    - psutil\n    - pywin32\n    - winkerberos\n\ntest:\n  imports:\n    - px\n\nabout:\n  home: https://github.com/genotrance/px\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n  summary: 'An HTTP proxy server to automatically authenticate through an NTLM proxy'\n  description: |\n    Px is a HTTP(s) proxy server that allows applications to authenticate through\n    an NTLM or Windows Kerberos authenticated proxy server, typically used in\n    corporate deployments, without having to deal with the actual handshake. It is\n    primarily designed to run on Windows systems and authenticates on behalf of the\n    application using the currently logged in Windows user account.\n\nextra:\n  recipe-maintainers:\n    - fcollonval\n    - genotrance\n",
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "time": 1568135311.7006843,
 "url": "https://github.com/genotrance/px/archive/v0.5.0.tar.gz",
 "version": "20220127"
}