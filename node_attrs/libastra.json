{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/680816277.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/c36cbde8-4540-4851-97e5-97f2c1d0936f.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/680846536.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/969736130.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/969738520.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/970013315.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda_112_ppc64le_aarch64"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1052497069.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 3,
    "migrator_version": 0,
    "name": "boost1780"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "libastra",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON"
   ],
   "string": "cuda11.2h1234567_108",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit"
   ],
   "run": [
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda"
   ]
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest"
   ],
   "requires": [
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cudatoolkit"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF"
   ],
   "string": "cuda11.2h1234567_108",
   "track_features": [
    "nocuda_la6JwwDGF7"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox",
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp"
   ],
   "run": [
    "__cuda"
   ]
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest"
   ],
   "requires": [
    "boost-cpp",
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest",
    "build/tests/astratest"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cudatoolkit"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON"
   ],
   "string": "cuda11.2h1234567_108",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox",
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit"
   ],
   "run": [
    "__cuda"
   ]
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest"
   ],
   "requires": [
    "boost-cpp",
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest",
    "build/tests/astratest"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cudatoolkit"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON"
   ],
   "string": "cuda11.1h1234567_108",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18"
   ],
   "host": [
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit"
   ],
   "run": [
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "boost-cpp",
    "boost-cpp",
    "__cuda",
    "boost-cpp",
    "__cuda",
    "boost-cpp",
    "__cuda",
    "boost-cpp"
   ]
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0",
    "test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest"
   ],
   "requires": [
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/astratest",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe"
   ]
  }
 },
 "name": "libastra",
 "new_version": "2.1.0",
 "new_version_attempts": {
  "1.9.9-1": 71,
  "2.0.0-1": 3,
  "2.0.0-2": 19,
  "2.0.0-3": 143
 },
 "new_version_errors": {
  "1.9.9-1": "We found a problem parsing the recipe for version '1.9.9-1': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 12, column 3:\n      run_exports:\n      ^ (line: 12), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 18, column 16:\n      string: \"<{ \"cuda\" + cuda_compiler_version|st ... \n                   ^ (line: 18))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 508, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 465, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 120, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 611, in parse_block_mapping_key\n    raise ParserError(\n",
  "2.0.0-1": "We found a problem parsing the recipe for version '2.0.0-1': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 12, column 3:\n      run_exports:\n      ^ (line: 12), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 18, column 16:\n      string: \"<{ \"cuda\" + cuda_compiler_version|st ... \n                   ^ (line: 18))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 508, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 465, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 120, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 611, in parse_block_mapping_key\n    raise ParserError(\n",
  "2.0.0-2": "We found a problem parsing the recipe for version '2.0.0-2': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 12, column 3:\n      run_exports:\n      ^ (line: 12), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 18, column 16:\n      string: \"<{ \"cuda\" + cuda_compiler_version|st ... \n                   ^ (line: 18))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 508, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 465, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 119, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 611, in parse_block_mapping_key\n    raise ParserError(\n",
  "2.0.0-3": "We found a problem parsing the recipe for version '2.0.0-3': \n\nParserError('while parsing a block mapping',   in \"<unicode string>\", line 12, column 3:\n      run_exports:\n      ^ (line: 12), \"expected <block end>, but found '<scalar>'\",   in \"<unicode string>\", line 18, column 16:\n      string: \"<{ \"cuda\" + cuda_compiler_version|st ... \n                   ^ (line: 18))\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 516, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 494, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 119, in get_single_data\n    node = self.composer.get_single_node()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 76, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 99, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 223, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 143, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/composer.py\", line 216, in compose_mapping_node\n    while not self.parser.check_event(MappingEndEvent):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 146, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/parser.py\", line 612, in parse_block_mapping_key\n    raise ParserError(\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=h*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=OFF"
   ],
   "track_features": [
    "nocuda_la6JwwDGF7"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja"
   ],
   "host": [
    "boost-cpp"
   ],
   "run": []
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest"
   ],
   "requires": [
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=h*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=OFF"
   ],
   "track_features": [
    "nocuda_la6JwwDGF7"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake >=3.18",
    "ninja"
   ],
   "host": [
    "boost-cpp"
   ],
   "run": []
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest"
   ],
   "requires": [
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/astratest"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libastra"
  ]
 },
 "pinning_version": "2022.09.11.02.24.47",
 "raw_meta_yaml": "{% set version = \"2.1.0\" %}\n{% set build = 8 %}\n\npackage:\n  name: libastra\n  version: {{ version }}\n\nsource:\n  url: https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3\n  patches:\n    - cmake.patch\n    - find-cuda.patch\n\nbuild:\n  track_features:\n    - nocuda_la6JwwDGF7  # [cuda_compiler_version == \"None\"]\n  run_exports:\n    - {{ pin_subpackage('libastra', max_pin='x.x.x') }}\n    - libastra =*=cuda*  # [cuda_compiler_version != \"None\"]\n    - libastra =*=h*     # [cuda_compiler_version == \"None\"]\n  number: {{ build }}\n  string: \"{{ \"cuda\" + cuda_compiler_version|string }}h{{ PKG_HASH }}_{{ build + 100 }}\"  # [cuda_compiler_version != \"None\"]\n  script_env:\n    - ASTRA_USE_CUDA=ON   # [cuda_compiler_version != \"None\"]\n    - ASTRA_USE_CUDA=OFF  # [cuda_compiler_version == \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != \"None\"]\n    - {{ compiler('cxx') }}\n    # CMake policy max must be set to 3.22 for CMake to not autodetect architectures\n    - cmake >=3.18\n    - ninja  # [not win]\n  host:\n    - boost-cpp\n    - cudatoolkit  # [cuda_compiler_version != \"None\"]\n  run:\n    - __cuda  # [cuda_compiler_version != \"None\"]\n  # unix uses pthread, but win links to libboost:threads\n    - {{ pin_compatible('boost-cpp', max_pin='x.x') }}  # [win]\n\ntest:\n  requires:\n  # libastra uses header-only from Boost, but the unit tests actually link to libboost_unit_test_framework.so\n    - {{ pin_compatible('boost-cpp', max_pin='x.x') }}\n  source_files:\n    - build/tests/astratest  # [unix]\n    - build/tests/Release/astratest.exe  # [win]\n  commands:\n    - test -f $PREFIX/lib/libastra${SHLIB_EXT}                          # [linux]\n    - test -f $PREFIX/lib/libastra${SHLIB_EXT}.0                        # [linux]\n    - test -f $PREFIX/lib/libastra${SHLIB_EXT}.0.0.0                    # [linux]\n    - \"LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH ./build/tests/astratest\"  # [unix]\n    # Library named differently from upstream because it makes linking\n    # consistent between platforms. File links don't work on Windows.\n    - if not exist %LIBRARY_LIB%\\\\astra.lib exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\\\astra.dll exit 1  # [win]\n    - build\\\\tests\\\\Release\\\\astratest              # [win]\n\nabout:\n  home: http://www.astra-toolbox.com\n  license: GPL-3.0-only\n  license_file:\n    - COPYING\n    - lib/licenses/rapidxml.txt\n  summary: 'libastra is a C++ library of high-performance GPU primitives for 2D\n  and 3D tomography.'\n\nextra:\n  recipe-maintainers:\n    - carterbox\n",
 "req": {
  "__set__": true,
  "elements": [
   "__cuda",
   "boost-cpp",
   "cmake",
   "cuda_compiler_stub",
   "cudatoolkit",
   "cxx_compiler_stub",
   "ninja"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cuda_compiler_stub",
    "cudatoolkit",
    "cxx_compiler_stub"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda",
    "boost-cpp",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "smithy_version": "3.21.1",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cudatoolkit"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda",
    "boost-cpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 },
 "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz",
 "version": "2.1.0",
 "win_64_meta_yaml": {
  "about": {
   "home": "http://www.astra-toolbox.com",
   "license": "GPL-3.0-only",
   "license_file": [
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt",
    "COPYING",
    "lib/licenses/rapidxml.txt"
   ],
   "summary": "libastra is a C++ library of high-performance GPU primitives for 2D and 3D tomography."
  },
  "build": {
   "number": "8",
   "run_exports": [
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=h*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*",
    "libastra",
    "libastra =*=cuda*"
   ],
   "script_env": [
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=OFF",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON",
    "ASTRA_USE_CUDA=ON"
   ],
   "string": "cuda11.1h1234567_108",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox",
    "carterbox"
   ]
  },
  "package": {
   "name": "libastra",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cmake >=3.18"
   ],
   "host": [
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit",
    "boost-cpp",
    "cudatoolkit"
   ],
   "run": [
    "__cuda",
    "boost-cpp",
    "boost-cpp",
    "__cuda",
    "boost-cpp",
    "__cuda",
    "boost-cpp",
    "__cuda",
    "boost-cpp"
   ]
  },
  "source": {
   "patches": [
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch",
    "cmake.patch",
    "find-cuda.patch"
   ],
   "sha256": "7768863a2756887e54829725e8fe95a371c7cb0cdfa5392b2e11cfc290f54dc3",
   "url": "https://github.com/astra-toolbox/astra-toolbox/archive/refs/tags/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest",
    "if not exist %LIBRARY_LIB%\\\\astra.lib exit 1",
    "if not exist %LIBRARY_BIN%\\\\astra.dll exit 1",
    "build\\\\tests\\\\Release\\\\astratest"
   ],
   "requires": [
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp",
    "boost-cpp"
   ],
   "source_files": [
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe",
    "build/tests/Release/astratest.exe"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cudatoolkit"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda",
    "boost-cpp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "boost-cpp"
   ]
  }
 }
}