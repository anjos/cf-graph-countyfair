{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/967513958.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1111994666.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python311"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: Signals.SIGTERM\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 232, in _parse_meta_yaml_impl\n    config, _cbc = _run_parsing()\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 214, in _run_parsing\n    _cbc, _ = conda_build.variants.get_package_combined_spec(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 586, in get_package_combined_spec\n    specs[f] = parse_config_file(f, config)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/variants.py\", line 118, in parse_config_file\n    content = yaml.load(contents, Loader=yaml.loader.BaseLoader) or {}\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/__init__.py\", line 81, in load\n    return loader.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/constructor.py\", line 49, in get_single_data\n    node = self.get_single_node()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 36, in get_single_node\n    document = self.compose_document()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 55, in compose_document\n    node = self.compose_node(None, None)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 84, in compose_node\n    node = self.compose_mapping_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 133, in compose_mapping_node\n    item_value = self.compose_node(node, item_key)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 82, in compose_node\n    node = self.compose_sequence_node(anchor)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/composer.py\", line 110, in compose_sequence_node\n    while not self.check_event(SequenceEndEvent):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/parser.py\", line 98, in check_event\n    self.current_event = self.state()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/parser.py\", line 403, in parse_indentless_sequence_entry\n    if self.check_token(BlockEntryToken):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/scanner.py\", line 116, in check_token\n    self.fetch_more_tokens()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/scanner.py\", line 159, in fetch_more_tokens\n    self.scan_to_next_token()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/yaml/scanner.py\", line 781, in scan_to_next_token\n    if self.scan_line_break():\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/xonsh/built_ins.py\", line 61, in newh\n    sys.exit(sig)\nSystemExit: Signals.SIGTERM\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 178, in parse_meta_yaml\n    raise RuntimeError(\"cond build error: %s\" % str(e))\nRuntimeError: cond build error: Signals.SIGTERM\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "ncvue",
 "hash_type": "sha256",
 "name": "ncvue",
 "new_version": "4.1.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ncvue"
  ]
 },
 "pinning_version": "2022.11.05.21.08.08",
 "raw_meta_yaml": "{% set name = \"ncvue\" %}\n{% set version = \"4.1.2\" %}\n{% set sha256 = \"716f708b1a64a195eb9e19d1909d8d2e0b45f60f97adefcc552f00fe35a51b4b\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ncvue-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 2\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n    - setuptools >=42\n    - setuptools_scm >=3.5\n  run:\n    - cartopy\n    - cython\n    - numpy\n    - matplotlib-base\n    - netcdf4\n    - pykdtree\n    - pyshp\n    - python\n    - scipy\n    - shapely\n    - six\n    - tk  # [linux]\n\ntest:\n  commands:\n    - python -c \"import ncvue\"  # [not linux]\n\napp:\n    entry: python -m ncvue\n    icon: ncvue_icon.png\n    summary: ncvue - a minimal GUI for a quick view of netcdf files\n    type: desk\n    own_environment: True\n\nabout:\n  home: https://github.com/mcuntz/ncvue\n  summary: 'A minimal GUI for a quick view of netcdf files'\n  dev_url: https://github.com/mcuntz/ncvue\n  license: MIT\n  license_file: LICENSE\n  description: |\n    ncvue is a minimal GUI for a quick view of netCDF files. It is aiming to\n    be a drop-in replacement for ncview and panoply, being slightly more\n    general than ncview targeting only maps but providing animations, zooming\n    and panning capabilities unlike panoply. If ncvue is used with maps,\n    it supports mostly structured grids, more precisely the grids supported by\n    cartopy.\n  doc_url: https://mcuntz.github.io/ncvue\n\nextra:\n  recipe-maintainers:\n    - mcuntz\n",
 "smithy_version": "3.21.3",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/n/ncvue/ncvue-4.1.2.tar.gz",
 "version": "4.1.2"
}