{
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "captum",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Captum is a model interpretability and understanding library for PyTorch.\nCaptum means comprehension in Latin and contains general purpose\nimplementations of integrated gradients, saliency maps, smoothgrad,\nvargrad and others for PyTorch models. It has quick integration for models\nbuilt with domain-specific libraries such as torchvision, torchtext, and others.\n\n*Captum is currently in beta and under active development!*\n\nPyPI: [https://pypi.org/project/captum/](https://pypi.org/project/captum/)\n",
   "dev_url": "https://github.com/pytorch/captum",
   "doc_url": "https://captum.ai/",
   "home": "https://captum.ai",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Model interpretability for PyTorch"
  },
  "build": {
   "noarch": "python",
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "sugatoray",
    "NarineK",
    "aobo-y",
    "vivekmig"
   ]
  },
  "package": {
   "name": "captum",
   "version": "0.4.1"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.6"
   ],
   "run": [
    "python >=3.6",
    "matplotlib-base",
    "numpy",
    "pytorch >=1.2"
   ]
  },
  "source": {
   "sha256": "1e458921f8810ee6689b56c01e678b28afcaba72648241f0f9ef14583ab54993",
   "url": "https://pypi.io/packages/source/c/captum/captum-0.4.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "captum",
    "captum._utils"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Captum is a model interpretability and understanding library for PyTorch.\nCaptum means comprehension in Latin and contains general purpose\nimplementations of integrated gradients, saliency maps, smoothgrad,\nvargrad and others for PyTorch models. It has quick integration for models\nbuilt with domain-specific libraries such as torchvision, torchtext, and others.\n\n*Captum is currently in beta and under active development!*\n\nPyPI: [https://pypi.org/project/captum/](https://pypi.org/project/captum/)\n",
   "dev_url": "https://github.com/pytorch/captum",
   "doc_url": "https://captum.ai/",
   "home": "https://captum.ai",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "Model interpretability for PyTorch"
  },
  "build": {
   "noarch": "python",
   "number": "1",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "sugatoray",
    "NarineK",
    "aobo-y",
    "vivekmig"
   ]
  },
  "package": {
   "name": "captum",
   "version": "0.4.1"
  },
  "requirements": {
   "host": [
    "pip",
    "python >=3.6"
   ],
   "run": [
    "python >=3.6",
    "matplotlib-base",
    "numpy",
    "pytorch >=1.2"
   ]
  },
  "source": {
   "sha256": "1e458921f8810ee6689b56c01e678b28afcaba72648241f0f9ef14583ab54993",
   "url": "https://pypi.io/packages/source/c/captum/captum-0.4.1.tar.gz"
  },
  "test": {
   "commands": [
    "pip check"
   ],
   "imports": [
    "captum",
    "captum._utils"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "name": "captum",
 "new_version": "0.5.0",
 "new_version_attempts": {
  "0.5.0": 3
 },
 "new_version_errors": {
  "0.5.0": "We found a problem parsing the recipe for version '0.5.0': \n\nDuplicateKeyError('while constructing a mapping',   in \"<unicode string>\", line 38, column 3:\n      home: https://captum.ai\n      ^ (line: 38), 'found duplicate key \"dev_url\" with value \"https://github.com/pytorch/captum\" (original value: \"https://github.com/pytorch/captum\")',   in \"<unicode string>\", line 55, column 3:\n      dev_url: https://github.com/pyto ... \n      ^ (line: 55), '\\n                    To suppress this check see:\\n                        http://yaml.readthedocs.io/en/latest/api.html#duplicate-keys\\n                    ', '                    Duplicate keys will become an error in future releases, and are errors\\n                    by default when using the new API.\\n                    ')\n\ntraceback:\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/migrators/version.py\", line 509, in migrate\n    cmeta = CondaMetaYAML(fp.read())\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/recipe_parser/_parser.py\", line 494, in __init__\n    self.meta = self._parser.load(\"\".join(lines))\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/main.py\", line 434, in load\n    return constructor.get_single_data()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 121, in get_single_data\n    return self.construct_document(node)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 131, in construct_document\n    for _dummy in generator:\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1569, in construct_yaml_map\n    self.construct_mapping(node, data, deep=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1452, in construct_mapping\n    value = self.construct_object(value_node, deep=deep)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 154, in construct_object\n    data = self.construct_non_recursive_object(node)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 196, in construct_non_recursive_object\n    for _dummy in generator:\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1569, in construct_yaml_map\n    self.construct_mapping(node, data, deep=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 1453, in construct_mapping\n    if self.check_mapping_key(node, key_node, maptyp, key, value):\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/ruamel/yaml/constructor.py\", line 294, in check_mapping_key\n    raise DuplicateKeyError(*args)\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "captum"
  ]
 },
 "raw_meta_yaml": "{% set name = \"captum\" %}\n{% set version = \"0.4.1\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/captum-{{ version }}.tar.gz\n  sha256: 1e458921f8810ee6689b56c01e678b28afcaba72648241f0f9ef14583ab54993\n\nbuild:\n  number: 1\n  noarch: python\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python >=3.6\n  run:\n    - python >=3.6\n    - matplotlib-base\n    - numpy    \n    - pytorch >=1.2\n\ntest:\n  imports:\n    - captum\n    - captum._utils\n  commands:\n    - pip check\n  requires:\n    - pip\n\nabout:\n  home: https://captum.ai\n  summary: Model interpretability for PyTorch\n  dev_url: https://github.com/pytorch/captum\n  license: BSD-3-Clause\n  license_file: LICENSE\n  description: |\n    Captum is a model interpretability and understanding library for PyTorch. \n    Captum means comprehension in Latin and contains general purpose \n    implementations of integrated gradients, saliency maps, smoothgrad, \n    vargrad and others for PyTorch models. It has quick integration for models \n    built with domain-specific libraries such as torchvision, torchtext, and others.\n\n    *Captum is currently in beta and under active development!*\n\n    PyPI: [https://pypi.org/project/captum/](https://pypi.org/project/captum/)\n\n  doc_url: https://captum.ai/\n  dev_url: https://github.com/pytorch/captum\n\nextra:\n  recipe-maintainers:\n    - sugatoray\n    # Maintainers from package repo\n    - NarineK\n    - aobo-y\n    - vivekmig\n",
 "req": {
  "__set__": true,
  "elements": [
   "matplotlib-base",
   "numpy",
   "pip",
   "python",
   "pytorch"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.6"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "matplotlib-base",
    "numpy",
    "python >=3.6",
    "pytorch >=1.2"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/captum/captum-0.4.1.tar.gz",
 "version": "0.4.1"
}