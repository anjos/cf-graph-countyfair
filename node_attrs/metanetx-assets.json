{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/369604119.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/371372480.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375414202.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.1.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/409055520.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/409306883.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513520184.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/742894242.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "metanetx-assets",
 "hash_type": "sha256",
 "name": "metanetx-assets",
 "new_version": "4.2.0",
 "new_version_attempts": {
  "0.2.0": 1,
  "0.2.1": 1,
  "4.1.0": 1,
  "4.2.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "metanetx-assets"
  ]
 },
 "pinning_version": "2021.09.26.06.24.32",
 "raw_meta_yaml": "{% set name = \"metanetx-assets\" %}\n{% set version = \"0.2.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: cb285babf4b4d12611fee05375a666fcf74117feaef6edd720b789633bad8992\n\nbuild:\n  noarch: python\n  entry_points:\n    - mnx-assets = metanetx_assets.cli.cli:cli\n  number: 0\n  script: {{ PYTHON }} -m pip install . -vv --no-deps --ignore-installed\n\nrequirements:\n  host:\n    - pip\n    - python >=3.8\n    - setuptools\n  run:\n    - click\n    - click-log\n    - cobra-component-models\n    - depinfo\n    - httpx\n    - pandas\n    - pydantic\n    - pyparsing\n    - python >=3.8\n    - SQLAlchemy\n    - tqdm\ntest:\n  imports:\n    - metanetx_assets\n    - metanetx_assets.api\n  commands:\n    - mnx-assets --help\n\nabout:\n  home: https://pypi.org/project/metanetx-assets/\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Transform [MetaNetX](https://metanetx.org) components information and load them into SQL storage.\n  description: |\n    The tabular information coming from [MetaNetX](https://metanetx.org)\n    requires particular transformations and a particular order of creating\n    information, in order to insert the information into a normalized SQL\n    database. The metanetx-assets package provides a command line interface\n    (CLI) and Python application programmers interfaces (APIs) to do so.\n  dev_url: https://github.com/Midnighter/metanetx-assets\n\nextra:\n  recipe-maintainers:\n    - Midnighter\n",
 "smithy_version": "3.12",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/m/metanetx-assets/metanetx-assets-0.2.1.tar.gz",
 "version": "0.2.1"
}