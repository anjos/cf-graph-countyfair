{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/286194142.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Rebuild",
    "migrator_version": 0,
    "name": "hdf5-1.10.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/290512666.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/328789855.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf-4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/333140926.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/339437960.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/341030156.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/353678697.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf473"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/366523297.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/379343198.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/383050519.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/384549090.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.9"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/396009973.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf474"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/401630920.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.10"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/404865122.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51106"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/472180286.json"
   },
   "data": {
    "bot_rerun": 1600812343.876809,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/479405574.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.12"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/513701847.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/520867210.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.14"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/527726489.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.15"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/553492298.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/619474596.json"
   },
   "data": {
    "bot_rerun": 1620150725.5025399,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf480"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/629845981.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/629993946.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf480"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/661168688.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/690668883.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.8.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/724124127.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "libnetcdf481"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/726007710.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/744323156.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "hdf51121"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/793084515.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "mpas_tools",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "A set of tools for creating and manipulating meshes for the climate\ncomponents based on the Model for Prediction Across Scales (MPAS) framework\n",
   "dev_url": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "doc_url": "https://github.com/MPAS-Dev/MPAS-Tools/README.md",
   "home": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Mesh tools for Model for Prediction Across Scales (MPAS)"
  },
  "build": {
   "entry_points": [
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy"
   ]
  },
  "package": {
   "name": "mpas_tools",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4"
   ],
   "run": [
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "source": {
   "sha256": "c3a2cd5a484aa7e8d217b306c8b378c2f5464e4a6a477015a7b789b49a63c07d",
   "url": "https://github.com/MPAS-Dev/MPAS-Tools/archive/0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help"
   ],
   "imports": [
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion"
   ],
   "requires": [
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip"
   ],
   "source_files": [
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "libnetcdf",
    "netcdf4",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "dask",
    "geometric_features",
    "hdf5",
    "inpoly",
    "jigsaw",
    "jigsawpy",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "requests"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "A set of tools for creating and manipulating meshes for the climate\ncomponents based on the Model for Prediction Across Scales (MPAS) framework\n",
   "dev_url": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "doc_url": "https://github.com/MPAS-Dev/MPAS-Tools/README.md",
   "home": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Mesh tools for Model for Prediction Across Scales (MPAS)"
  },
  "build": {
   "entry_points": [
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy"
   ]
  },
  "package": {
   "name": "mpas_tools",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp"
   ],
   "run": [
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "source": {
   "sha256": "c3a2cd5a484aa7e8d217b306c8b378c2f5464e4a6a477015a7b789b49a63c07d",
   "url": "https://github.com/MPAS-Dev/MPAS-Tools/archive/0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help"
   ],
   "imports": [
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion"
   ],
   "requires": [
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip"
   ],
   "source_files": [
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*"
   ]
  }
 },
 "name": "mpas_tools",
 "new_version": "0.13.0",
 "new_version_attempts": {
  "0.0.10": 1,
  "0.0.12": 1,
  "0.0.14": 1,
  "0.0.15": 1,
  "0.2.1": 1,
  "0.6.0": 1,
  "0.8.0": 1
 },
 "new_version_errors": {},
 "osx_64_meta_yaml": {
  "about": {
   "description": "A set of tools for creating and manipulating meshes for the climate\ncomponents based on the Model for Prediction Across Scales (MPAS) framework\n",
   "dev_url": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "doc_url": "https://github.com/MPAS-Dev/MPAS-Tools/README.md",
   "home": "https://github.com/MPAS-Dev/MPAS-Tools/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Mesh tools for Model for Prediction Across Scales (MPAS)"
  },
  "build": {
   "entry_points": [
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks",
    "planar_hex = mpas_tools.planar_hex:main",
    "translate_planar_grid = mpas_tools.translate:main",
    "merge_grids = mpas_tools.merge_grids:main",
    "split_grids = mpas_tools.split_grids:main",
    "inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main",
    "inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main",
    "mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main",
    "triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main",
    "jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main",
    "scrip_from_mpas = mpas_tools.scrip.from_mpas:main",
    "ocean_add_depth = mpas_tools.ocean.depth:main_add_depth",
    "ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid",
    "ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid",
    "compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks",
    "compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks",
    "compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask",
    "compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks"
   ],
   "number": "0"
  },
  "extra": {
   "recipe-maintainers": [
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy",
    "xylar",
    "jhkennedy"
   ]
  },
  "package": {
   "name": "mpas_tools",
   "version": "0.13.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp",
    "python",
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "setuptools",
    "pip",
    "netcdf4",
    "openmp"
   ],
   "run": [
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray",
    "python",
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "source": {
   "sha256": "c3a2cd5a484aa7e8d217b306c8b378c2f5464e4a6a477015a7b789b49a63c07d",
   "url": "https://github.com/MPAS-Dev/MPAS-Tools/archive/0.13.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help",
    "pip check",
    "planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c",
    "planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'",
    "translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'",
    "MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc",
    "MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'",
    "MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc",
    "python -m pytest conda_package/mpas_tools/tests",
    "mark_horns_for_culling.py --help",
    "set_lat_lon_fields_in_planar_grid.py --help",
    "create_SCRIP_file_from_MPAS_mesh.py --help",
    "create_landice_grid_from_generic_MPAS_grid.py --help",
    "create_SCRIP_file_from_planar_rectangular_grid.py --help",
    "define_cullMask.py --help",
    "interpolate_to_mpasli_grid.py --help",
    "mark_domain_boundaries_dirichlet.py --help",
    "add_land_locked_cells_to_mask.py --help",
    "moc_southern_boundary_extractor.py --help",
    "ocean_add_depth --help",
    "ocean_add_zmid --help",
    "ocean_write_time_varying_zmid --help",
    "widen_transect_edge_masks.py --help",
    "add_critical_land_blockages_to_mask.py --help",
    "paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test",
    "split_grids --help",
    "merge_grids --help",
    "inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "inject_preserve_floodplain --help",
    "mpas_to_triangle --help",
    "triangle_to_netcdf --help",
    "jigsaw_to_netcdf --help",
    "scrip_from_mpas --help",
    "compute_mpas_region_masks --help",
    "compute_mpas_transect_masks --help",
    "compute_mpas_flood_fill_mask --help",
    "compute_lon_lat_region_masks --help"
   ],
   "imports": [
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion",
    "mpas_tools",
    "mpas_tools.mesh.conversion",
    "mpas_tools.mesh.creation",
    "mpas_tools.viz",
    "mpas_tools.conversion"
   ],
   "requires": [
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip",
    "pytest",
    "requests",
    "pip"
   ],
   "source_files": [
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*",
    "mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson",
    "mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc",
    "mesh_tools/mesh_conversion_tools/test/land_mask_final.nc",
    "conda_package/mpas_tools/tests/*"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "libnetcdf",
    "netcdf4",
    "openmp",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "dask",
    "geometric_features",
    "hdf5",
    "inpoly",
    "jigsaw",
    "jigsawpy",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "requests"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "mpas_tools"
  ]
 },
 "pinning_version": "2021.12.01.14.57.30",
 "pre_pr_migrator_attempts": {
  "libnetcdf480": 1
 },
 "pre_pr_migrator_status": {
  "libnetcdf480": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/767240605\">bot CI job</a>): master: ['linux_64_python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'linux_64_python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'linux_64_python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'linux_64_python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'osx_64_python3.6.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'osx_64_python3.7.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'osx_64_python3.8.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n', 'osx_64_python3.9.____cpython: Encountered problems while solving:\\n  - nothing provides geos 3.5.* needed by cartopy-0.14.3-np110py27_4\\n']"
 },
 "raw_meta_yaml": "{% set name = \"mpas_tools\" %}\n{% set version = \"0.13.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/MPAS-Dev/MPAS-Tools/archive/{{ version }}.tar.gz\n  sha256: c3a2cd5a484aa7e8d217b306c8b378c2f5464e4a6a477015a7b789b49a63c07d\n\nbuild:\n  number: 0\n  skip: true  # [win]\n  entry_points:\n    - planar_hex = mpas_tools.planar_hex:main\n    - translate_planar_grid = mpas_tools.translate:main\n    - merge_grids = mpas_tools.merge_grids:main\n    - split_grids = mpas_tools.split_grids:main\n    - inject_bathymetry = mpas_tools.ocean.inject_bathymetry:main\n    - inject_preserve_floodplain = mpas_tools.ocean.inject_preserve_floodplain:main\n    - mpas_to_triangle = mpas_tools.mesh.creation.mpas_to_triangle:main\n    - triangle_to_netcdf = mpas_tools.mesh.creation.triangle_to_netcdf:main\n    - jigsaw_to_netcdf = mpas_tools.mesh.creation.jigsaw_to_netcdf:main\n    - scrip_from_mpas = mpas_tools.scrip.from_mpas:main\n    - ocean_add_depth = mpas_tools.ocean.depth:main_add_depth\n    - ocean_add_zmid = mpas_tools.ocean.depth:main_add_zmid\n    - ocean_write_time_varying_zmid = mpas_tools.ocean.depth:main_write_time_varying_zmid\n    - compute_mpas_region_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_region_masks\n    - compute_mpas_transect_masks = mpas_tools.mesh.mask:entry_point_compute_mpas_transect_masks\n    - compute_mpas_flood_fill_mask = mpas_tools.mesh.mask:entry_point_compute_mpas_flood_fill_mask\n    - compute_lon_lat_region_masks = mpas_tools.mesh.mask:entry_point_compute_lon_lat_region_masks\n\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make\n  host:\n    - python\n    - hdf5\n    - hdf5 * nompi_*\n    - libnetcdf\n    - libnetcdf * nompi_*\n    - setuptools\n    - pip\n    - netcdf4\n    - openmp  # [osx]\n  run:\n    - python\n    - cartopy\n    - dask\n    - geometric_features >=0.1.12\n    - hdf5\n    - inpoly\n    - jigsaw >=0.9.12\n    - jigsawpy >=0.2.1\n    - libnetcdf\n    - matplotlib-base\n    - netcdf4\n    - numpy\n    - progressbar2\n    - pyamg\n    - pyevtk\n    - pyproj\n    - python-igraph\n    - scikit-image\n    - scipy\n    - shapely\n    - xarray\n\ntest:\n  requires:\n    - pytest\n    - requests\n    - pip\n  source_files:\n    - mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson\n    - mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc\n    - mesh_tools/mesh_conversion_tools/test/land_mask_final.nc\n    - conda_package/mpas_tools/tests/*\n  imports:\n    - mpas_tools\n    - mpas_tools.mesh.conversion\n    - mpas_tools.mesh.creation\n    - mpas_tools.viz\n    - mpas_tools.conversion\n  commands:\n    - pip check\n    - planar_hex --nx=10 --ny=20 --dc=1000. --outFileName='periodic_mesh_10x20_1km.nc'\n    - translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -x 1000. -y 2000.\n    - translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -c\n    - planar_hex --nx=20 --ny=40 --dc=1000. --outFileName='periodic_mesh_20x40_1km.nc'\n    - translate_planar_grid -f 'periodic_mesh_10x20_1km.nc' -d 'periodic_mesh_20x40_1km.nc'\n    - MpasMeshConverter.x mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc mesh.nc\n    - MpasCellCuller.x mesh.nc culled_mesh.nc -m mesh_tools/mesh_conversion_tools/test/land_mask_final.nc\n    - MpasMaskCreator.x mesh.nc arctic_mask.nc -f mesh_tools/mesh_conversion_tools/test/Arctic_Ocean.geojson\n    - planar_hex --nx=30 --ny=20 --dc=1000. --npx --npy --outFileName='nonperiodic_mesh_30x20_1km.nc'\n    - MpasCellCuller.x nonperiodic_mesh_30x20_1km.nc culled_nonperiodic_mesh_30x20_1km.nc\n    - python -m pytest conda_package/mpas_tools/tests\n    - mark_horns_for_culling.py --help\n    - set_lat_lon_fields_in_planar_grid.py --help\n    - create_SCRIP_file_from_MPAS_mesh.py --help\n    - create_landice_grid_from_generic_MPAS_grid.py --help\n    - create_SCRIP_file_from_planar_rectangular_grid.py --help\n    - define_cullMask.py --help\n    - interpolate_to_mpasli_grid.py --help\n    - mark_domain_boundaries_dirichlet.py --help\n    - add_land_locked_cells_to_mask.py --help\n    - moc_southern_boundary_extractor.py --help\n    - ocean_add_depth --help\n    - ocean_add_zmid --help\n    - ocean_write_time_varying_zmid --help\n    - widen_transect_edge_masks.py --help\n    - add_critical_land_blockages_to_mask.py --help\n    - paraview_vtk_field_extractor.py -f mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc -v latCell,lonCell --ignore_time -o vtk_test\n    - split_grids --help\n    - merge_grids --help\n    - inject_bathymetry mesh_tools/mesh_conversion_tools/test/mesh.QU.1920km.151026.nc\n    - inject_preserve_floodplain --help\n    - mpas_to_triangle --help\n    - triangle_to_netcdf --help\n    - jigsaw_to_netcdf --help\n    - scrip_from_mpas --help\n    - compute_mpas_region_masks --help\n    - compute_mpas_transect_masks --help\n    - compute_mpas_flood_fill_mask --help\n    - compute_lon_lat_region_masks --help\n\nabout:\n  home: https://github.com/MPAS-Dev/MPAS-Tools/\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: Mesh tools for Model for Prediction Across Scales (MPAS)\n  description: |\n    A set of tools for creating and manipulating meshes for the climate\n    components based on the Model for Prediction Across Scales (MPAS) framework\n  doc_url: https://github.com/MPAS-Dev/MPAS-Tools/README.md\n  dev_url: https://github.com/MPAS-Dev/MPAS-Tools/\n\nextra:\n  recipe-maintainers:\n    - xylar\n    - jhkennedy\n",
 "req": {
  "__set__": true,
  "elements": [
   "cartopy",
   "cmake",
   "cxx_compiler_stub",
   "dask",
   "geometric_features",
   "hdf5",
   "inpoly",
   "jigsaw",
   "jigsawpy",
   "libnetcdf",
   "make",
   "matplotlib-base",
   "netcdf4",
   "numpy",
   "openmp",
   "pip",
   "progressbar2",
   "pyamg",
   "pyevtk",
   "pyproj",
   "python",
   "python-igraph",
   "scikit-image",
   "scipy",
   "setuptools",
   "shapely",
   "xarray"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "hdf5",
    "libnetcdf",
    "netcdf4",
    "openmp",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "cxx_compiler_stub",
    "dask",
    "geometric_features",
    "hdf5",
    "inpoly",
    "jigsaw",
    "jigsawpy",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "openmp",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "requests"
   ]
  }
 },
 "smithy_version": "3.15.0",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "hdf5",
    "hdf5 * nompi_*",
    "libnetcdf",
    "libnetcdf * nompi_*",
    "netcdf4",
    "openmp",
    "pip",
    "python",
    "setuptools"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cartopy",
    "dask",
    "geometric_features >=0.1.12",
    "hdf5",
    "inpoly",
    "jigsaw >=0.9.12",
    "jigsawpy >=0.2.1",
    "libnetcdf",
    "matplotlib-base",
    "netcdf4",
    "numpy",
    "progressbar2",
    "pyamg",
    "pyevtk",
    "pyproj",
    "python",
    "python-igraph",
    "scikit-image",
    "scipy",
    "shapely",
    "xarray"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip",
    "pytest",
    "requests"
   ]
  }
 },
 "url": "https://github.com/MPAS-Dev/MPAS-Tools/archive/0.13.0.tar.gz",
 "version": "0.13.0"
}