{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/277498846.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "symopt",
 "hash_type": "sha256",
 "name": "symopt",
 "new_version": "0.2.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "symopt"
  ]
 },
 "pinning_version": "2019.05.06",
 "raw_meta_yaml": "{% set name = \"symopt\" %}\n{% set version = \"0.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/spcornelius/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: af1d64868cd56c727c3397559366617c673d5d35f6459be18df50607957605a9\n\nbuild:\n  noarch: python\n  number: 0\n  script: python -m pip install . --no-deps -vv\n\nrequirements:\n  build:\n    - python >=3.6\n    - setuptools\n    - pip\n  run:\n    - python >=3.6\n    - numpy\n    - sympy\n    - scipy\n    - cyipopt\n    - orderedset\n\ntest:\n  imports:\n    - {{ name }}\n  requires:\n    - pytest\n    - {{ compiler('fortran') }}\n\nabout:\n  home: https://github.com/spcornelius/{{ name }}\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  doc_url: https://{{ name }}.readthedocs.io/en/v{{ version }}\n  dev_url: https://github.com/spcornelius/{{ name }}\n  summary: 'Easy (non)linear optimization in Python with symbolically-defined objectives/constraints'\n  description: |\n    symopt makes it easy to define and solve (non)linear constrained optimization problems in Python.\n    It uses the power of SymPy to automate the error-prone and time-consuming task of writing\n    functions to evaluate an optimization problem's objective function and nonlinear constraints\n    (to say nothing of their first and second derivatives!). symopt then provides a standardized\n    interface to solve the problem through nonlinear optimization backends including\n    SciPy and Ipopt.\nextra:\n  recipe-maintainers:\n    - spcornelius\n",
 "smithy_version": "3.3.4",
 "strong_exports": false,
 "url": "https://github.com/spcornelius/symopt/archive/v0.2.0.tar.gz",
 "version": "0.2.0"
}