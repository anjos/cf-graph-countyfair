{
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "msmpi",
 "hash_type": "sha256",
 "name": "msmpi",
 "new_version": "10.1.1",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "msmpi"
  ]
 },
 "raw_meta_yaml": "{% set name = \"msmpi\" %}\n{% set version = \"10.1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/microsoft/Microsoft-MPI/archive/v{{ version }}.tar.gz\n  sha256: 63c7da941fc4ffb05a0f97bd54a67968c71f63389a0d162d3182eabba1beab3d\n  patches:\n    - conda-build.patch\n\nbuild:\n  number: 7\n  skip: true  # [not win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('c') }}\n    - {{ compiler('m2w64_fortran') }}\n  run:\n    - mpi 1.0 msmpi\n\ntest:\n  files:\n    - tests/*  # [win]\n  requires:\n    - {{ compiler('c') }}\n    # These deps are needed for the mpi4py tests\n    # - python\n    # - pip\n    # - cython\n    # - setuptools\n    # - git\n  commands:\n    # simple package integraty check\n    - if not exist %LIBRARY_BIN%\\\\mpiexec.exe exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\\\smpd.exe exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\\\msmpi.dll exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\\\mpi.f90 exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\\\mpi.h exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\\\msmpi.lib exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\\\mpifort.lib exit 1  # [win]\n    - if not %MSMPI_BIN% == %LIBRARY_BIN% exit 1  # [win]\n    - if not %MSMPI_INC% == %LIBRARY_INC% exit 1  # [win]\n    - if not %MSMPI_LIB64% == %LIBRARY_LIB% exit 1  # [win]\n\n    # check if binaries work ok\n    - where mpiexec.exe\n    - where smpd.exe\n    \n    - mpiexec.exe /help2\n    - mpiexec.exe /help3\n\n    # This works! Just comment out to save time...\n    ## test compiling + linking + execution\n    #- git clone https://github.com/mpi4py/mpi4py.git\n    #- cd mpi4py\n    #- pip install --no-build-isolation --no-deps -v .\n    #- cd ..\n    #- python -c \"from mpi4py import MPI; print(MPI.Get_library_version())\"\n    #- mpiexec -n 2 python -m mpi4py.bench helloworld\n    #- mpiexec -n 2 python -m mpi4py.bench ringtest\n\n    # check if MSMPI_VER is correctly patched\n    - cl.exe -I%LIBRARY_INC% tests\\\\get_mpi_ver.c /Fe\"%cd%\\get_mpi_ver.exe\"\n    - for /f \"tokens=* usebackq\" %%f in (`get_mpi_ver`) do (set \"mpi_ver=%%f\")\n    # TODO(leofang): we could compute this, yes, but don't bother as MS-MPI is not evolving...\n    - if not %mpi_ver% == 2561 exit 1  # [win]  # for MS-MPI v10.1.x\n\n    # check compiling & running simple C code\n    # TODO(leofang): add C++ & Fortran tests?\n    - cl.exe -I%LIBRARY_INC% tests\\\\helloworld.c /Fe\"%cd%\\helloworld.exe\" /link /LIBPATH:\"%LIBRARY_LIB%\" msmpi.lib\n    - mpiexec.exe -n 4 helloworld.exe\n\nabout:\n  home: https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi\n  license: MIT\n  license_file: LICENSE.txt\n  summary: Microsoft message-passing-interface (MS-MPI)\n  description: |\n    Microsoft MPI (MS-MPI) is a Microsoft implementation of the Message Passing\n    Interface standard for developing and running parallel applications on the\n    Windows platform.\n  doc_url: https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi\n  dev_url: https://github.com/microsoft/Microsoft-MPI\n\nextra:\n  recipe-maintainers:\n    - RyanMcCarthy-NOAA\n    - isuruf\n",
 "strong_exports": false,
 "url": "https://github.com/microsoft/Microsoft-MPI/archive/v10.1.1.tar.gz",
 "version": "10.1.1"
}