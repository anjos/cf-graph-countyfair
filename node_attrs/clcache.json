{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/213565668.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "4.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/217483229.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/335627540.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/391784392.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/502196190.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/bc4a3f7b-23ad-4780-9f17-ed4288eff92a.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "clcache",
 "hash_type": "sha256",
 "meta_yaml": {
  "about": {
   "description": "clcache.py is a little Python script which attempts to avoid unnecessary\nrecompilation by reusing previously cached object files if possible.\nIt is meant to be called instead of the original 'cl.exe' executable.\nThe script analyses the command line to decide whether source code is to be compiled.\nIf so, a cache will be queried for a previously stored object file.\n\nIf the script is called in an unsupported way (e.g. if the compiler is called for linking),\nthe script will simply relay the invocation to the real 'cl.exe' program.\n",
   "home": "https://github.com/frerich/clcache",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "a compiler cache for Microsoft Visual Studio"
  },
  "build": {
   "entry_points": [
    "clcache = clcache.__main__:main",
    "clcache-server = clcache.server.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "edisongustavo",
    "tadeu",
    "nicoddemus",
    "xhochy"
   ]
  },
  "package": {
   "name": "clcache",
   "version": "4.2.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "setuptools_scm"
   ],
   "run": [
    "python",
    "pymemcache",
    "pyuv"
   ]
  },
  "source": {
   "sha256": "41bcc460098463dfaf3b2b6c5f1db91548bb1d5f4243bed3bcbb9740a579246c",
   "url": "https://pypi.io/packages/source/c/clcache/clcache-4.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "clcache --help",
    "clcache-server --help"
   ],
   "imports": [
    "clcache",
    "clcache.server"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "name": "clcache",
 "new_version": "4.2.0",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "clcache"
  ]
 },
 "pinning_version": "2021.01.10.01.07.36",
 "pre_pr_migrator_attempts": {
  "pypy38": 3,
  "python311": 13
 },
 "pre_pr_migrator_status": {
  "pypy38": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3939502846\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "python311": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3944905044\">bot CI job</a>): main: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1166, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 279, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 340, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 460, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n"
 },
 "raw_meta_yaml": "{% set name = \"clcache\" %}\n{% set version = \"4.2.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/clcache-{{ version }}.tar.gz\n  sha256: 41bcc460098463dfaf3b2b6c5f1db91548bb1d5f4243bed3bcbb9740a579246c\n\nbuild:\n  number: 0\n  skip: true  # [not win]\n  entry_points:\n    - clcache = clcache.__main__:main\n    - clcache-server = clcache.server.__main__:main\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - python\n    - pip\n    - setuptools_scm\n  run:\n    - python\n    - pymemcache\n    - pyuv\n\ntest:\n  imports:\n    - clcache\n    - clcache.server\n  commands:\n    - pip check\n    - clcache --help\n    - clcache-server --help\n  requires:\n    - pip\n\nabout:\n  home: https://github.com/frerich/clcache\n  license: BSD-3-Clause\n  license_file: LICENSE\n  summary: 'a compiler cache for Microsoft Visual Studio'\n\n  description: |\n    clcache.py is a little Python script which attempts to avoid unnecessary\n    recompilation by reusing previously cached object files if possible.\n    It is meant to be called instead of the original 'cl.exe' executable.\n    The script analyses the command line to decide whether source code is to be compiled.\n    If so, a cache will be queried for a previously stored object file.\n\n    If the script is called in an unsupported way (e.g. if the compiler is called for linking),\n    the script will simply relay the invocation to the real 'cl.exe' program.\n\nextra:\n  recipe-maintainers:\n    - edisongustavo\n    - tadeu\n    - nicoddemus\n    - xhochy\n",
 "req": {
  "__set__": true,
  "elements": [
   "pip",
   "pymemcache",
   "python",
   "pyuv",
   "setuptools_scm"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "pymemcache",
    "python",
    "pyuv"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.8.6",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "pymemcache",
    "python",
    "pyuv"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/c/clcache/clcache-4.2.0.tar.gz",
 "version": "4.2.0",
 "win_64_meta_yaml": {
  "about": {
   "description": "clcache.py is a little Python script which attempts to avoid unnecessary\nrecompilation by reusing previously cached object files if possible.\nIt is meant to be called instead of the original 'cl.exe' executable.\nThe script analyses the command line to decide whether source code is to be compiled.\nIf so, a cache will be queried for a previously stored object file.\n\nIf the script is called in an unsupported way (e.g. if the compiler is called for linking),\nthe script will simply relay the invocation to the real 'cl.exe' program.\n",
   "home": "https://github.com/frerich/clcache",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE",
   "summary": "a compiler cache for Microsoft Visual Studio"
  },
  "build": {
   "entry_points": [
    "clcache = clcache.__main__:main",
    "clcache-server = clcache.server.__main__:main"
   ],
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/python.exe -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "edisongustavo",
    "tadeu",
    "nicoddemus",
    "xhochy"
   ]
  },
  "package": {
   "name": "clcache",
   "version": "4.2.0"
  },
  "requirements": {
   "host": [
    "python",
    "pip",
    "setuptools_scm"
   ],
   "run": [
    "python",
    "pymemcache",
    "pyuv"
   ]
  },
  "source": {
   "sha256": "41bcc460098463dfaf3b2b6c5f1db91548bb1d5f4243bed3bcbb9740a579246c",
   "url": "https://pypi.io/packages/source/c/clcache/clcache-4.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "clcache --help",
    "clcache-server --help"
   ],
   "imports": [
    "clcache",
    "clcache.server"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python",
    "setuptools_scm"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "pymemcache",
    "python",
    "pyuv"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 }
}