{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/604570022.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "glidertools",
 "hash_type": "sha256",
 "name": "glidertools",
 "new_version": "2021.3",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "glidertools"
  ]
 },
 "pinning_version": "2021.03.29.15.45.30",
 "raw_meta_yaml": "{% set name = \"glidertools\" %}\n{% set version = \"2021.3\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: a96e3e3b9380c47b0b8a7e37d934a0023bc07799b78b0df08d0f823456565d2b\n\nbuild:\n  noarch: python\n  number: 1\n  script: \"{{ PYTHON }} -m pip install . -vv\"\n\nrequirements:\n  host:\n    - python >=3.7\n    - pip\n    - pytest-runner\n    - setuptools_scm\n  run:\n    - python >=3.7\n    - skyfield\n    - numexpr\n    - netcdf4 ==1.5.4\n    - scikit-learn >=0.22\n    - seawater >=3.3\n    - tqdm >=4\n    - xarray >=0.16.0\n    - matplotlib-base\n\ntest:\n  imports:\n    - glidertools\n\nabout:\n  home: https://github.com/GliderToolsCommunity/GliderTools\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  summary: \"A toolkit for processing Seaglider base station NetCDF files: despiking, smoothing, outlier detection, backscatter, fluorescence quenching, calibration, gridding, interpolation.\"\n\n  description: |\n    Glider tools is a Python 3.7 package designed to process data from the first level\n    of processing to a science ready dataset. The package is designed to easily import\n    data to a standard column format (numpy.ndarray or pandas.DataFrame).\n    Cleaning and smoothing functions are flexible and can be applied as required by the\n    user. We provide examples and demonstrate best practices as developed by the SOCCO Group \n  dev_url: https://github.com/GliderToolsCommunity/GliderTools\n\nextra:\n  recipe-maintainers:\n    - jbusecke\n    - callumrollo\n",
 "smithy_version": "3.9.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/g/glidertools/glidertools-2021.3.tar.gz",
 "version": "2021.3"
}