{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/690372625.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.2.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/692090688.json"
   },
   "data": {
    "bot_rerun": 1626626852.80673,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.2.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/692200299.json"
   },
   "data": {
    "bot_rerun": 1626675440.7629516,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/692219822.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/692220610.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda110"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/692313335.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "cuda111_112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/957432639.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "timemory",
 "hash_type": "sha256",
 "name": "timemory",
 "new_version": "3.2.3",
 "new_version_attempts": {
  "3.2.2": 1,
  "3.2.3": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "timemory"
  ]
 },
 "pinning_version": "2022.06.02.23.44.30",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set name = \"timemory\" %}\n{% set version = \"3.2.3\" %}\n{% set build = 4 %}\n\n{% set generator = \"Unix Makefiles\" %}    # [not win]\n{% set generator = \"NMake Makefiles\" %}   # [win]\n\n{% set cmake_args = \"-DCMAKE_CUDA_STANDARD=14\" %}   # [cuda_compiler_version != \"None\"]\n{% set cmake_args = \"\" %}                           # [cuda_compiler_version == \"None\"]\n\n{% set generator_args = \"-j2\" %}  # [osx]\n{% set generator_args = \"-j1\" %}  # [linux]\n{% set generator_args = \"\" %}     # [win]\n\n{% set cxx_standard = \"17\" %}     # [not osx and cuda_compiler_version == \"None\"]\n{% set cxx_standard = \"14\" %}     # [osx or cuda_compiler_version != \"None\"]\n\n# Set MPI related variables\n{% if mpi != \"nompi\" %}\n  {% set mpi_build_prefix = \"_\" + mpi|string %}\n  {% set mpi_args = \"--enable-mpi\" %}\n  {% set build = build + 100 %}\n{% else %}\n  {% set mpi_build_prefix = \"\" %}\n  {% set mpi_args = \"--disable-mpi\" %}\n{% endif %}\n\n# Set CUDA related variables\n{% if cuda_compiler_version != \"None\" %}\n  {% set cuda_build_prefix = \"_cuda\" + cuda_compiler_version|string %}\n  {% set cuda_args = \"--enable-cuda --enable-nccl\" %}\n  {% set build = build + 1000 %}\n{% else %}\n  {% set cuda_build_prefix = \"\" %}\n  {% set cuda_args = \"--disable-cuda --disable-nccl\" %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 2335961755a304bfc33a8d2427161c13f9592f87ae7a7ae8c901ca41c0127504\n\nbuild:\n  number: {{ build }}\n  string: \"py{{ py }}{{ mpi_build_prefix }}{{ cuda_build_prefix }}h{{ PKG_HASH }}_{{ build }}\"\n  script: \"{{ PYTHON }} setup.py install --single-version-externally-managed --record record.txt \\\n    -G \\\"{{ generator }}\\\" \\\n    --cxx-standard={{ cxx_standard }} \\\n    --enable-portable \\\n    --enable-shared-libs \\\n    {{ cuda_args }} \\\n    {{ mpi_args }} \\\n    --disable-c \\\n    --disable-fortran \\\n    --disable-ert \\\n    --disable-develop \\\n    --disable-static-libs \\\n    --disable-unity-build \\\n    --disable-require-packages \\\n    --disable-ompt \\\n    --disable-cupti \\\n    --disable-upcxx \\\n    --disable-kokkos \\\n    --disable-caliper \\\n    --disable-dyninst \\\n    --disable-gperftools \\\n    --disable-compiler-instrumentation \\\n    --disable-install-rpath-use-link-path \\\n    --skip-generator-test \\\n    -- {{ cmake_args }} \\\n       -DCMAKE_VERBOSE_MAKEFILE=ON \\\n    -- {{ generator_args }}\"\n  skip: true                  # [(x86 and not x86_64) or (osx and py==36)]\n  skip: true  # [win and cuda_compiler_version != \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n    - {{ compiler(\"cuda\") }}  # [linux and cuda_compiler_version != \"None\"]\n    - cmake\n  host:\n    - python\n    - pip\n    - cython\n    - pybind11\n    - pybind11-abi\n    - scikit-build\n    - nccl                    # [linux and cuda_compiler_version != \"None\"]\n    - {{ mpi }}               # [linux and mpi != \"nompi\"]\n  run:\n    - python\n    - six\n    - numpy\n    - pydot\n    - pillow\n    - pandas\n    - matplotlib-base\n    - multiprocess\n    - IPython >=0.13\n    - {{ mpi }}               # [linux and mpi != \"nompi\"]\n\ntest:\n  imports:\n    - timemory\n    - timemory.settings\n    - timemory.profiler\n    - timemory.trace\n    - timemory.util\n  requires:\n    - pytest                  # [linux]\n    - pytest-timeout          # [linux]\n    - mpi4py                  # [linux and mpi != \"nompi\" and mpi != \"openmpi\"]\n  source_files:\n    - timemory/test/*\n  commands:\n    - timemory-python-line-profiler -h\n    - timemory-python-profiler -h\n    - timemory-python-trace -h\n    - timemory-roofline -h\n    - timemory-analyze -h\n    - timemory-plotter -h\n    - timemory-avail -a\n    - timem -h                                                        # [not win]\n    - pytest --timeout=300 --pyargs timemory -k \"not test_mallocp\"    # [linux]\n    # skip pytest for windows and osx. Tend to have spurious failures due to other builds\n\nabout:\n  home: https://github.com/NERSC/timemory\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Lightweight performance analysis toolkit and suite of tools\n  description: |\n    Lightweight, cross-language utility for recording timing, memory, resource usage, and hardware counters on the CPU and GPU.\n    Timemory provides 40+ metrics for C, C++, CUDA, and/or Python codes that can arbitrarily composed into distinct toolsets\n    which can inter-weaved and without nesting restrictions.\n  doc_url: https://timemory.readthedocs.io/\n  dev_url: https://github.com/NERSC/timemory\n\nextra:\n  recipe-maintainers:\n    - jrmadsen\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/t/timemory/timemory-3.2.3.tar.gz",
 "version": "3.2.3"
}