{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.3.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/198504713.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Compiler",
    "migrator_version": 0
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/211480326.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/305206980.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/308176180.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "GFortranOSXRebuild",
    "migrator_version": 0,
    "name": "fortran_compiler_stub-7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/501014499.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "gcc930"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/525028157.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/734734884.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.3.10"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default",
   "win": "azure"
  }
 },
 "feedstock_name": "fftw",
 "hash_type": "sha256",
 "name": "fftw-split",
 "new_version": "3.3.10",
 "new_version_attempts": {
  "3.3.10": 1,
  "3.3.9": 280
 },
 "new_version_errors": {
  "3.3.9": "We found a problem parsing the recipe: \n\nwhile parsing a block collection\n  in \"<unicode string>\", line 70, column 5:\n        - |                              ... \n        ^ (line: 70)\nexpected <block end>, but found '<scalar>'\n  in \"<unicode string>\", line 90, column 13:\n                \"libfftw3\",\n                ^ (line: 90)"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "fftw",
   "fftw-static"
  ]
 },
 "pinning_version": "2021.09.15.06.06.59",
 "pre_pr_migrator_attempts": {
  "openmpi41": 1
 },
 "pre_pr_migrator_status": {
  "openmpi41": "not solvable: master: ['osx_arm64_mpimpich: Encountered problems while solving.\\nProblem: nothing provides requested libgfortran5 >=11.0.0.dev0\\n', 'osx_arm64_mpinompi: Encountered problems while solving.\\nProblem: nothing provides requested libgfortran5 >=11.0.0.dev0\\n', 'osx_arm64_mpiopenmpi: Encountered problems while solving.\\nProblem: nothing provides requested libgfortran5 >=11.0.0.dev0\\n']"
 },
 "raw_meta_yaml": "{% set version = \"3.3.10\" %}\n{% set build = 6 %}\n\n\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n# prioritize nompi variant via build number\n{% if mpi == 'nompi' %}\n{% set build = build + 100 %}\n{% endif %}\n\n# add build string so packages can depend on\n# mpi or nompi variants explicitly:\n# `pkg * mpi_mpich_*` for mpich\n# `pkg * mpi_*` for any mpi\n# `pkg * nompi_*` for no mpi\n{% if mpi != 'nompi' %}\n{% set mpi_prefix = \"mpi_\" + mpi %}\n{% else %}\n{% set mpi_prefix = \"nompi\" %}\n{% endif %}\n\npackage:\n  name: fftw-split\n  version: {{ version }}\n\nsource:\n  url: http://www.fftw.org/fftw-{{ version }}.tar.gz\n  sha256: 56c932549852cddcfafdab3820b0200c7742675be92179e59e6215b340e26467\n\nbuild:\n  number: {{ build }}\n\noutputs:\n  - name: fftw\n    script: build_fftw.sh   # [unix]\n    script: bld_fftw.bat  # [win]\n    build:\n      string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n\n      run_exports:\n        - {{ pin_subpackage('fftw', max_pin='x') }}\n      {% if mpi != 'nompi' %}\n        - fftw * {{ mpi_prefix }}_*\n      {% endif %}\n\n    requirements:\n      build:\n        - perl 5.*  # [not win]\n        - cmake\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}  # [not win]\n        - llvm-openmp  # [osx]\n        - make      # [unix]\n        - autoconf  # [unix]\n        - automake  # [unix]\n        - gettext   # [unix]\n        - m4        # [unix]\n        - libtool   # [unix]\n        - {{ mpi }}  # [build_platform != target_platform and mpi == 'openmpi']\n      host:\n        - {{ mpi }}  # [mpi != 'nompi']\n        - llvm-openmp  # [osx]\n      run:\n        - llvm-openmp  # [osx]\n\n    test:\n      files:                      # [not win]\n        - test_cmake.sh           # [not win]\n        - test_cmake/*            # [not win]\n      requires:\n        - python >=3\n        - cmake                   # [not win]\n        - make                    # [not win]\n        - {{ compiler('c') }}     # [not win]\n        - {{ compiler('cxx') }}   # [not win]\n\n      commands:\n        # Verify that static library files aren't present yet\n        - test ! -f ${PREFIX}/lib/libfftw3f.a                     # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3.a                      # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3l.a                     # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3f_threads.a             # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3_threads.a              # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3l_threads.a             # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3f_omp.a                 # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3_omp.a                  # [not win]\n        - test ! -f ${PREFIX}/lib/libfftw3l_omp.a                 # [not win]\n\n        # Verify headers are installed\n        - test -f ${PREFIX}/include/fftw3.h                     # [not win]\n        - if not exist %LIBRARY_INC%\\\\fftw3.h exit 1            # [win]\n\n        # Verify shared libraries are installed\n        {% set fftw_libs = [\n                \"libfftw3\",\n                \"libfftw3_threads\",\n                \"libfftw3f\",\n                \"libfftw3f_threads\",\n                \"libfftw3l\",\n                \"libfftw3l_threads\",\n        ] %}\n        {% set fftw_omp_libs = [\n                \"libfftw3_omp\",\n                \"libfftw3f_omp\",\n                \"libfftw3l_omp\",\n        ] %}\n        {% set fftw_mpi_libs = [\n                \"libfftw3_mpi\",\n                \"libfftw3f_mpi\",\n                \"libfftw3l_mpi\",\n        ] %}\n\n        {% for lib in fftw_libs %}\n        - python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/{{ lib }}${SHLIB_EXT}']\"  # [unix]\n        {% endfor %}\n\n        {% for lib in fftw_omp_libs %}\n        - python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/{{ lib }}${SHLIB_EXT}']\"  # [unix]\n        {% endfor %}\n\n        {% if mpi != 'nompi' %}\n        {% for lib in fftw_mpi_libs %}\n        # you need to link to the mpi libs to load the dll, so we just test\n        # if it exists\n        - test -f ${PREFIX}/lib/{{ lib }}${SHLIB_EXT} || exit 1  # [unix]\n        {% endfor %}\n        {% endif %}\n\n        {% set fftw_libs = [\"fftw3f\", \"fftw3\"] %}\n\n        {% for base in fftw_libs %}\n        - if not exist %LIBRARY_LIB%\\\\{{ base }}.lib exit 1  # [win]\n        - if not exist %LIBRARY_BIN%\\\\{{ base }}.dll exit 1  # [win]\n        {% endfor %}\n\n        # verify cmake builds\n        - bash test_cmake.sh    # [not win]\n\n  - name: fftw-static\n    script: build_fftw.sh     # [unix]\n    build:\n      skip: true           # [win]\n      string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n    requirements:\n      build:\n        - perl 5.*  # [not win]\n        - cmake\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}  # [not win]\n        - llvm-openmp  # [osx]\n        - make      # [unix]\n        - autoconf  # [unix]\n        - automake  # [unix]\n        - gettext   # [unix]\n        - m4        # [unix]\n        - libtool   # [unix]\n        - {{ mpi }}  # [build_platform != target_platform and mpi == 'openmpi']\n      host:\n        - {{ mpi }}  # [mpi != 'nompi']\n        - llvm-openmp  # [osx]\n        - {{ pin_subpackage('fftw', exact=True) }}\n      run:\n        - llvm-openmp  # [osx]\n        - {{ pin_subpackage('fftw', exact=True) }}\n\n    test:\n      commands:\n        # Verify library contains Fortran symbols\n        - strings ${PREFIX}/lib/libfftw3.a | grep -q dfftw      # [not win]\n\n        # Verify existence of static library files\n        - test -f ${PREFIX}/lib/libfftw3f.a                     # [not win]\n        - test -f ${PREFIX}/lib/libfftw3.a                      # [not win]\n        - test -f ${PREFIX}/lib/libfftw3l.a                     # [not win]\n        - test -f ${PREFIX}/lib/libfftw3f_threads.a             # [not win]\n        - test -f ${PREFIX}/lib/libfftw3_threads.a              # [not win]\n        - test -f ${PREFIX}/lib/libfftw3l_threads.a             # [not win]\n        - test -f ${PREFIX}/lib/libfftw3f_omp.a                 # [not win]\n        - test -f ${PREFIX}/lib/libfftw3_omp.a                  # [not win]\n        - test -f ${PREFIX}/lib/libfftw3l_omp.a                 # [not win]\n\nabout:\n  home: http://fftw.org\n  license: GPL-2.0-or-later\n  license_file: COPYING\n  summary: The fastest Fourier transform in the west.\n\n  dev_url: https://github.com/FFTW/fftw3\n\nextra:\n  recipe-maintainers:\n    - alexbw\n    - jakirkham\n    - grlee77\n    - jschueller\n    - egpbos\n",
 "smithy_version": "3.12",
 "strong_exports": false,
 "url": "http://www.fftw.org/fftw-3.3.10.tar.gz",
 "version": "3.3.10"
}