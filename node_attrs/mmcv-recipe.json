{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/989559285.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/994407379.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.6.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1007980556.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pytorch112"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/1008711767.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.6.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "mmcv-recipe",
 "hash_type": "sha256",
 "name": "mmcv-recipe",
 "new_version": "1.6.1",
 "new_version_attempts": {
  "1.6.0": 1,
  "1.6.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "mmcv-full"
  ]
 },
 "pinning_version": "2022.07.26.13.54.43",
 "pre_pr_migrator_attempts": {},
 "pre_pr_migrator_status": {},
 "raw_meta_yaml": "{% set version = \"1.5.3\" %}\n{% set number = 1 %}\n{% set proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n{% if cuda_compiler_version != \"None\" %}\n{% set number = number + 200 %}\n{% endif %}\n\npackage:\n  name: mmcv-recipe\n  version: {{ version }}\n\nsource:\n  url: https://github.com/open-mmlab/mmcv/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 650929f52f1d0b2bae1bdaaa874e1e6dfdfa15f40bab5c366330488a9949ddd0\nbuild:\n  number: {{ number }}\n  skip: true  # [win]\n\noutputs:\n  - name: mmcv-full\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == \"None\"]\n      detect_binary_files_with_prefix: false\n      run_exports:\n        - {{ pin_subpackage('mmcv-full', max_pin='x.x') }}\n      missing_dso_whitelist:\n        # conda-forge::pytorch provides these libs\n        - \"$RPATH/libc10_cuda.so\"\n        - \"$RPATH/libtorch_python.so\"\n        - \"$RPATH/libtorch_cpu.so\"\n        - \"$RPATH/libc10.so\"\n        - \"$RPATH/libc10_cuda.dylib\"\n        - \"$RPATH/libtorch_python.dylib\"\n        - \"$RPATH/libtorch_cpu.dylib\"\n        - \"$RPATH/libc10.dylib\"\n    script: build_mmcv.sh  # [not win]\n    requirements:\n      build:\n        - python                                   # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}       # [build_platform != target_platform]\n        - pytorch ={{ pytorch }}={{ proc_type }}*  # [build_platform != target_platform]\n        - numpy                                    # [build_platform != target_platform]\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        # this adds matching cuda requirement to run deps using __cuda package\n        - {{ compiler('cuda') }}    # [cuda_compiler_version != \"None\"]\n        - ninja\n      host:\n        - python\n        - pip\n        - requests\n        - future\n        - six\n        - typing\n        - pkg-config  # [unix]\n        - typing_extensions\n        - pytorch ={{ pytorch }}={{ proc_type }}*\n        - torchvision\n        - setuptools\n        - numpy\n        - py-opencv\n      run:\n        # intentionally skipping opencv and pytorch (following upstream vendor)\n        - addict\n        - packaging\n        - Pillow\n        - pyyaml\n        - yapf\n        - {{ pin_compatible('numpy') }}\n        - typing_extensions\n        - __cuda  # [cuda_compiler_version != \"None\"]\n\n      run_constrained:\n        - pytorch =*={{ proc_type }}*\n    test:\n      requires:\n        - pytest\n        - requests\n        - scipy\n        - libopencv\n        - py-opencv\n        - opencv\n        - python-lmdb\n        - libiconv\n        - tifffile\n        - python-dateutil\n        - torchvision\n      imports:\n        - mmcv\n      source_files:\n        - tests\n      commands:\n        {% set failing_tests = [\"test_imcrop\",\n                                \"test_tensor2imgs\",\n                                \"test_imwrite\",\n                                \"test_imfrombytes\",\n                                \"test_imread\"] %}\n        {% set slow_tests = [\"test_eval_hook\",\n                             \"test_start_param\",\n                             \"test_flat_cosine_runner_hook\",\n                             \"test_momentum_runner_hook\",\n                             \"test_step_runner_hook\",\n                             \"test_adjust_sharpness\",\n                             \"test_adjust_contrast\",\n                             \"test_adjust_brightness\",\n                             \"test_gradient_cumulative_optimizer_hook\",\n                             \"test_auto_contrast\"] %}\n        {% set ignored_files = [\"./tests/test_ops/test_onnx.py\",\n                                \"./tests/test_ops/test_tensorrt.py\",\n                                \"./tests/test_ops/test_tensorrt_preprocess.py\",\n                                \"./tests/test_utils/test_timer.py\",\n                                \"./tests/test_utils/test_progressbar.py\"] %}\n        # ignored tests:\n        # test_onnx.py,test_tensorrt.py,test_tensorrt_preprocess.py - mccv currently compiled without onnx runtime\n        # test_geometric.py:test_imcrop - depending on what backend opencv uses it produces diff results (lipjpeg vs libturbojpeg)\n        # test_io.py - tries to import libturbojpeg that we don't install (conflicts with opencv that uses libjpeg)\n        # test_progressbar.py, test_timer.py - on OSX sleep(1) takes 1.1sec, so all related tests fail\n        # test_image_misc.py::test_tensor2imgs - need to investigate 2/75 mismatch\n        - python3 -m pytest ./tests/ -k \"not ({{ (failing_tests + slow_tests)|join(' or ') }})\" --ignore={{ ignored_files|join(' --ignore=') }}\n        - python3 -c \"import mmcv; print(mmcv.__version__)\"\n\n\nabout:\n  home: https://github.com/open-mmlab/mmcv\n  summary: 'Foundational library for computer vision research'\n  description: |\n    MMCV is a foundational library for computer vision research and supports many research projects.\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  dev_url: https://github.com/open-mmlab/mmcv\n\nextra:\n  recipe-maintainers:\n    - apatsekin\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/open-mmlab/mmcv/archive/refs/tags/v1.5.3.tar.gz",
 "version": "1.5.3"
}