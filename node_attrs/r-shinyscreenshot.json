{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/807205842.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-shinyscreenshot",
 "hash_type": "sha256",
 "name": "r-shinyscreenshot",
 "new_version": "0.2.0",
 "new_version_attempts": {
  "0.2.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-shinyscreenshot"
  ]
 },
 "pinning_version": "2021.12.20.19.09.43",
 "raw_meta_yaml": "{% set version = \"0.2.0\" %}\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-shinyscreenshot\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/shinyscreenshot_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/shinyscreenshot/shinyscreenshot_{{ version }}.tar.gz\n  sha256: 63cef8a89e59dc00b9afe596c7042ef948e71e072ee1622404428e0c18177507\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n    - cross-r-base {{ r_base }}    # [build_platform != target_platform]\n  host:\n    - r-base\n    - r-jsonlite\n    - r-shiny >=1.0.0\n    - r-uuid\n  run:\n    - r-base\n    - r-jsonlite\n    - r-shiny >=1.0.0\n    - r-uuid\n\ntest:\n  commands:\n    - $R -e \"library('shinyscreenshot')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('shinyscreenshot')\\\"\"  # [win]\n\nabout:\n  home: https://github.com/daattali/shinyscreenshot https://daattali.com/shiny/shinyscreenshot-demo/\n  license: MIT\n  summary: Capture screenshots in 'Shiny' applications. Screenshots can either be of the entire viewable page, or a specific section of the page. The captured image is automatically downloaded as a PNG image. Powered by the 'html2canvas' JavaScript library.\n  license_family: MIT\n  license_file:\n    - {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/MIT\n    - LICENSE\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: shinyscreenshot\n# Title: Capture Screenshots of Entire Pages or Parts of Pages in 'Shiny'\n# Version: 0.1.0\n# Authors@R: c( person(\"Dean\", \"Attali\", email = \"daattali@gmail.com\", role = c(\"aut\", \"cre\")), person(\"Niklas\", \"von Hertzen\", email = \"niklasvh@gmail.com\", role = c(\"aut\"), comment = \"html2canvas library\"), person(\"Eli\", \"Grey\", email = \"~@eligrey.com\", role = c(\"aut\"), comment = \"FileSaver library\") )\n# Description: Capture screenshots in 'Shiny' applications. Screenshots can either be of the entire viewable page, or a specific section of the page. The captured image is automatically downloaded as a PNG image. Powered by the 'html2canvas' JavaScript library.\n# URL: https://github.com/daattali/shinyscreenshot https://daattali.com/shiny/shinyscreenshot-demo/\n# BugReports: https://github.com/daattali/shinyscreenshot/issues\n# Depends: R (>= 3.1.0)\n# Imports: jsonlite, shiny (>= 1.0.0), uuid\n# Suggests: rmarkdown, timevis\n# License: MIT + file LICENSE\n# LazyData: true\n# Encoding: UTF-8\n# RoxygenNote: 7.1.1\n# NeedsCompilation: no\n# Packaged: 2020-10-22 16:03:03 UTC; Dean-X1C\n# Author: Dean Attali [aut, cre], Niklas von Hertzen [aut] (html2canvas library), Eli Grey [aut] (FileSaver library)\n# Maintainer: Dean Attali <daattali@gmail.com>\n# Repository: CRAN\n# Date/Publication: 2020-10-30 09:30:02 UTC\n",
 "smithy_version": "3.16.0",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/shinyscreenshot_0.2.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/shinyscreenshot/shinyscreenshot_0.2.0.tar.gz",
  "https://cran.r-project.org/src/contrib/shinyscreenshot_0.2.0.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/shinyscreenshot/shinyscreenshot_0.2.0.tar.gz"
 ],
 "version": "0.2.0"
}