{
 "PRed": [
  {
   "PR": {
    "id": "08f7fbe8-6a6e-4618-bf55-bba629f741cc",
    "merged_at": "never issued",
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/393163806.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/469116055.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/502059752.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/554990379.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: 502",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "lda",
 "hash_type": "sha256",
 "name": "lda",
 "new_version": "2.0.0",
 "new_version_attempts": {
  "2.0.0": 3
 },
 "new_version_errors": {
  "2.0.0": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '2.0.0' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz'\n"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "lda"
  ]
 },
 "pinning_version": "2021.01.14.09.11.00",
 "pre_pr_migrator_attempts": {
  "pypy38": 254,
  "python310": 1506,
  "python311": 165
 },
 "pre_pr_migrator_status": {
  "pypy38": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3927401495\">bot CI job</a>): main: ['No `.ci_support/*.yaml` files found! This can happen when a rerender results in no builds for a recipe (e.g., a recipe is python 2.7 only). This attempted migration is being reported as not solvable.']",
  "python310": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/2915461479\">bot CI job</a>): main: ['No `.ci_support/*.yaml` files found! This can happen when a rerender results in no builds for a recipe (e.g., a recipe is python 2.7 only). This attempted migration is being reported as not solvable.']",
  "python311": "not solvable (<a href=\"https://github.com/regro/autotick-bot/actions/runs/3930337278\">bot CI job</a>): main: ['No `.ci_support/*.yaml` files found! This can happen when a rerender results in no builds for a recipe (e.g., a recipe is python 2.7 only). This attempted migration is being reported as not solvable.']"
 },
 "raw_meta_yaml": "{% set name = \"lda\" %}\n{% set version = \"2.0.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: d8d7c0bc42208902a9e34261b76793a84f59e6c69cfd7ca12ce982cdaf7c3020\n\nbuild:\n  number: 1\n  script: {{ PYTHON }} -m pip install . -vv\n  skip: true  # [py>=37]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n\n\n  host:\n    - pip\n    - python\n    - numpy\n    - pbr\n    - setuptools\n    - cython\n\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - pbr\n\ntest:\n  imports:\n    - lda\n    - lda.datasets\n    - lda.utils\n\n  requires:\n    - pbr\n    - numpy\n\nabout:\n  home: https://lda.readthedocs.io/en/latest/\n  license: MPL-2.0\n  license_family: MOZILLA\n  license_file: LICENSE\n  summary: lda implements latent Dirichlet allocation (LDA) using collapsed Gibbs sampling. lda is fast and is tested on Linux, OS X, and Windows.\n  doc_url: https://lda.readthedocs.io/en/latest/\n  dev_url: https://github.com/ariddell/lda/tree/master\n\nextra:\n  recipe-maintainers:\n    - mxr-conda\n    - mwilson8\n    - rluria14\n    - benhuff\n",
 "smithy_version": "3.8.6",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/l/lda/lda-2.0.0.tar.gz",
 "version": "2.0.0"
}