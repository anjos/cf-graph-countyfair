{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/779023511.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/909960173.json"
   },
   "data": {
    "bot_rerun": 1650070703.700082,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/911092059.json"
   },
   "data": {
    "bot_rerun": 1650070703.7002919,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/911173991.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "3.1.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/5db59f9c-bced-4afb-8d3e-85780e61f411.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6262"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/957689746.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/964446537.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "root_base6264"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "cds-crtools",
 "hash_type": "sha256",
 "name": "cds-crtools-split",
 "new_version": "3.1.2",
 "new_version_attempts": {
  "3.0.3": 1,
  "3.1.1": 1,
  "3.1.2": 2
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "cds-crtools",
   "chndump",
   "crtools-gui-libraries",
   "crtools-root-libraries",
   "dmtviewer",
   "dtt-awggui",
   "dtt-awgstream",
   "dtt-diag",
   "dtt-diagd",
   "dtt-diaggui",
   "dtt-monitors",
   "dtt-multiawgstream",
   "dtt-tpcmd",
   "dtt-xml-tools",
   "fantom",
   "foton",
   "libawg",
   "libdfm",
   "libdtt",
   "libfantom",
   "libfilterfile",
   "libfilterwiz",
   "libsistr",
   "libtestpoint",
   "lidax",
   "python-awg",
   "python-foton"
  ]
 },
 "pinning_version": "2022.06.10.16.38.37",
 "pre_pr_migrator_attempts": {
  "root_base6260": 20
 },
 "pre_pr_migrator_status": {
  "root_base6260": "bot error (<a href=\"https://github.com/regro/autotick-bot/actions/runs/1956122480\">bot CI job</a>): master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1135, in _run_migrator\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 270, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 276, in eval_cmd\n    c = subprocess.run(\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 507, in run\n    stdout, stderr = process.communicate(input, timeout=timeout)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 1134, in communicate\n    stdout, stderr = self._communicate(input, endtime, timeout)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 1980, in _communicate\n    self._check_timeout(endtime, orig_timeout, stdout, stderr)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/subprocess.py\", line 1178, in _check_timeout\n    raise TimeoutExpired(\nsubprocess.TimeoutExpired: Command 'conda smithy rerender -c auto --no-check-uptodate' timed out after 300 seconds\n"
 },
 "raw_meta_yaml": "{% set name = \"cds-crtools\" %}\n{% set version = \"3.1.2\" %}\n\npackage:\n  name: {{ name|lower }}-split\n  version: {{ version }}\n\nsource:\n  url: https://git.ligo.org/cds/dtt/-/archive/{{ version }}/{{ version }}.tar.gz\n  sha256: cd3979dce54a3673117a7eb18fe1bfb4dfc0332454a9e037fe692abc025de5d0\n  patches:\n    # patch rpcgen arguments to find cpp\n    - rpcgen-cpp-path.patch\n\nbuild:\n  number: 6\n  skip: true  # [not linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n    - pkg-config  # [unix]\n    - python >=3\n    - sysroot_linux-64 2.17  # [linux64]\n  host:\n    - cyrus-sasl\n    - expat\n    - fftw\n    - gds-base\n    - gds-base-crtools\n    - gds-gui-crtools\n    - gds-base-gdstrig\n    - gds-lsmp\n    - gds-root-extensions-crtools\n    - nds2-client\n    - readline\n    - root_base\n\n\noutputs:\n  # -- C libraries ----------\n\n  - name: libawg\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - include/gds/dtt/awg*.h\n      - include/gds/dtt/excitation.hh\n      - include/gds/dtt/gdsrand.h\n      - lib/libawg{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libawg${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library used to interface with awgtpman, the waveform excitation program used at LIGO\n      description: |\n        `libawg` is an interface for opening, configuring, and controlling excitations\n        on the LIGO real-time data acquisition system.\n\n  - name: libdfm\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - include/gds/dfm/dataacc.hh\n      - include/gds/dfm/dfm.hh\n      - include/gds/dfm/dfmapi.hh\n      - include/gds/dfm/dfmfunc.hh\n      - include/gds/dfm/dfmlars.hh\n      - include/gds/dfm/dfmnds.hh\n      - include/gds/dfm/dfmsends.hh\n      - include/gds/dfm/dfmsm.hh\n      - include/gds/dfm/dfmtype.hh\n      - include/gds/dfm/udn.hh\n      - lib/libdfm{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libdfm${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library for interfacing with LIGO's data flow manager\n      description: |\n        DMT is part of the LIGO real-time data acquisition system\n\n  - name: libdtt\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - expat\n        - gds-base\n        - gds-base-crtools\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - openssl\n        - readline\n      run:\n        - expat\n        - gds-base\n        - gds-base-crtools\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - readline\n\n    files:\n      - lib/libdtt{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libdtt${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library containing the functionality of LIGO's Diagnostics Test Tools.\n      description: |\n        `libdtt` is an interface for creating and running diagnostics tests on\n        the LIGO real-time data acquisition system.\n\n  - name: libfantom\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - gds-lsmp\n        - nds2-client\n        - openssl\n        - readline\n      run:\n        - gds-base\n        - gds-lsmp\n        - readline\n    files:\n      - include/gds/fantom/\n      - lib/libfantom{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libfantom${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library for translation of LIGO data frames and LIGO NDS data.\n      description: |\n        `libfantom` is a LIGO data access library for\n        translating data frames and NDS data.\n\n  - name: libfilterfile\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n    files:\n      - include/foton/Filter*.hh\n      - lib/libfilterfile{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libfilterfile${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: C++ library for manipulating foton filter files.\n      description: |\n        `libfilterfile` is an interface for reading and writing foton filter files,\n        used at LIGO to encode filter coefficients.\n\n  - name: libfilterwiz\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n    files:\n      - include/foton/TLGFilter*.hh\n      - lib/libfilterwiz{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libfilterwiz${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Functions for creating foton-style filter design windows.\n      description: |\n        Other LIGO programs such as `awggui` and `diaggui` use `libfilterwiz` to create\n        `foton`-style filter design windows for one-off filters.\n\n  - name: libsistr\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - include/gds/dtt/SIStr.h\n      - lib/libSIStr{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libSIStr${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library for sending arbitrary data as excitations using LIGO's awgtpman.\n      description: |\n        `libsistr` is a library used for streaming custom excitations.\n\n  - name: libtestpoint\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - nds2-client\n        - openssl\n      run:\n        - gds-base\n    files:\n      - include/gds/dtt/testpoint*\n      - lib/libtestpoint{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libtestpoint${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Library for manipulating LIGO test points.\n      description: |\n        `libtestpoint` allows opening and closing of test points on the LIGO\n        real-time data acquisition system.\n\n  - name: crtools-gui-libraries\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - gds-base-crtools\n        - gds-gui-crtools\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - gds-base\n        - gds-base-crtools\n        - gds-gui-crtools\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - root_base\n    files:\n      - include/dmtview/\n      - include/dtt/dttgui/\n      - include/gds/dfm/dfmgui.hh\n      - include/gds/dfm/montype.hh\n      - include/gds/dfm/TLGDfmChannels.hh\n      - include/gds/dfm/TLGDfmMonitors.hh\n      - include/gds/dfm/TLGDfmSel.hh\n      - include/gds/dfm/TLGDfmServer.hh\n      - include/gds/dfm/TLGDfmTimes.hh\n      - include/gds/libdax/\n      - lib/libdfmgui{{ SHLIB_EXT }}*\n      - lib/libdmtview{{ SHLIB_EXT }}*\n      - lib/libdttgui{{ SHLIB_EXT }}*\n      - lib/liblidax{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libdfmgui${SHLIB_EXT}  # [unix]\n        - test -f ${PREFIX}/lib/libdttgui${SHLIB_EXT}  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Common libraries used by LIGO control room graphical programs.\n      description: |\n        The gui libraries provide basic widgets to control room tools apps.\n\n  - name: crtools-root-libraries\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n        - root_base\n    files:\n      - lib/dmtview*.pcm\n      - lib/libRdmtview{{ SHLIB_EXT }}*\n      - lib/dttgui*.pcm\n      - lib/libRdttgui{{ SHLIB_EXT }}*\n      - lib/filterfile*.pcm\n      - lib/libRfilterfile{{ SHLIB_EXT }}*\n    test:\n      commands:\n        - test -f ${PREFIX}/lib/libRdttgui${SHLIB_EXT}  # [unix]\n        - root -b -l -x -q -e 'gSystem->Load(\"libRdttgui\");'  # [linux]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Common ROOT dictionary libraries used by LIGO control room programs.\n      description: |\n        ROOT dictionaries allow dynamic access to C++ objects.\n\n  # -- python libraries -----\n\n  - name: python-foton\n    script: build-python-foton.sh\n    requirements:\n      build:\n        - cmake\n        - make  # [unix]\n        - pkg-config\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - nds2-client\n        - python\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-root-libraries', exact=True) }}\n        - gds-root-extensions-crtools\n        - numpy\n        - python\n        - root_base\n        - scipy\n    test:\n      source_files:\n        - src/python/foton/\n      commands:\n        - (cd src/python/foton/; python foton_test.py)\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Python bindings for foton functions\n      description: |\n        Library for design, inspection and manipulation of filters and\n        LIGO style filter files.\n\n  - name: python-awg\n    script: build-python-awg.sh\n    requirements:\n      build:\n        - cmake\n        - make  # [unix]\n        - pkg-config\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - nds2-client\n        - python\n        - root_base\n      run:\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - {{ pin_subpackage('libsistr', exact=True) }}\n        - numpy\n        - python\n        - root_base\n        - scipy\n    test:\n      imports:\n        - awg\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Python bindings to libawg\n      description: |\n        Create excitations using LIGO\\'s awgtpman using Python.\n        The awg module allows simple python scripting of excitations\n        on the LIGO data acquisition system.\n\n  # -- script packages ------\n\n  - name: chndump\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - nds2-client\n      run:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n    files:\n      - bin/chndump\n    test:\n      commands:\n        # chndump -h returns exit code 1 (command not found is 127)\n        - chndump -h || test $? -eq 1  # [unix]\n\n  - name: dmtviewer\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - gds-base-crtools\n        - gds-gui-crtools\n        - nds2-client\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - gds-base-crtools\n        - gds-gui-crtools\n        - root_base\n    files:\n      - bin/dmtviewer\n    test:\n      commands:\n        - dmtviewer -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Graphical program for viewing output of DMT monitors.\n      description: |\n        DMT viewer is used in LIGO control rooms to display DMT data.\n\n  - name: dtt-awggui\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - gds-gui-crtools\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - gds-gui-crtools\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - root_base\n    files:\n      - bin/awggui\n    test:\n      commands:\n        - awggui -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Graphical program for running excitations using LIGO's awgtpman.\n      description: |\n        `awggui` is an interface for creating excitations on LIGO's data\n        acquisition system, including many periodic functions, random noise\n        excitations, and custom user-defined excitations.\n\n  - name: dtt-awgstream\n    build:\n      ignore_run_exports:\n        - openssl\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libsistr', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n        - openssl\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libsistr', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - bin/awgstream\n      - bin/awgexc_run\n    test:\n      commands:\n        - awgstream\n        - awgexc_run || test $? -eq 1  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Stream arbitrary data as an excitation using LIGO's awgtpman.\n      description: |\n        Includes awgexec_run program for streaming excitations from Matlab.\n\n  - name: dtt-diag\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - nds2-client\n      run:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - nds2-client\n    files:\n      - bin/diag\n    test:\n      commands:\n        - diag -help\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Command line program for running LIGO's Diagnostics Test Tools\n      description: |\n        `diag` is suitable for scripting diagnostics test and excitations on LIGO's\n        real-time data acquisition system.\n\n  - name: dtt-diagd\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - nds2-client\n      run:\n        - {{ pin_subpackage('libdtt', exact=True) }}\n    files:\n      - bin/diagd\n    test:\n      commands:\n        - test -x ${PREFIX}/bin/diagd  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Daemon for running LIGO's Diagnostics Test Tools remotely\n      description: |\n        `diagd` is suitable for remotely running diagnostics test\n        and excitations on LIGO's real-time data acquisition system.\n\n  - name: dtt-diaggui\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - gds-gui-crtools\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - gds-base\n        - gds-gui-crtools\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - root_base\n        - nds2-client\n    files:\n      - bin/diaggui\n    test:\n      commands:\n        - diaggui -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Graphical program for running LIGO's Diagnostics Test Tools.\n      description: |\n        `diaggui` is a user interface for running diagnostics tests, creating\n        excitations, calculating results on LIGO's real time system data\n        acquisition system.\n\n  - name: dtt-monitors\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n    files:\n      - bin/InspiralRange\n    test:\n      commands:\n        - echo -e \"10 1e-21\\n50 1e-22\\n100 1e-23\\n200 1e-22\" | InspiralRange 4000\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Monitors used in LIGO control rooms.\n      description: |\n        Monitors include InspiralRange.\n\n  - name: dtt-multiawgstream\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n      run:\n        - gds-base\n        - {{ pin_subpackage('libawg', exact=True) }}\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - bin/multiawgstream\n    test:\n      commands:\n        - multiawgstream\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Stream multiple arbitrary data sets as excitations using LIGO's awgtpman.\n      description: |\n        Stream arbitrary data to multiple exciatation channels at once on\n        LIGO's real-time data acquisition system.\n\n  - name: dtt-tpcmd\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n      run:\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - bin/tpcmd\n    test:\n      commands:\n        - tpcmd -h || test $? -eq 1  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Command line tool for manipulating test points using LIGO's awgtpman.\n      description: |\n        Close and open test points on LIGO's real-time data acquisition system\n\n  - name: dtt-xml-tools\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - gds-base\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n        - nds2-client\n      run:\n        - gds-base\n        - {{ pin_subpackage('libdtt', exact=True) }}\n        - {{ pin_subpackage('libtestpoint', exact=True) }}\n    files:\n      - bin/xmlconv\n      - bin/xmldata\n      - bin/xmldir\n    test:\n      commands:\n        - xmlconv -h\n        - xmldata -h\n        - xmldir -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Command line tools for XML files produced using DTT.\n      description: |\n        Includes xmlconv, xmldata, and xmldir.  Files can be produced by diag or diaggui.\n\n  - name: fantom\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libfantom', exact=True) }}\n        - nds2-client\n      run:\n        - {{ pin_subpackage('libfantom', exact=True) }}\n    files:\n      - bin/fantom\n    test:\n      commands:\n        - fantom -h || test $? -eq 1  # [unix]\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Command-line program for translation of LIGO frame and NDS data.\n      description: |\n        `fantom` can be used to translate from different LIGO data formats.\n\n  - name: foton\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n        - {{ pin_subpackage('libfilterwiz', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libfilterfile', exact=True) }}\n        - {{ pin_subpackage('libfilterwiz', exact=True) }}\n        - root_base\n    files:\n      - bin/foton\n    test:\n      commands:\n        - foton -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Graphical program for designing and generating filters.\n      description: |\n        `foton` is used at LIGO to design and display filters,\n        then generate filter files usable by the LIGO real-time\n        data acquisition system.\n        A variety of design strategies are supported.\n\n  - name: lidax\n    requirements:\n      build:\n        - {{ compiler('cxx') }}\n        - make  # [unix]\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - nds2-client\n        - root_base\n      run:\n        - {{ pin_subpackage('crtools-gui-libraries', exact=True) }}\n        - gds-base\n        - {{ pin_subpackage('libdfm', exact=True) }}\n        - root_base\n    files:\n      - bin/lidax\n      - bin/udnls\n    test:\n      commands:\n        - lidax -h\n        - lidax -H NDSSERVER\n        - udnls -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: Graphical program for retrieving LIGO data.\n      description: |\n        lidax reads LIGO frame files.\n\n  # -- metapackage ----------\n\n  - name: cds-crtools\n    requirements:\n      host:\n        - nds2-client\n        - python\n        - root_base\n      run:\n        - nds2-client\n        - python\n        - root_base\n        # all of the outputs\n        - {{ pin_subpackage('chndump', exact=True) }}\n        - {{ pin_subpackage('dmtviewer', exact=True) }}\n        - {{ pin_subpackage('dtt-diag', exact=True) }}\n        - {{ pin_subpackage('dtt-diagd', exact=True) }}\n        - {{ pin_subpackage('dtt-diaggui', exact=True) }}\n        - {{ pin_subpackage('dtt-awggui', exact=True) }}\n        - {{ pin_subpackage('dtt-awgstream', exact=True) }}\n        - {{ pin_subpackage('dtt-multiawgstream', exact=True) }}\n        - {{ pin_subpackage('dtt-tpcmd', exact=True) }}\n        - {{ pin_subpackage('dtt-xml-tools', exact=True) }}\n        - {{ pin_subpackage('foton', exact=True) }}\n        - {{ pin_subpackage('lidax', exact=True) }}\n        - {{ pin_subpackage('python-awg', exact=True) }}\n        - {{ pin_subpackage('python-foton', exact=True) }}\n    test:\n      commands:\n        - diaggui -h\n        - foton -h\n    about:\n      home: https://git.ligo.org/cds/dtt\n      dev_url: https://git.ligo.org/cds/dtt.git\n      license: GPL-2.0-or-later\n      license_family: GPL\n      license_file:\n        - COPYING\n        - COPYING-GPL-3\n      summary: CDS Control Room tools\n      description: |\n        cds-crtools is a metapackage that installs several programs\n        used to control LIGO-style interfrometers. The package includes\n        `diag`, `diagd`, `diaggui`, `awggui`, `tpcmd`, `chndump`\n        along with `foton`, the filter design program, and others.\n\nabout:\n  home: https://git.ligo.org/cds/dtt\n  dev_url: https://git.ligo.org/cds/dtt.git\n  license: GPL-2.0-or-later\n  license_family: GPL\n  license_file:\n    - COPYING\n    - COPYING-GPL-3\n  summary: CDS Control Room tools\n\nextra:\n  feedstock-name: cds-crtools\n  recipe-maintainers:\n    - duncanmmacleod\n    - evonreis\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://git.ligo.org/cds/dtt/-/archive/3.1.2/3.1.2.tar.gz",
 "version": "3.1.2"
}