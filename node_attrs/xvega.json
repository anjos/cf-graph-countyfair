{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/528046893.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/559911792.json"
   },
   "data": {
    "bot_rerun": 1611334566.0856895,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.0.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "xvega",
 "hash_type": "sha256",
 "name": "xvega",
 "new_version": "0.0.10",
 "new_version_attempts": {
  "0.0.8": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "xvega"
  ]
 },
 "pinning_version": "2021.01.22.10.30.34",
 "raw_meta_yaml": "{% set name = \"xvega\" %}\n{% set version = \"0.0.10\" %}\n{% set sha256 = \"c7e50090b188baf594463cf093638318f96c9aabad9365cfdd660f5d12ef91f4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://github.com/QuantStack/xvega/archive/{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  skip: true  # [win and vc<14]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n  host:\n    - nlohmann_json\n    - xproperty >=0.11.0,<0.12.0\n    - xtl >=0.7.0,<0.8.0\n  run_constrained:\n    - {{ pin_compatible('xtl', max_pin='x.x') }}\n    - {{ pin_compatible('xproperty', max_pin='x.x') }}\n    - {{ pin_compatible('nlohmann_json', max_pin='x.x') }}\n\ntest:\n  commands:\n    - test -d ${PREFIX}/include/xvega  # [unix]\n    - test -f ${PREFIX}/include/xvega/xvega.hpp  # [unix]\n    - test -f ${PREFIX}/include/xvega/grammar/marks.hpp  # [unix]\n    - test -f ${PREFIX}/include/xvega/utils/random_string.hpp  # [unix]\n    - test -f ${PREFIX}/lib/cmake/xvega/xvegaConfig.cmake  # [unix]\n    - test -f ${PREFIX}/lib/cmake/xvega/xvegaConfigVersion.cmake  # [unix]\n    - if exist %LIBRARY_PREFIX%\\include\\xvega\\xvega.hpp (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\include\\xvega\\grammar\\marks.hpp (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\include\\xvega\\utils\\random_string.hpp (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\lib\\cmake\\xvegaConfig.cmake (exit 0) else (exit 1)  # [win]\n    - if exist %LIBRARY_PREFIX%\\lib\\cmake\\xvegaConfigVersion.cmake (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: https://github.com/QuantStack/xvega\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: A C++ backend for vega\n  description: vega-lite visualization system for the xeus-cling kernel\n  dev_url: https://github.com/QuantStack/xvega\n\nextra:\n  recipe-maintainers:\n    - SylvainCorlay\n    - madhur-tandon\n    - JohanMabille\n",
 "smithy_version": "3.8.6",
 "strong_exports": false,
 "url": "https://github.com/QuantStack/xvega/archive/0.0.10.tar.gz",
 "version": "0.0.10"
}