{
 "PRed": [
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.16.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/200021713.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.16.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/232113660.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.17.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.17.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/266908009.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.17.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/280176902.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.18.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/280838415.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.18.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/288744992.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.18.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/320854545.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.19.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/332562866.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.19.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/342368139.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.19.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/375786427.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MatplotlibBase",
    "migrator_version": 0,
    "name": "matplotlib-to-matplotlib-base"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/394888320.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/399087529.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/408183136.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/410403530.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/410743686.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/416910266.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/420404128.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/433814225.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.6"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/434728921.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.7"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/479242252.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.20.8"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/519245922.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.21.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/521761053.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.21.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/532210921.json"
   },
   "data": {
    "bot_rerun": 1608293183.056477,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/541985855.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.22.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/608189060.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.22.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/624661198.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/718966704.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/720651830.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/722679208.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/731736592.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/793225532.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.24.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/904315300.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/971314889.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "mne",
 "hash_type": "sha256",
 "name": "mne-python",
 "new_version": "1.1.0",
 "new_version_attempts": {
  "0.20.1": 1,
  "0.20.2": 1,
  "0.20.3": 1,
  "0.20.4": 1,
  "0.20.5": 1,
  "0.20.6": 1,
  "0.20.7": 1,
  "0.20.8": 1,
  "0.21.1": 1,
  "0.21.2": 1,
  "0.22.0": 1,
  "0.22.1": 1,
  "0.23.0": 1,
  "0.23.1": 1,
  "0.23.2": 1,
  "0.23.3": 1,
  "0.23.4": 1,
  "0.24.1": 1,
  "1.0.1": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "mne",
   "mne-base",
   "mne-installer-menus"
  ]
 },
 "pinning_version": "2022.06.18.07.34.24",
 "pre_pr_migrator_attempts": {
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "python39": "not solvable: master: ['linux_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package numba-0.35.0-np113py27_10 requires python 2.7*, but none of the providers can be installed\\n', 'osx_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: package numba-0.35.0-np113py27_6 requires python 2.7*, but none of the providers can be installed\\n', 'win_64_python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides numpy >=1.10,<1.11.0a0 needed by numba-0.36.1-np110py27h67d0f83_0\\n']"
 },
 "raw_meta_yaml": "{% set name = \"mne-python\" %}\n{% set version = \"1.1.0\" %}\n{% set sha256 = \"8dcb84ffea13a5fd93668bac4d521fcf71c9fa4a5f05d4c663595069b3701c19\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/m/mne/mne-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n\noutputs:\n  - name: mne-base\n    build:\n      noarch: python\n      script: python -m pip install --no-deps . -vv\n      entry_points:\n        - mne = mne.commands.utils:main\n\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n      host:\n        - python >=3.7\n        - pip\n      run:\n        - python >=3.7\n        - setuptools\n        - matplotlib-base >=3.1.0\n        - numpy >=1.18.1\n        - scipy >=1.4.1\n        - pooch >=1.5\n        - tqdm\n        - decorator\n        - packaging\n        - jinja2\n\n    test:\n      requires:\n        - pip\n      imports:\n        - mne\n      commands:\n        - pip check\n        - mne --version\n\n  - name: mne\n\n    requirements:\n      run:\n        - {{ pin_subpackage('mne-base', max_pin=\"x.x.x.x\") }}\n        - pyobjc-framework-cocoa  # [osx]  # for setting Dock icons etc.\n        - matplotlib >=3.1.0\n        - seaborn\n        - jupyter\n        - h5io\n        - pymatreader\n        - h5py\n        - dipy\n        - nibabel\n        - nilearn\n        - pandas >=0.23.4\n        - xlrd\n        - scikit-learn >=0.20.2\n        - python-picard\n        - numba\n        - vtk >=9.0.1\n        - pyvista >=0.32\n        - pyvistaqt >=0.4\n        - statsmodels\n        - numexpr\n        - pyqt\n        - pillow\n        - joblib\n        - psutil\n        - mffpy >=0.5.7\n        - imageio >=2.6.1\n        - imageio-ffmpeg >=0.4.1\n        - traitlets\n        - mne-qt-browser\n        - ipywidgets\n        - ipyvtklink\n        - edflib-python\n        - eeglabio\n\n    test:\n      requires:\n        - pip\n      imports:\n        - mne\n      commands:\n        - pip check\n        - mne --version\n\n  - name: mne-installer-menus\n    requirements:\n      build:\n        - sed\n      host:\n        - python >=3.7\n      run:\n        - python >=3.7\n        - mne-base\n\n    build:\n      skip: True  # [not linux]\n      noarch: python\n      script:\n        - mkdir -p \"{{ PREFIX }}/Menu\"\n\n        # Common\n        - sed \"s/__PKG_VERSION__/{{ PKG_VERSION }}/\" \"{{ RECIPE_DIR }}/menu/menu.json\" > \"{{ PREFIX }}/Menu/mne.json\"\n\n        # Spyder\n        - cp \"{{ RECIPE_DIR }}/menu/spyder.icns\" \"{{ PREFIX }}/Menu/mne_spyder.icns\"\n        - cp \"{{ RECIPE_DIR }}/menu/spyder.ico\" \"{{ PREFIX }}/Menu/mne_spyder.ico\"\n        - cp \"{{ RECIPE_DIR }}/menu/spyder.png\" \"{{ PREFIX }}/Menu/mne_spyder.png\"\n\n        # Console\n        - cp \"{{ RECIPE_DIR }}/menu/console.icns\" \"{{ PREFIX }}/Menu/mne_console.icns\"\n        - cp \"{{ RECIPE_DIR }}/menu/console.ico\" \"{{ PREFIX }}/Menu/mne_console.ico\"\n        - cp \"{{ RECIPE_DIR }}/menu/console.png\" \"{{ PREFIX }}/Menu/mne_console.png\"\n        # Use hash as separator, as PREFIX contains forward slashes!\n        - sed \"s#__PREFIX__#{{ PREFIX }}#\" \"{{ RECIPE_DIR }}/menu/open_prompt.applescript\" > \"{{ PREFIX }}/Menu/mne_open_prompt.applescript\"  # for macOS\n        - sed \"s#__PREFIX__#{{ PREFIX }}#\" \"{{ RECIPE_DIR }}/menu/open_prompt.sh\" > \"{{ PREFIX }}/Menu/mne_open_prompt.sh\"                    # for Linux\n        - sed \"s#__PREFIX__#{{ PREFIX }}#\" \"{{ RECIPE_DIR }}/menu/open_prompt.bat\" > \"{{ PREFIX }}/Menu/mne_open_prompt.bat\"                  # for Windows\n\n        # System info\n        - cp \"{{ RECIPE_DIR }}/menu/info.icns\" \"{{ PREFIX }}/Menu/mne_info.icns\"\n        - cp \"{{ RECIPE_DIR }}/menu/info.ico\" \"{{ PREFIX }}/Menu/mne_info.ico\"\n        - cp \"{{ RECIPE_DIR }}/menu/info.png\" \"{{ PREFIX }}/Menu/mne_info.png\"\n        - cp \"{{ RECIPE_DIR }}/menu/mne_sys_info.py\" \"{{ PREFIX }}/Menu/mne_sys_info.py\"\n\n        # Website\n        - cp \"{{ RECIPE_DIR }}/menu/web.icns\" \"{{ PREFIX }}/Menu/mne_web.icns\"\n        - cp \"{{ RECIPE_DIR }}/menu/web.ico\" \"{{ PREFIX }}/Menu/mne_web.ico\"\n        - cp \"{{ RECIPE_DIR }}/menu/web.png\" \"{{ PREFIX }}/Menu/mne_web.png\"\n\n        # Forum\n        - cp \"{{ RECIPE_DIR }}/menu/forum.icns\" \"{{ PREFIX }}/Menu/mne_forum.icns\"\n        - cp \"{{ RECIPE_DIR }}/menu/forum.ico\" \"{{ PREFIX }}/Menu/mne_forum.ico\"\n        - cp \"{{ RECIPE_DIR }}/menu/forum.png\" \"{{ PREFIX }}/Menu/mne_forum.png\"\n\n        # Folder icon for macOS\n        - cp \"{{ RECIPE_DIR }}/menu/mne.png\" \"{{ PREFIX }}/Menu/mne.png\"\n\n    test:\n      commands:\n        - test -f ${CONDA_PREFIX}/Menu/mne.json\n        - test -f ${CONDA_PREFIX}/Menu/mne_sys_info.py\n        - test -f ${CONDA_PREFIX}/Menu/mne_open_prompt.applescript\n        - test -f ${CONDA_PREFIX}/Menu/mne_open_prompt.sh\n        - test -f ${CONDA_PREFIX}/Menu/mne_open_prompt.bat\n        # Check we didn't forget any icons\n        - test `ls ${CONDA_PREFIX}/Menu/mne_spyder.*  | wc -l` -eq 3\n        - test `ls ${CONDA_PREFIX}/Menu/mne_console.* | wc -l` -eq 3\n        - test `ls ${CONDA_PREFIX}/Menu/mne_info.*    | wc -l` -eq 3\n        - test `ls ${CONDA_PREFIX}/Menu/mne_web.*     | wc -l` -eq 3\n        - test `ls ${CONDA_PREFIX}/Menu/mne_forum.*   | wc -l` -eq 3\n        - test -f ${CONDA_PREFIX}/Menu/mne.png\n\nabout:\n  home: http://mne.tools\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: MNE-Python is a software for MEG and EEG data analysis.\n  description: |\n    The main package for MNE-Python is named `mne` in conda-forge and should\n    be suitable for most users. The conda recipe produces the following:\n\n    - `mne`: should be installed for full functionality including 3D visualization.\n    - `mne-base`: only pulls dependencies for basic functionality and 2D visualization.\n    - `mne-installer-menus`: should not be installed manually, as it is only meant to be used by the standalone installers.\n  doc_url: http://mne.tools\n  dev_url: https://github.com/mne-tools/mne-python\n\nextra:\n  recipe-maintainers:\n    - larsoner\n    - christianbrodbeck\n    - hoechenberger\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/m/mne/mne-1.1.0.tar.gz",
 "version": "1.1.0"
}