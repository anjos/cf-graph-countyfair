{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/662518647.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.60.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/665158671.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.60.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/667013478.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.61.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/668156478.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.61.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/677856209.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.62.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/679479010.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.62.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/686935148.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.63.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/753728562.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.64.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/754405683.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.65.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/906487117.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.66.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/965025599.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.66.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "ward",
 "hash_type": "sha256",
 "name": "ward",
 "new_version": "0.66.1b0",
 "new_version_attempts": {
  "0.60.0b0": 1,
  "0.60.1b0": 1,
  "0.61.0b0": 1,
  "0.61.1b0": 1,
  "0.62.0b0": 1,
  "0.62.1b0": 1,
  "0.63.0b0": 1,
  "0.64.0b0": 1,
  "0.65.0b0": 1,
  "0.66.0b0": 1,
  "0.66.1b0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ward"
  ]
 },
 "pinning_version": "2022.06.12.05.44.46",
 "raw_meta_yaml": "{% set name = \"ward\" %}\n{% set version = \"0.66.1b0\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ward-{{ version }}.tar.gz\n  sha256: cd79c54ce6c5cf47e58a672a7724e22de6ea8e63ea6941c4e886321e637e50d8\n\nbuild:\n  number: 0\n  noarch: python\n  entry_points:\n    - ward = ward._run:run\n  script:\n    - {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - poetry-core >=1.0.0\n    - python >=3.7.8\n  run:\n    - click >=7.0.0,<9.0.0\n    - click-completion >=0.5.2\n    - click-default-group >=1.2.2\n    - cucumber-tag-expressions >=2.0.0,<5.0.0\n    - pluggy >=0.13.1,<2.0.0\n    - pprintpp >=0.4.0\n    - python >=3.7.8\n    - rich >=12.2.0\n    - tomli >=1.0.0,<3.0.0\n\ntest:\n  imports:\n    - ward\n  commands:\n    - pip check\n    - ward --help\n  requires:\n    - pip\n\nabout:\n  home: https://wardpy.com\n  doc_url: https://ward.readthedocs.io/en/latest/\n  dev_url: https://github.com/darrenburns/ward\n  summary: A modern Python testing framework\n  license: MIT\n  license_file: LICENSE\n  description: |\n    Ward is a Python testing framework with a focus on productivity and\n    readability. It gives you the tools you need to write well-documented and\n    scalable tests. With Ward, you can describe your tests using strings instead\n    of function names, and also use plain assert statements, with no need to\n    remember assert* method names. Ward provides beautiful output that focuses\n    on readability. It also manages test dependencies using a simple but\n    powerful fixture system, while parameterising testing, which allows you to\n    run a single test on multiple inputs. Ward has support for testing async\n    code, and is supported on MacOS, Linux, and Windows. Ward is configurable\n    with pyproject.toml, but works out-of-the-box with sensible defaults. It is\n    also extendable via a plugin system (coming soon). Above all, Ward is speedy\n    \u2013 Ward\u2019s suite of ~300 tests completes in ~0.4 seconds on my machine.\n\nextra:\n  recipe-maintainers:\n    - thewchan\n",
 "smithy_version": "3.20.0",
 "strong_exports": false,
 "url": "https://pypi.io/packages/source/w/ward/ward-0.66.1b0.tar.gz",
 "version": "0.66.1b0"
}