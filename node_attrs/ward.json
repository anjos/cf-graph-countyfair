{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/662518647.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.60.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/665158671.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.60.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/667013478.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.61.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/668156478.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.61.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/677856209.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.62.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/679479010.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.62.1b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/686935148.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.63.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/753728562.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.64.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/754405683.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.65.0b0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "ward",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Ward is a Python testing framework with a focus on productivity and\nreadability. It gives you the tools you need to write well-documented and\nscalable tests. With Ward, you can describe your tests using strings instead\nof function names, and also use plain assert statements, with no need to\nremember assert* method names. Ward provides beautiful output that focuses\non readability. It also manages test dependencies using a simple but\npowerful fixture system, while parameterising testing, which allows you to\nrun a single test on multiple inputs. Ward has support for testing async\ncode, and is supported on MacOS, Linux, and Windows. Ward is configurable\nwith pyproject.toml, but works out-of-the-box with sensible defaults. It is\nalso extendable via a plugin system (coming soon). Above all, Ward is speedy\n\u2013 Ward\u2019s suite of ~300 tests completes in ~0.4 seconds on my machine.\n",
   "dev_url": "https://github.com/darrenburns/ward",
   "doc_url": "https://ward.readthedocs.io/en/latest/",
   "home": "https://wardpy.com",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "A modern Python testing framework"
  },
  "build": {
   "entry_points": [
    "ward = ward._run:run"
   ],
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan"
   ]
  },
  "package": {
   "name": "ward",
   "version": "0.65.0b0"
  },
  "requirements": {
   "host": [
    "pip",
    "poetry",
    "python >=3.6"
   ],
   "run": [
    "click >=8.0.0,<9.0.0",
    "click-completion >=0.5.2,<0.6.0",
    "click-default-group >=1.2.2,<2.0.0",
    "cucumber-tag-expressions >=2.0.0,<3.0.0",
    "dataclasses >=0.7,<0.8",
    "pluggy >=0.13.1,<0.14.0",
    "pprintpp >=0.4.0,<0.5.0",
    "python >=3.6",
    "rich >=10.0.0,<11.0.0",
    "tomli"
   ]
  },
  "source": {
   "sha256": "4f086c746b0d3d4464cf8ddea54f11fa08e02a784d0fda5bdc9b7f9c9fa63db0",
   "url": "https://pypi.io/packages/source/w/ward/ward-0.65.0b0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "ward --help"
   ],
   "imports": [
    "ward"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "click",
    "click-completion",
    "click-default-group",
    "cucumber-tag-expressions",
    "dataclasses",
    "pluggy",
    "pprintpp",
    "python",
    "rich",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Ward is a Python testing framework with a focus on productivity and\nreadability. It gives you the tools you need to write well-documented and\nscalable tests. With Ward, you can describe your tests using strings instead\nof function names, and also use plain assert statements, with no need to\nremember assert* method names. Ward provides beautiful output that focuses\non readability. It also manages test dependencies using a simple but\npowerful fixture system, while parameterising testing, which allows you to\nrun a single test on multiple inputs. Ward has support for testing async\ncode, and is supported on MacOS, Linux, and Windows. Ward is configurable\nwith pyproject.toml, but works out-of-the-box with sensible defaults. It is\nalso extendable via a plugin system (coming soon). Above all, Ward is speedy\n\u2013 Ward\u2019s suite of ~300 tests completes in ~0.4 seconds on my machine.\n",
   "dev_url": "https://github.com/darrenburns/ward",
   "doc_url": "https://ward.readthedocs.io/en/latest/",
   "home": "https://wardpy.com",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "A modern Python testing framework"
  },
  "build": {
   "entry_points": [
    "ward = ward._run:run"
   ],
   "noarch": "python",
   "number": "0",
   "script": "/usr/share/miniconda3/envs/run_env/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install . -vv"
  },
  "extra": {
   "recipe-maintainers": [
    "thewchan"
   ]
  },
  "package": {
   "name": "ward",
   "version": "0.65.0b0"
  },
  "requirements": {
   "host": [
    "pip",
    "poetry",
    "python >=3.6"
   ],
   "run": [
    "click >=8.0.0,<9.0.0",
    "click-completion >=0.5.2,<0.6.0",
    "click-default-group >=1.2.2,<2.0.0",
    "cucumber-tag-expressions >=2.0.0,<3.0.0",
    "dataclasses >=0.7,<0.8",
    "pluggy >=0.13.1,<0.14.0",
    "pprintpp >=0.4.0,<0.5.0",
    "python >=3.6",
    "rich >=10.0.0,<11.0.0",
    "tomli"
   ]
  },
  "source": {
   "sha256": "4f086c746b0d3d4464cf8ddea54f11fa08e02a784d0fda5bdc9b7f9c9fa63db0",
   "url": "https://pypi.io/packages/source/w/ward/ward-0.65.0b0.tar.gz"
  },
  "test": {
   "commands": [
    "pip check",
    "ward --help"
   ],
   "imports": [
    "ward"
   ],
   "requires": [
    "pip"
   ]
  }
 },
 "name": "ward",
 "new_version": "0.65.0b0",
 "new_version_attempts": {
  "0.60.0b0": 1,
  "0.60.1b0": 1,
  "0.61.0b0": 1,
  "0.61.1b0": 1,
  "0.62.0b0": 1,
  "0.62.1b0": 1,
  "0.63.0b0": 1,
  "0.64.0b0": 1,
  "0.65.0b0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "ward"
  ]
 },
 "pinning_version": "2021.10.08.16.45.02",
 "raw_meta_yaml": "{% set name = \"ward\" %}\n{% set version = \"0.65.0b0\" %}\n\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ward-{{ version }}.tar.gz\n  sha256: 4f086c746b0d3d4464cf8ddea54f11fa08e02a784d0fda5bdc9b7f9c9fa63db0\n\nbuild:\n  number: 0\n  noarch: python\n  entry_points:\n    - ward = ward._run:run\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - poetry\n    - python >=3.6\n  run:\n    - click >=8.0.0,<9.0.0\n    - click-completion >=0.5.2,<0.6.0\n    - click-default-group >=1.2.2,<2.0.0\n    - cucumber-tag-expressions >=2.0.0,<3.0.0\n    - dataclasses >=0.7,<0.8\n    - pluggy >=0.13.1,<0.14.0\n    - pprintpp >=0.4.0,<0.5.0\n    - python >=3.6\n    - rich >=10.0.0,<11.0.0\n    - tomli\n\ntest:\n  imports:\n    - ward\n  commands:\n    - pip check\n    - ward --help\n  requires:\n    - pip\n\nabout:\n  home: https://wardpy.com\n  doc_url: https://ward.readthedocs.io/en/latest/\n  dev_url: https://github.com/darrenburns/ward\n  summary: A modern Python testing framework\n  license: MIT\n  license_file: LICENSE\n  description: |\n    Ward is a Python testing framework with a focus on productivity and\n    readability. It gives you the tools you need to write well-documented and\n    scalable tests. With Ward, you can describe your tests using strings instead\n    of function names, and also use plain assert statements, with no need to\n    remember assert* method names. Ward provides beautiful output that focuses\n    on readability. It also manages test dependencies using a simple but\n    powerful fixture system, while parameterising testing, which allows you to\n    run a single test on multiple inputs. Ward has support for testing async\n    code, and is supported on MacOS, Linux, and Windows. Ward is configurable\n    with pyproject.toml, but works out-of-the-box with sensible defaults. It is\n    also extendable via a plugin system (coming soon). Above all, Ward is speedy\n    \u2013 Ward\u2019s suite of ~300 tests completes in ~0.4 seconds on my machine.\n\nextra:\n  recipe-maintainers:\n    - thewchan\n",
 "req": {
  "__set__": true,
  "elements": [
   "click",
   "click-completion",
   "click-default-group",
   "cucumber-tag-expressions",
   "dataclasses",
   "pip",
   "pluggy",
   "poetry",
   "pprintpp",
   "python",
   "rich",
   "tomli"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "click",
    "click-completion",
    "click-default-group",
    "cucumber-tag-expressions",
    "dataclasses",
    "pluggy",
    "pprintpp",
    "python",
    "rich",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "smithy_version": "3.12",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "poetry",
    "python >=3.6"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "click >=8.0.0,<9.0.0",
    "click-completion >=0.5.2,<0.6.0",
    "click-default-group >=1.2.2,<2.0.0",
    "cucumber-tag-expressions >=2.0.0,<3.0.0",
    "dataclasses >=0.7,<0.8",
    "pluggy >=0.13.1,<0.14.0",
    "pprintpp >=0.4.0,<0.5.0",
    "python >=3.6",
    "rich >=10.0.0,<11.0.0",
    "tomli"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pip"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/w/ward/ward-0.65.0b0.tar.gz",
 "version": "0.65.0b0"
}