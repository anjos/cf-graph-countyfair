{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/850025290.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "pyjion",
 "name": "pyjion",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pyjion"
  ]
 },
 "pinning_version": "2022.02.12.08.56.54",
 "raw_meta_yaml": "{% set name = \"pyjion\" %}\n{% set version = \"1.2.6\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/tonybaloney/Pyjion.git\n  # https://github.com/tonybaloney/Pyjion/tree/1.2.6\n  git_rev: {{ version }}\n\n\nbuild:\n  skip: True  # [not linux or py<310]\n  number: 1\n  missing_dso_whitelist:\n    - '*/libclrjit.so'  # [linux]\n  script: |\n    git submodule update --init --recursive\n    export CMAKE_GENERATOR=\"Ninja\"\n    {{ PYTHON }} -m pip install . -vv\n  entry_points:\n    - pyjion = pyjion.__main__:main\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - git\n    - ninja\n  host:\n    - python\n    - dotnet >=6\n    - pip\n    - setuptools\n    - wheel\n    - scikit-build\n  run:\n    - python\n    - dotnet >=6\n\ntest:\n  imports:\n    - pyjion\n  requires:\n    # - distorm3\n    - django\n    - flask\n    - numpy\n    - pandas\n    - pyyaml\n    - pytest >=6.2.5\n    - rich\n    - sqlalchemy\n  source_files:\n    - Tests/**\n  commands:\n    - pytest -v --color=yes Tests/ --opt-level 0\n    - pytest -v --color=yes Tests/ --opt-level 1\n    - pytest -v --color=yes Tests/ --opt-level 2\n    # External tests require distorm3\n    # - pytest -v --color=yes Tests/ --opt-level 0 --external\n    # - pytest -v --color=yes Tests/ --opt-level 1 --external\n\nabout:\n  home: https://github.com/tonybaloney/Pyjion\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.md\n  summary: 'Pyjion - A JIT for Python based upon CoreCLR'\n  description: |\n    Pyjion, a JIT extension for CPython that compiles your Python code\n    into native CIL and executes it using the .NET CLR.\n  dev_url: https://github.com/tonybaloney/Pyjion\n\nextra:\n  recipe-maintainers:\n    - dhirschfeld\n    - tonybaloney\n",
 "smithy_version": "3.16.2",
 "strong_exports": false,
 "url": null,
 "version": "1.2.6"
}