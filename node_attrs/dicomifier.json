{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/392973689.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/414958895.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/414959254.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "boost172"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/427755772.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/433690828.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/503072825.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/514106428.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/514250448.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "boost_cpp1740"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/519120745.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/555631101.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.4"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/560407872.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.0.5"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/608375072.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.1.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/726948833.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/762560264.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "2.2.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/783421465.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python310"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "dicomifier",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Dicomifier is a set of tools to convert Bruker data to DICOM files, and\nDICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo\ntime or subject parameters such as weight or height) throughout the\nconversion process, storing them in JSON format, allowing easy access in\nmultiple environments. The meta-data from Bruker is aligned on the DICOM\ndictionary for unified human and animal processing pipelines.\n",
   "dev_url": "https://github.com/lamyj/dicomifier",
   "doc_url": "https://github.com/lamyj/dicomifier",
   "home": "https://github.com/lamyj/dicomifier",
   "license": "CECILL-B",
   "license_family": "OTHER",
   "license_file": "LICENSE.txt",
   "summary": "Convert data from Bruker to DICOM and from DICOM to NIfTI"
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj"
   ]
  },
  "package": {
   "name": "dicomifier",
   "version": "2.2.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python"
   ],
   "run": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil"
   ]
  },
  "source": {
   "patches": [
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch"
   ],
   "sha256": "21adf8577f3a4475cf977e2132ef06edb15bfb263929a28e4f3dfd4411d45372",
   "url": "https://github.com/lamyj/dicomifier/archive/v2.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null"
   ],
   "imports": [
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "odil",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil",
    "python",
    "python-dateutil"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Dicomifier is a set of tools to convert Bruker data to DICOM files, and\nDICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo\ntime or subject parameters such as weight or height) throughout the\nconversion process, storing them in JSON format, allowing easy access in\nmultiple environments. The meta-data from Bruker is aligned on the DICOM\ndictionary for unified human and animal processing pipelines.\n",
   "dev_url": "https://github.com/lamyj/dicomifier",
   "doc_url": "https://github.com/lamyj/dicomifier",
   "home": "https://github.com/lamyj/dicomifier",
   "license": "CECILL-B",
   "license_family": "OTHER",
   "license_file": "LICENSE.txt",
   "summary": "Convert data from Bruker to DICOM and from DICOM to NIfTI"
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj"
   ]
  },
  "package": {
   "name": "dicomifier",
   "version": "2.2.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python"
   ],
   "run": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil"
   ]
  },
  "source": {
   "patches": [
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch"
   ],
   "sha256": "21adf8577f3a4475cf977e2132ef06edb15bfb263929a28e4f3dfd4411d45372",
   "url": "https://github.com/lamyj/dicomifier/archive/v2.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null"
   ],
   "imports": [
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier"
   ]
  }
 },
 "name": "dicomifier",
 "new_version": "2.2.1-1",
 "new_version_attempts": {
  "2.0.0": 1,
  "2.0.1": 1,
  "2.0.2": 1,
  "2.0.3": 1,
  "2.0.4": 1,
  "2.0.5": 1,
  "2.1.0": 1,
  "2.1.0-1": 125,
  "2.2.0": 1,
  "2.2.0-1": 8,
  "2.2.1": 1,
  "2.2.1-1": 158,
  "2F1.2.1-1": 789
 },
 "new_version_errors": {
  "2.1.0-1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '2.1.0-1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz'\n",
  "2.2.0-1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '2.2.0-1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz'\n",
  "2.2.1-1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '2.2.1-1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz'\n",
  "2F1.2.1-1": "The recipe did not change in the version migration, a URL did not hash, or there is jinja2 syntax the bot cannot handle!\n\nPlease check the URLs in your recipe with version '2F1.2.1-1' to make sure they exist!\n\nWe also found the following errors:\n\n - could not hash URL template 'https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz'\n"
 },
 "osx_64_meta_yaml": {
  "about": {
   "description": "Dicomifier is a set of tools to convert Bruker data to DICOM files, and\nDICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo\ntime or subject parameters such as weight or height) throughout the\nconversion process, storing them in JSON format, allowing easy access in\nmultiple environments. The meta-data from Bruker is aligned on the DICOM\ndictionary for unified human and animal processing pipelines.\n",
   "dev_url": "https://github.com/lamyj/dicomifier",
   "doc_url": "https://github.com/lamyj/dicomifier",
   "home": "https://github.com/lamyj/dicomifier",
   "license": "CECILL-B",
   "license_family": "OTHER",
   "license_file": "LICENSE.txt",
   "summary": "Convert data from Bruker to DICOM and from DICOM to NIfTI"
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "recipe-maintainers": [
    "lamyj",
    "lamyj",
    "lamyj",
    "lamyj"
   ]
  },
  "package": {
   "name": "dicomifier",
   "version": "2.2.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python",
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python"
   ],
   "run": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil",
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil"
   ]
  },
  "source": {
   "patches": [
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch",
    "meta_data.patch"
   ],
   "sha256": "21adf8577f3a4475cf977e2132ef06edb15bfb263929a28e4f3dfd4411d45372",
   "url": "https://github.com/lamyj/dicomifier/archive/v2.2.1.tar.gz"
  },
  "test": {
   "commands": [
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null",
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null"
   ],
   "imports": [
    "dicomifier",
    "dicomifier",
    "dicomifier",
    "dicomifier"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "odil",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil",
    "python",
    "python-dateutil"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "dicomifier"
  ]
 },
 "pinning_version": "2021.11.17.15.51.01",
 "pre_pr_migrator_attempts": {
  "boost_cpp1740": 1,
  "python39": 1
 },
 "pre_pr_migrator_status": {
  "boost_cpp1740": "not solvable: ['linux_64_boost_cpp1.74.0python3.6.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h6c5f636_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'linux_64_boost_cpp1.74.0python3.7.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h6c5f636_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'linux_64_boost_cpp1.74.0python3.8.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h6c5f636_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'linux_64_boost_cpp1.74.0python3.9.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h6c5f636_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'osx_64_boost_cpp1.74.0python3.6.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h5366b73_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'osx_64_boost_cpp1.74.0python3.7.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h5366b73_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'osx_64_boost_cpp1.74.0python3.8.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h5366b73_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n', 'osx_64_boost_cpp1.74.0python3.9.____cpython: Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h5366b73_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n']",
  "python39": "not solvable: ['Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h15fed10_1 requires python_abi 3.6.* *_cp36m, but none of the providers can be installed\\n', 'Encountered problems while solving.\\nProblem: package odil-0.12.0-py36h5366b73_0 requires boost-cpp >=1.70.0,<1.70.1.0a0, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set name = \"dicomifier\" %}\n{% set version = \"2.2.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: 21adf8577f3a4475cf977e2132ef06edb15bfb263929a28e4f3dfd4411d45372\n  patches:\n    - meta_data.patch\n\nbuild:\n  number: 1\n  skip: true  # [py<=35 or win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - boost-cpp\n    - odil >=0.12\n    - pybind11\n    - python\n  run:\n    - boost-cpp\n    - nibabel\n    - numpy\n    - odil >=0.12\n    - python\n    - python-dateutil\n\ntest:\n  imports:\n    - dicomifier\n  commands:\n    - bruker2dicom --help > /dev/null\n    - dicom2nifti --help > /dev/null\n\nabout:\n  home: https://github.com/lamyj/dicomifier\n  license: CECILL-B\n  license_family: OTHER\n  license_file: LICENSE.txt\n  summary: Convert data from Bruker to DICOM and from DICOM to NIfTI\n\n  description: |\n    Dicomifier is a set of tools to convert Bruker data to DICOM files, and \n    DICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo \n    time or subject parameters such as weight or height) throughout the \n    conversion process, storing them in JSON format, allowing easy access in \n    multiple environments. The meta-data from Bruker is aligned on the DICOM \n    dictionary for unified human and animal processing pipelines.\n\n  doc_url: https://github.com/lamyj/dicomifier\n  dev_url: https://github.com/lamyj/dicomifier\n\nextra:\n  recipe-maintainers:\n    - lamyj\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost-cpp",
   "cmake",
   "cxx_compiler_stub",
   "nibabel",
   "ninja",
   "numpy",
   "odil",
   "pybind11",
   "python",
   "python-dateutil"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cxx_compiler_stub",
    "odil",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "cxx_compiler_stub",
    "nibabel",
    "numpy",
    "odil",
    "python",
    "python-dateutil"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "smithy_version": "3.14.3",
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "odil >=0.12",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost-cpp",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python",
    "python-dateutil"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/lamyj/dicomifier/archive/v2.2.1.tar.gz",
 "version": "2.2.1"
}