{
 "PRed": [
  {
   "PR": {
    "head": {
     "ref": "<this_is_not_a_branch>"
    },
    "state": "closed"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/907406998.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "bladerf",
 "hash_type": "sha256",
 "name": "bladerf-split",
 "new_version": "2021.10",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "bladerf",
   "libbladerf",
   "libbladerf-python",
   "libbladerf2"
  ]
 },
 "pinning_version": "2022.04.11.13.50.18",
 "raw_meta_yaml": "{% set version = \"2021.10\" %}\n{% set lib_major_version = \"2\" %}\n{% set build = 0 %}\n\npackage:\n  name: bladerf-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/Nuand/bladeRF/archive/refs/tags/{{ version }}.tar.gz\n  sha256: 77000a42cf5c967aa32e7f8cfa825e21d0298cbeb7c872207ff09f04be718cce\n  patches:\n    - 0001-Add-required-ad9361-files-directly.patch\n    - 0002-Rename-bladeRF.dll-to-bladeRF-2.dll-on-Windows.patch\n    - 0003-Add-special-case-for-loading-windows-DLL-in-python.patch\n    - 0004-Modify-Python-bindings-to-load-major-versioned-libbl.patch\n    - 0005-Add-an-option-for-bundling-external-libraries-on-Win.patch\n    - 0006-Fix-test-linking-with-rt-when-glibc-2.17-is-used.patch\n\nbuild:\n  number: {{ build }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n    - pkg-config\n    - sysroot_linux-64 2.17  # [linux64]\n  host:\n    - libusb\n    - pthreads-win32  # [win]\n\noutputs:\n  - name: libbladerf{{ lib_major_version }}\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - libusb\n        - pthreads-win32  # [win]\n      run:\n        - pthreads-win32  # [win]\n    test:\n      commands:\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libbladeRF${SHLIB_EXT}.{{ lib_major_version }}  # [linux]\n        - test -f $PREFIX/lib/libbladeRF.{{ lib_major_version }}${SHLIB_EXT}  # [osx]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\bladeRF-{{ lib_major_version }}.dll exit 1  # [win]\n  - name: libbladerf\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libbladerf' + lib_major_version, max_pin=False) }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - {{ pin_subpackage('libbladerf' + lib_major_version, exact=True) }}\n      run:\n        - {{ pin_subpackage('libbladerf' + lib_major_version, exact=True) }}\n    test:\n      commands:\n        # verify that headers get installed\n        - test -f $PREFIX/include/bladeRF1.h  # [not win]\n        - test -f $PREFIX/include/bladeRF2.h  # [not win]\n        - test -f $PREFIX/include/libbladeRF.h  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\bladeRF1.h exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\bladeRF2.h exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\libbladeRF.h exit 1  # [win]\n\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libbladeRF${SHLIB_EXT}.{{ lib_major_version }}  # [linux]\n        - test -f $PREFIX/lib/libbladeRF.{{ lib_major_version }}${SHLIB_EXT}  # [osx]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\bladeRF-{{ lib_major_version }}.dll exit 1  # [win]\n\n        # verify that pkgconfig files get installed\n        - test -f $PREFIX/lib/pkgconfig/libbladeRF.pc  # [unix]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\pkgconfig\\\\libbladeRF.pc exit 1  # [win]\n  - name: libbladerf-python\n    build:\n      string: py_{{ build }}\n      noarch: python\n      script: python -m pip install -vv host/libraries/libbladeRF_bindings/python\n      entry_points:\n        - bladerf-tool = bladerf._tool:main\n    requirements:\n      build:\n        # cross-compilation dependencies\n        - python >=3.6                        # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}  # [build_platform != target_platform]\n      host:\n        - cffi\n        - {{ pin_subpackage('libbladerf' + lib_major_version, exact=True) }}\n        - pip\n        - python >=3.6\n      run:\n        - cffi\n        - libbladerf{{ lib_major_version }} {{ version }}\n        - python >=3.6\n    test:\n      imports:\n        - bladerf\n      commands:\n        - bladerf-tool version\n  - name: bladerf\n    script: install.sh  # [unix]\n    script: install.bat  # [not unix]\n    build:\n      # instructions for manually linking udev rules\n      post-link: post-link  # [linux]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - ninja\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n      run:\n        - {{ pin_subpackage('libbladerf' + lib_major_version, exact=True) }}\n        - {{ pin_subpackage('libbladerf-python', exact=True) }}\n        - pthreads-win32  # [win]\n    test:\n      commands:\n        # verify that executables get installed\n        - bladeRF-cli --version\n        - bladeRF-cli --lib-version\n        - bladeRF-fsk --help\n\n        # verify that udev rule gets installed\n        - test -f $PREFIX/lib/udev/rules.d/88-nuand-bladerf1.rules  # [linux]\n        - test -f $PREFIX/lib/udev/rules.d/88-nuand-bladerf2.rules  # [linux]\n        - test -f $PREFIX/lib/udev/rules.d/88-nuand-bootloader.rules  # [linux]\n\nabout:\n  home: https://www.nuand.com/\n  license: LGPL-2.1-or-later AND GPL-2.0-or-later\n  license_family: LGPL\n  license_file:\n    - COPYING\n    - legal/licenses/\n  summary: 'Host software for bladeRF source software radio devices.'\n  description: >\n    This software supports the Nuand bladeRF and bladeRF Micro USB 3.0 Software\n    Defined Radio (SDR) devices:\n\n      - `libbladerf{{ lib_major_version }}` contains the library for bladeRF devices\n      - `libbladerf` contains the development files for compiling against the bladeRF library\n      - `libbladerf-python` contains the Python bindings for the bladeRF library\n      - `bladerf` package contains command line tools for using the devices\n\n    For Linux users of `bladerf`, you will likely want to link the provided udev\n    rule into your system installation in order for the hardware to have the\n    correct permissions:\n\n        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/88-nuand-bladerf1.rules /etc/udev/rules.d/\n        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/88-nuand-bladerf2.rules /etc/udev/rules.d/\n        sudo ln -s $CONDA_PREFIX/lib/udev/rules.d/88-nuand-bootloader.rules /etc/udev/rules.d/\n        sudo udevadm control --reload\n        sudo udevadm trigger\n\n    Then, make sure your user account belongs to the plugdev group in order to\n    be able to access your device:\n\n        sudo usermod -a -G plugdev <user>\n\n    You may have to restart for this change to take effect.\n  doc_url: https://github.com/Nuand/bladeRF/wiki\n  dev_url: https://github.com/Nuand/bladeRF\n\nextra:\n  feedstock-name: bladerf\n  recipe-maintainers:\n    - ryanvolz\n",
 "smithy_version": "3.19.0",
 "strong_exports": false,
 "url": "https://github.com/Nuand/bladeRF/archive/refs/tags/2021.10.tar.gz",
 "version": "2021.10"
}