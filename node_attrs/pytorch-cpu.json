{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/241520094.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "CompilerRebuild",
    "migrator_version": 1,
    "name": "Python 3.7, GCC 7, R 3.5.1, openBLAS 0.3.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/336081523.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/392303271.json"
   },
   "data": {
    "bot_rerun": 1597087694.6140175,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/394415328.json"
   },
   "data": {
    "bot_rerun": 1597087694.614917,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/465691856.json"
   },
   "data": {
    "bot_rerun": 1607914885.0663946,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/465697317.json"
   },
   "data": {
    "bot_rerun": 1607914885.0665913,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/539096345.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/542525878.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/546237573.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "windows_cuda"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": false,
 "branch": "master",
 "conda-forge.yml": {},
 "feedstock_name": "pytorch-cpu",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "feedstock-name": "pytorch-cpu",
   "recipe-maintainers": [
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre"
   ]
  },
  "outputs": [
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   }
  ],
  "package": {
   "name": "pytorch-recipe",
   "version": "1.7.1"
  },
  "source": {
   "git_rev": "57bffc3a8e4fee0cce31e1ff1f662ccf7b16db57",
   "git_url": "https://github.com/pytorch/pytorch.git",
   "patches": [
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "git",
    "libgomp",
    "patch"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cffi",
    "cmake",
    "cudnn",
    "future",
    "git",
    "libblas",
    "libuv",
    "magma",
    "mkl",
    "mkl-devel",
    "nccl",
    "ninja",
    "numpy",
    "pip",
    "pkg-config",
    "python",
    "pyyaml",
    "requests",
    "setuptools",
    "six",
    "typing"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cffi",
    "cudnn",
    "future",
    "libblas",
    "magma",
    "mkl",
    "ninja",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hypothesis",
    "mock",
    "pip",
    "pydot",
    "pytest",
    "setuptools",
    "tabulate"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "feedstock-name": "pytorch-cpu",
   "recipe-maintainers": [
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre"
   ]
  },
  "outputs": [
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py37h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda92py38h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda102py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda100py39h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "cuda_compiler_stub",
      "patch",
      "git",
      "libgomp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "cudnn",
      "nccl",
      "magma",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "cudnn",
      "magma",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "mock",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cuda101py36h1234567_1",
     "track_features": null
    },
    "name": "pytorch-gpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   }
  ],
  "package": {
   "name": "pytorch-recipe",
   "version": "1.7.1"
  },
  "source": {
   "git_rev": "57bffc3a8e4fee0cce31e1ff1f662ccf7b16db57",
   "git_url": "https://github.com/pytorch/pytorch.git",
   "patches": [
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff"
   ]
  }
 },
 "name": "pytorch-recipe",
 "new_version": false,
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "feedstock-name": "pytorch-cpu",
   "recipe-maintainers": [
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre"
   ]
  },
  "outputs": [
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "patch",
      "git",
      "llvm-openmp"
     ],
     "host": [
      "cmake",
      "git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv",
      "pkg-config"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "llvm-openmp",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "build_pytorch.sh",
    "test": {
     "commands": [
      "OMP_NUM_THREADS=4 python ./test/run_test.py || true",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   }
  ],
  "package": {
   "name": "pytorch-recipe",
   "version": "1.7.1"
  },
  "source": {
   "git_rev": "57bffc3a8e4fee0cce31e1ff1f662ccf7b16db57",
   "git_url": "https://github.com/pytorch/pytorch.git",
   "patches": [
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "git",
    "llvm-openmp",
    "patch"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cffi",
    "cmake",
    "future",
    "git",
    "libblas",
    "libuv",
    "mkl",
    "mkl-devel",
    "ninja",
    "numpy",
    "pip",
    "pkg-config",
    "python",
    "pyyaml",
    "requests",
    "setuptools",
    "six",
    "typing"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cffi",
    "future",
    "libblas",
    "llvm-openmp",
    "mkl",
    "ninja",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hypothesis",
    "pip",
    "pydot",
    "pytest",
    "setuptools",
    "tabulate"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "pytorch",
   "pytorch-cpu",
   "pytorch-gpu"
  ]
 },
 "pinning_version": "2020.12.28.19.16.11",
 "pre_pr_migrator_status": {
  "cuda110": "not solvable: master: ['linux_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5-cuda9.0_0 requires cudatoolkit >=9.0,<9.1, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5-cuda9.0_0 requires cudatoolkit >=9.0,<9.1, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5-cuda9.0_0 requires cudatoolkit >=9.0,<9.1, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5-cuda9.0_0 requires cudatoolkit >=9.0,<9.1, but none of the providers can be installed\\n']",
  "python39": "bot error: master: Traceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 1035, in main\n    migrator_uid, pr_json = run(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/auto_tick.py\", line 221, in run\n    eval_cmd(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 183, in eval_cmd\n    c.check_returncode()\n  File \"/usr/share/miniconda/envs/run_env/lib/python3.8/subprocess.py\", line 444, in check_returncode\n    raise CalledProcessError(self.returncode, self.args, self.stdout,\nsubprocess.CalledProcessError: Command 'conda smithy rerender -c auto --no-check-uptodate' returned non-zero exit status 1.\n",
  "windows_cuda": "not solvable: master: ['linux_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-ha8d7eb6_0 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-ha8d7eb6_0 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-ha8d7eb6_0 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'linux_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides cudatoolkit 8.0* needed by cudnn-7.0.5-cuda8.0_0\\n', 'linux_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-ha8d7eb6_0 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version10.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.1numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.1numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.1numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.1numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.2numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.2numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.2numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version10.2numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.6.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.7.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.16python3.8.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: nothing provides requested nccl 2.7.8.1.*\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n', 'win_64_cuda_compiler_version11.0numpy1.19python3.9.____cpython: Encountered problems while solving.\\nProblem: package cudnn-7.6.5.32-h2cb8ba8_1 requires cudatoolkit 10.0|10.0.*, but none of the providers can be installed\\n']"
 },
 "raw_meta_yaml": "{% set version = \"1.7.1\" %}\n{% set commit = \"57bffc3a8e4fee0cce31e1ff1f662ccf7b16db57\" %}\n\npackage:\n  name: pytorch-recipe\n  version: {{ version }}\n\nsource:\n  # for local testing use a tarball including submodules\n  git_url: https://github.com/pytorch/pytorch.git\n  git_tag: {{ commit }}\n  patches:\n    # https://github.com/pytorch/pytorch/pull/49281\n    - fix_std_stdint.patch\n    # cpp_extension patch does not apply cleanly on master\n    # we should try to upstream again on the next version\n    - cpp_extension.patch\n    # It is unclear that upstream will allow us to integrate the \n    # shared linker path bellow until their intel compiler issues\n    # are resolved.\n    - remove_shared_linker_flag_override.patch\n    - nccl_socket.patch\n    - fix_dispatch_apply_auto.patch\n    - fix_map_anonymous.patch\n    - fix_msvc_build_issue.diff\n\nbuild:\n  number: 1\n\noutputs:\n  - name: pytorch\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == \"None\"]\n      detect_binary_files_with_prefix: False\n    script: build_pytorch.sh  # [not win]\n    script: bld_pytorch.bat   # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('cuda') }}    # [cuda_compiler_version != \"None\"]\n        # Dec 2020: it seems that git is broken on windows, so we use m2-git\n        - patch     # [not win]\n        - m2-patch  # [win]\n        - git       # [not win]\n        - m2-git    # [win]\n        - libgomp   # [linux]\n        - llvm-openmp    # [osx]\n      host:\n        # For some reason cmake and ninja need to be installed\n        # alongside python in the host\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/21#discussion_r541397252\n        - cmake\n        - git       # [not win]\n        - m2-git    # [win]\n        - ninja\n        # GPU requirements\n        - cudnn                           # [cuda_compiler_version != \"None\"]\n        - nccl                            # [cuda_compiler_version != \"None\"]\n        - magma                           # [cuda_compiler_version != \"None\"]\n        # other requirements\n        - python\n        - numpy\n        # dataclasses is a backport of python 3.7 module\n        - dataclasses   # [py==36]\n        - pip\n        - setuptools\n        - pyyaml\n        - requests\n        - future\n        - six\n        - cffi\n        - mkl-devel {{ mkl }}\n        - mkl {{ mkl }}\n        - libblas * *_mkl\n        - typing\n        - libuv\n        - pkg-config  # [unix]\n      run:\n        - mkl {{ mkl }}\n        - libblas * *_mkl\n        - llvm-openmp    # [osx]\n        #- _pytorch_select ==0.1             # [cuda_compiler_version == \"None\"]\n        #- _pytorch_select ==0.2             # [cuda_compiler_version != \"None\"]\n        # GPU requirements without run_exports\n        - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != \"None\"]\n        - {{ pin_compatible('magma', max_pin='x.x.x') }}      # [cuda_compiler_version != \"None\"]\n        # other requirements\n        - python\n        - dataclasses   # [py==36]\n        - {{ pin_compatible('numpy') }}\n        - cffi\n        # if future isn't installed on python 3, `pip check` can give\n        # the user an error\n        - future\n        - typing  # [py2k]\n        # Need ninja to load C++ extensions\n        - ninja\n\n    test:\n      requires:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - setuptools\n        - hypothesis\n        - pytest\n        - tabulate\n        - pydot\n        - mock  # [linux]\n        - pip\n      imports:\n        - torch\n      source_files:\n        - test\n      commands:\n        - OMP_NUM_THREADS=4 python ./test/run_test.py || true  # [not win]\n        - python ./test/run_test.py  # [win]\n        # Run pip check so as to ensure that all pytorch packages are installed\n        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/24\n        - pip check\n\n  - name: pytorch-cpu   # [cuda_compiler_version == \"None\"]\n  - name: pytorch-gpu   # [cuda_compiler_version != \"None\"]\n    build:\n      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == \"None\"]\n      detect_binary_files_with_prefix: False\n      # weigh down cpu implementation and give cuda preference\n      track_features:\n        - pytorch-cpu                                      # [cuda_compiler_version == \"None\"]\n    requirements:\n      run:\n        - {{ pin_subpackage(\"pytorch\", exact=True) }}\n    test:\n      commands:\n        - echo \"hello world\"\n\nabout:\n  home: https://pytorch.org/\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.\n\nextra:\n  recipe-maintainers:\n    - hmaarrfk\n    - sodre\n  feedstock-name: pytorch-cpu\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cffi",
   "cmake",
   "cuda_compiler_stub",
   "cudnn",
   "cxx_compiler_stub",
   "future",
   "git",
   "libblas",
   "libgomp",
   "libuv",
   "llvm-openmp",
   "m2-git",
   "m2-patch",
   "magma",
   "mkl",
   "mkl-devel",
   "nccl",
   "ninja",
   "numpy",
   "patch",
   "pip",
   "pkg-config",
   "python",
   "pytorch",
   "pyyaml",
   "requests",
   "setuptools",
   "six",
   "typing"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "git",
    "libgomp",
    "llvm-openmp",
    "m2-git",
    "m2-patch",
    "patch"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "cmake",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cudnn",
    "cxx_compiler_stub",
    "future",
    "git",
    "libblas",
    "libuv",
    "m2-git",
    "magma",
    "mkl",
    "mkl-devel",
    "nccl",
    "ninja",
    "numpy",
    "openmp",
    "pip",
    "pkg-config",
    "python",
    "pyyaml",
    "requests",
    "setuptools",
    "six",
    "typing"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cffi",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cudnn",
    "cxx_compiler_stub",
    "future",
    "libblas",
    "llvm-openmp",
    "magma",
    "mkl",
    "ninja",
    "numpy",
    "openmp",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hypothesis",
    "mock",
    "pip",
    "pydot",
    "pytest",
    "setuptools",
    "tabulate"
   ]
  }
 },
 "smithy_version": "3.8.5",
 "strong_exports": false,
 "time": 1568135301.1552057,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "git",
    "libgomp",
    "llvm-openmp",
    "m2-git",
    "m2-patch",
    "patch"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cffi",
    "cmake",
    "cudnn",
    "future",
    "git",
    "libblas * *_mkl",
    "libuv",
    "m2-git",
    "magma",
    "mkl 2020",
    "mkl-devel 2020",
    "nccl",
    "ninja",
    "numpy",
    "pip",
    "pkg-config",
    "python",
    "pyyaml",
    "requests",
    "setuptools",
    "six",
    "typing"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cffi",
    "cudnn",
    "future",
    "libblas * *_mkl",
    "llvm-openmp",
    "magma",
    "mkl 2020",
    "ninja",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hypothesis",
    "mock",
    "pip",
    "pydot",
    "pytest",
    "setuptools",
    "tabulate"
   ]
  }
 },
 "url": null,
 "version": "1.7.1",
 "win_64_meta_yaml": {
  "about": {
   "home": "https://pytorch.org/",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "PyTorch is an optimized tensor library for deep learning using GPUs and CPUs."
  },
  "build": {
   "number": "1"
  },
  "extra": {
   "feedstock-name": "pytorch-cpu",
   "recipe-maintainers": [
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre",
    "hmaarrfk",
    "sodre"
   ]
  },
  "outputs": [
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py37h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py38h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py39h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1"
    },
    "name": "pytorch",
    "requirements": {
     "build": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "m2-patch",
      "m2-git"
     ],
     "host": [
      "cmake",
      "m2-git",
      "ninja",
      "python",
      "numpy",
      "pip",
      "setuptools",
      "pyyaml",
      "requests",
      "future",
      "six",
      "cffi",
      "mkl-devel 2020",
      "mkl 2020",
      "libblas * *_mkl",
      "typing",
      "libuv"
     ],
     "run": [
      "mkl 2020",
      "libblas * *_mkl",
      "python",
      "numpy",
      "cffi",
      "future",
      "ninja"
     ]
    },
    "script": "bld_pytorch.bat",
    "test": {
     "commands": [
      "python ./test/run_test.py",
      "pip check"
     ],
     "imports": [
      "torch"
     ],
     "requires": [
      "c_compiler_stub",
      "cxx_compiler_stub",
      "setuptools",
      "hypothesis",
      "pytest",
      "tabulate",
      "pydot",
      "pip"
     ],
     "source_files": [
      "test"
     ]
    }
   },
   {
    "build": {
     "detect_binary_files_with_prefix": false,
     "string": "cpu_py36h1234567_1",
     "track_features": [
      "pytorch-cpu"
     ]
    },
    "name": "pytorch-cpu",
    "requirements": {
     "run": [
      "pytorch"
     ]
    },
    "test": {
     "commands": [
      "echo \"hello world\""
     ]
    }
   }
  ],
  "package": {
   "name": "pytorch-recipe",
   "version": "1.7.1"
  },
  "source": {
   "git_rev": "57bffc3a8e4fee0cce31e1ff1f662ccf7b16db57",
   "git_url": "https://github.com/pytorch/pytorch.git",
   "patches": [
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff",
    "fix_std_stdint.patch",
    "cpp_extension.patch",
    "remove_shared_linker_flag_override.patch",
    "nccl_socket.patch",
    "fix_dispatch_apply_auto.patch",
    "fix_map_anonymous.patch",
    "fix_msvc_build_issue.diff"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "m2-git",
    "m2-patch"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cffi",
    "cmake",
    "future",
    "libblas",
    "libuv",
    "m2-git",
    "mkl",
    "mkl-devel",
    "ninja",
    "numpy",
    "pip",
    "python",
    "pyyaml",
    "requests",
    "setuptools",
    "six",
    "typing"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cffi",
    "future",
    "libblas",
    "mkl",
    "ninja",
    "numpy",
    "python",
    "pytorch"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "hypothesis",
    "pip",
    "pydot",
    "pytest",
    "setuptools",
    "tabulate"
   ]
  }
 }
}