{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/653874728.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "r410"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  }
 },
 "feedstock_name": "r-cmdfun",
 "hash_type": "sha256",
 "name": "r-cmdfun",
 "new_version": "1.0.2",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "r-cmdfun"
  ]
 },
 "pinning_version": "2021.05.25.06.47.12",
 "raw_meta_yaml": "{% set version = '1.0.2' %}\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-cmdfun\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  url:\n    - {{ cran_mirror }}/src/contrib/cmdfun_{{ version }}.tar.gz\n    - {{ cran_mirror }}/src/contrib/Archive/cmdfun/cmdfun_{{ version }}.tar.gz\n  sha256: 7288d35777260156bf67ea0c036af12e3130b51378f80a9fc5955111e1c16cdd\n\nbuild:\n  merge_build_host: True  # [win]\n  number: 0\n  noarch: generic\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - {{ posix }}zip               # [win]\n  host:\n    - r-base\n    - r-r.utils\n    - r-magrittr\n    - r-purrr\n    - r-rlang\n    - r-testthat\n    - r-usethis\n  run:\n    - r-base\n    - r-r.utils\n    - r-magrittr\n    - r-purrr\n    - r-rlang\n    - r-testthat\n    - r-usethis\n\ntest:\n  commands:\n    - $R -e \"library('cmdfun')\"           # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('cmdfun')\\\"\"  # [win]\n\nabout:\n  home: https://snystrom.github.io/cmdfun/, https://github.com/snystrom/cmdfun\n  license: MIT\n  summary: Writing interfaces to command line software is cumbersome. 'cmdfun' provides a framework\n    for building function calls to seamlessly interface with shell commands by allowing\n    lazy evaluation of command line arguments. 'cmdfun' also provides methods for handling\n    user-specific paths to tool installs or secrets like API keys. Its focus is to equally\n    serve package builders who wish to wrap command line software, and to help analysts\n    stay inside R when they might usually leave to execute non-R software.\n  license_family: MIT\n  license_file:\n    - '{{ environ[\"PREFIX\"] }}/lib/R/share/licenses/MIT'\n    - LICENSE\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n\n# Package: cmdfun\n# Type: Package\n# Title: Framework for Building Interfaces to Shell Commands\n# Version: 1.0.2\n# Authors@R: person(\"Spencer\", \"Nystrom\", email = \"nystromdev@gmail.com\", role = c(\"aut\", \"cre\", \"cph\"), comment = c(ORCID = \"0000-0003-1000-1579\"))\n# Description: Writing interfaces to command line software is cumbersome. 'cmdfun' provides a framework for building function calls to seamlessly interface with shell commands by allowing lazy evaluation of command line arguments. 'cmdfun' also provides methods for handling user-specific paths to tool installs or secrets like API keys. Its focus is to equally serve package builders who wish to wrap command line software, and to help analysts stay inside R when they might usually leave to execute non-R software.\n# License: MIT + file LICENSE\n# Encoding: UTF-8\n# LazyData: true\n# Imports: magrittr, purrr, R.utils, rlang, testthat, usethis, utils\n# RoxygenNote: 7.0.2\n# Suggests: cli, covr, knitr, processx, rmarkdown\n# VignetteBuilder: knitr\n# URL: https://snystrom.github.io/cmdfun/, https://github.com/snystrom/cmdfun\n# BugReports: https://github.com/snystrom/cmdfun\n# NeedsCompilation: no\n# Packaged: 2020-10-02 14:16:21 UTC; snystrom\n# Author: Spencer Nystrom [aut, cre, cph] (<https://orcid.org/0000-0003-1000-1579>)\n# Maintainer: Spencer Nystrom <nystromdev@gmail.com>\n# Repository: CRAN\n# Date/Publication: 2020-10-10 09:30:03 UTC\n",
 "smithy_version": "3.10.1",
 "strong_exports": false,
 "url": [
  "https://cran.r-project.org/src/contrib/cmdfun_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/cmdfun/cmdfun_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/cmdfun_1.0.2.tar.gz",
  "https://cran.r-project.org/src/contrib/Archive/cmdfun/cmdfun_1.0.2.tar.gz"
 ],
 "version": "1.0.2"
}