{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/432148071.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu67"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/432148689.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/432150134.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "python38"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/479748114.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.21"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/500968704.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 2,
    "migrator_version": 0,
    "name": "python39"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/542649972.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "icu68"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/551743653.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "MigrationYaml",
    "migrator_object_version": 1,
    "migrator_version": 0,
    "name": "pypy37"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_object_version",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/641768099.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/642585721.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/700371993.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.22"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/716769137.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.23"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/991622723.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "0.24"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 246, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 192, in parse_meta_yaml\n    raise RuntimeError(\nRuntimeError: cond build error: NameError(\"name 'fp_w' is not defined\")\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 180, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 233, in _parse_meta_yaml_impl\n    fp_w.write(fp_r.read())\nNameError: name 'fp_w' is not defined\n\n",
 "branch": "main",
 "conda-forge.yml": {
  "bot": {
   "automerge": true
  },
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "libiio",
 "hash_type": "sha256",
 "name": "libiio-split",
 "new_version": "0.24",
 "new_version_attempts": {
  "0.21": 823,
  "0.22": 1,
  "0.23": 1,
  "0.24": 1
 },
 "new_version_errors": {
  "0.21": "We found a problem parsing the recipe: \n\nwhile parsing a block mapping\n  in \"<unicode string>\", line 46, column 3:\n      commands:\n      ^ (line: 46)\nexpected <block end>, but found ','\n  in \"<unicode string>\", line 49, column 19:\n            \"iio_attr\",\n                      ^ (line: 49)"
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libiio",
   "libiio-c",
   "pylibiio"
  ]
 },
 "pinning_version": "2022.07.08.02.15.19",
 "raw_meta_yaml": "{% set version = \"0.24\" %}\n{% set build = 0 %}\n\npackage:\n  name: libiio-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/analogdevicesinc/libiio/archive/v{{ version }}.tar.gz\n  sha256: a2b5d848531ea64fd9f95327dfd5a588bd227d9577281ec375e822702c6a52d5\n\nbuild:\n  number: {{ build }}\n\noutputs:\n  - name: libiio-c\n    script: install_libiio.bat  # [win]\n    script: install_libiio.sh  # [not win]\n    build:\n      run_exports:\n        - {{ pin_subpackage('libiio-c', max_pin='x') }}\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - cmake\n        - make  # [not win]\n        - ninja  # [win]\n        - pkg-config\n        - sysroot_linux-64 2.17  # [linux64]\n      host:\n        - bison  # [linux]\n        - flex  # [linux]\n        - libaio  # [linux]\n        - libusb >=1\n        - libxml2\n        - zstd\n      run_constrained:\n        # require the MACOSX_DEPLOYMENT_TARGET set in conda_build_config.yaml\n        # (10.11 to be able to compile bonjour support)\n        # (10.12 to have clock_gettime)\n        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx and x86_64]\n    test:\n      commands:\n        # verify that executables can be run\n        {% set cmds = [\"iio_attr\", \"iio_genxml\", \"iio_info\", \"iio_readdev\"] %}\n        {% set cmds = cmds + [\"iio_reg\", \"iio_writedev\"] %}\n        {% set cmds = cmds + [\"iio_adi_xflow_check\"] %}  # [not win]\n        {% set cmds = cmds + [\"iiod\"] %}  # [linux]\n        {% for each_cmd in cmds %}\n        - {{ each_cmd }} --help\n        {% endfor %}\n\n        # verify that headers get installed\n        - test -f $PREFIX/include/iio.h  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\include\\\\iio.h exit 1  # [win]\n\n        # verify that libraries get installed\n        - test -f $PREFIX/lib/libiio${SHLIB_EXT}  # [not win]\n        - if not exist %PREFIX%\\\\Library\\\\bin\\\\libiio.dll exit 1  # [win]\n        - if not exist %PREFIX%\\\\Library\\\\lib\\\\libiio.lib exit 1  # [win]\n\n  - name: pylibiio\n    script: install_pylibiio.bat  # [win]\n    script: install_pylibiio.sh  # [not win]\n    build:\n      string: py_{{ build }}\n      noarch: python\n    requirements:\n      build:\n        - cmake\n        - make  # [not win]\n        - ninja  # [win]\n        # cross-compilation dependencies\n        - python >=3.6                        # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}  # [build_platform != target_platform]\n      host:\n        - {{ pin_subpackage('libiio-c', exact=True) }}\n        - pip\n        - python >=3.6\n        - setuptools\n      run:\n        - {{ pin_subpackage('libiio-c', max_pin='x') }}\n        - python\n    test:\n      imports:\n        - iio\n\n  - name: libiio\n    build:\n      run_exports:\n        - {{ pin_subpackage('libiio-c', max_pin='x') }}\n    requirements:\n      run:\n        - {{ pin_subpackage('libiio-c', exact=True) }}\n        - {{ pin_subpackage('pylibiio', exact=True) }}\n    test:\n      commands:\n        - iio_info --help\n      imports:\n        - iio\n\nabout:\n  home: https://github.com/analogdevicesinc/libiio\n  license: LGPL-2.1-or-later AND GPL-3.0-or-later\n  license: LGPL-2.1-or-later AND GPL-3.0-or-later AND Unlicense AND ISC AND BSD-2-Clause  # [win]\n  license_family: LGPL\n  license_file:\n    - COPYING.txt\n    - COPYING_GPL.txt\n    - deps/mdns/LICENSE  # [win]\n    - deps/wingetopt/LICENSE  # [win]\n  summary: Library for interfacing with Linux IIO devices\n  description: |\n    libiio is used to interface to the Linux Industrial Input/Output (IIO) Subsystem.\n    The Linux IIO subsystem is intended to provide support for devices that in some\n    sense are analog to digital or digital to analog converters (ADCs, DACs). This\n    includes, but is not limited to ADCs, Accelerometers, Gyros, IMUs, Capacitance to\n    Digital Converters (CDCs), Pressure Sensors, Color, Light and Proximity Sensors,\n    Temperature Sensors, Magnetometers, DACs, DDS (Direct Digital Synthesis), PLLs\n    (Phase Locked Loops), Variable/Programmable Gain Amplifiers (VGA, PGA), and RF\n    transceivers. You can use libiio natively on an embedded Linux target (local mode),\n    or use libiio to communicate remotely to that same target from a host Linux,\n    Windows or MAC over USB or Ethernet or Serial.\n  doc_url: https://analogdevicesinc.github.io/libiio/\n  dev_url: https://github.com/analogdevicesinc/libiio\n\nextra:\n  feedstock-name: libiio\n  recipe-maintainers:\n    - ryanvolz\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/analogdevicesinc/libiio/archive/v0.24.tar.gz",
 "version": "0.24"
}