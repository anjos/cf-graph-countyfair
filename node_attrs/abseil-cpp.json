{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/371375644.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "ArchRebuild",
    "migrator_version": 1,
    "name": "aarch64 and ppc64le addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/380458875.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200225"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/383942126.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200225.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/407528153.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200225.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/482140481.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "OSXArm",
    "migrator_version": 1,
    "name": "arm osx addition"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "name"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/492653838.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200923"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/506933853.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200923.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/509543330.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200923.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/557784015.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20200923.3"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/603067472.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20210324.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/619581302.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20210324.1"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/659210690.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20210324.2"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/778066416.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20211102.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  },
  {
   "PR": {
    "__lazy_json__": "pr_json/984117572.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "20220623.0"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  }
 },
 "feedstock_name": "abseil-cpp",
 "hash_type": "sha256",
 "name": "abseil-split",
 "new_version": "20220623.0",
 "new_version_attempts": {
  "20200225.2": 1,
  "20200923": 1,
  "20200923.1": 1,
  "20200923.2": 1,
  "20200923.3": 1,
  "20210324.0": 1,
  "20210324.1": 1,
  "20210324.2": 1,
  "20211102.0": 1,
  "20220623.0": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libabseil",
   "libabseil-static"
  ]
 },
 "pinning_version": "2022.06.30.11.45.20",
 "raw_meta_yaml": "{% set version = \"20220623.0\" %}\n\n# shared builds for flags_* libraries are not supported on windows, see\n# https://github.com/abseil/abseil-cpp/pull/1115\n{% set absl_libs_always_static_on_win = [\n    \"flags\", \"flags_commandlineflag\", \"flags_config\", \"flags_marshalling\", \"flags_parse\",\n    \"flags_private_handle_accessor\", \"flags_program_name\", \"flags_reflection\", \"flags_usage\"\n] %}\n\n{% set absl_libs = absl_libs_always_static_on_win + [\n    \"base\", \"civil_time\", \"cord\", \"cordz_functions\", \"cordz_handle\", \"cordz_info\",\n    \"cordz_sample_token\", \"examine_stack\", \"exponential_biased\", \"failure_signal_handler\",\n    \"hash\", \"hashtablez_sampler\", \"int128\", \"log_severity\", \"low_level_hash\", \"periodic_sampler\",\n    \"random_distributions\", \"random_seed_gen_exception\", \"random_seed_sequences\", \"raw_hash_set\",\n    \"scoped_set_env\", \"spinlock_wait\", \"stacktrace\", \"status\", \"statusor\", \"strerror\", \"strings\",\n    \"symbolize\", \"synchronization\", \"time\", \"time_zone\"\n] %}\n\npackage:\n  name: abseil-split\n  version: {{ version }}\n\nsource:\n  url: https://github.com/abseil/abseil-cpp/archive/{{ version }}.tar.gz\n  sha256: 4208129b49006089ba1d6710845a45e31c59b0ab6bff9e5788a87f55c5abd602\n  patches:\n    - patches/0001-patch-out-the-build-issue-on-clang4-osx.patch\n    - patches/0002-fix-for-linking-to-the-CoreFoundation-framework-on-O.patch\n    - patches/0003-remove-ignore-4221-from-ABSL_MSVC_LINKOPTS.patch\n    - patches/0004-add-missing-osx-workaround.patch\n    # backport of https://github.com/abseil/abseil-cpp/pull/1115 (two commits)\n    - patches/0005-alphabetize-ABSL_INTERNAL_DLL_TARGETS.patch\n    - patches/0006-avoid-building-static-libs-on-windows-when-BUILD_SHA.patch\n\nbuild:\n  number: 1\n\noutputs:\n  {% if shared_libs == \"ON\" %}\n  # default behaviour is shared; however note that upstream does not support\n  # fully shared builds on windows, and some static libs will remain, see above\n  - name: libabseil\n    script: build-abseil.sh   # [unix]\n    script: build-abseil.bat  # [win]\n    build:\n      string: cxx{{ cxx_standard }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n      run_exports:\n        - libabseil ={{ version }}=cxx{{ cxx_standard }}*\n\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      run_constrained:\n        # make sure we don't co-install with old version of old package name\n        - abseil-cpp ={{ version }}\n\n    test:\n      commands:\n        # windows-only (almost-)all-in-one DLL + import library\n        - if not exist %LIBRARY_BIN%\\\\abseil_dll.dll exit 1           # [win]\n        - if not exist %LIBRARY_LIB%\\\\abseil_dll.lib exit 1           # [win]\n\n        # absl_* libraries\n      {% for each_lib in absl_libs %}\n        # presence of shared libs\n        - test -f $PREFIX/lib/libabsl_{{ each_lib }}${SHLIB_EXT}      # [unix]\n        # absence of static libs\n        - test ! -f $PREFIX/lib/libabsl_{{ each_lib }}.a              # [unix]\n\n        # some static libs remain on windows even for shared builds, see above\n        {% if each_lib in absl_libs_always_static_on_win %}\n        - if not exist %LIBRARY_LIB%\\\\absl_{{ each_lib }}.lib exit 1  # [win]\n        {% else %}\n        - if exist %LIBRARY_LIB%\\\\absl_{{ each_lib }}.lib exit 1      # [win]\n        {% endif %}\n      {% endfor %}\n\n  {% else %}  # shared_libs == \"OFF\"\n\n  - name: libabseil-static\n    script: build-abseil.sh   # [unix]\n    script: build-abseil.bat  # [win]\n    build:\n      string: cxx{{ cxx_standard }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n      # no run_export necessary for static lib\n\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - ninja\n      run_constrained:\n        # make sure we don't co-install with old version of old package name\n        - abseil-cpp ={{ version }}\n    test:\n      commands:\n        # absence of DLL on windows\n        - if exist %LIBRARY_BIN%\\\\abseil_dll.dll exit 1               # [win]\n        - if exist %LIBRARY_LIB%\\\\abseil_dll.lib exit 1               # [win]\n\n      {% for each_lib in absl_libs %}\n        # presence of static libs\n        - test -f $PREFIX/lib/libabsl_{{ each_lib }}.a                # [unix]\n        - if not exist %LIBRARY_LIB%\\\\absl_{{ each_lib }}.lib exit 1  # [win]\n        # absence of shared libs\n        - test ! -f $PREFIX/lib/libabsl_{{ each_lib }}${SHLIB_EXT}    # [unix]\n      {% endfor %}\n\n  {% endif %}  # shared_libs == \"ON\" / \"OFF\"\n\n  # for compatibility with previous behavior of \"abseil-cpp\"\n  {% if (unix and ((shared_libs == \"ON\") and (cxx_standard == \"17\")))\n        or (win and ((shared_libs == \"OFF\") and (cxx_standard == \"11\"))) %}\n  - name: abseil-cpp\n    build:\n      run_exports:                                                # [unix]\n        - libabseil ={{ version }}=cxx{{ cxx_standard }}*         # [unix]\n    requirements:\n      host:\n        # cxx-versions enforced through jinja-if-condition above\n        - {{ pin_subpackage('libabseil', exact=True) }}           # [unix]\n        - {{ pin_subpackage('libabseil-static', exact=True) }}    # [win]\n      run:\n        - {{ pin_subpackage('libabseil', exact=True) }}           # [unix]\n        - {{ pin_subpackage('libabseil-static', exact=True) }}    # [win]\n    test:\n      commands:\n        # tested in other outputs\n        - echo \"hello\"\n  {% endif %}\n\nabout:\n  home: https://github.com/abseil/abseil-cpp\n  license: Apache-2.0\n  license_family: Apache\n  license_file: LICENSE\n  summary: Abseil Common Libraries (C++)\n  description: |\n    Abseil is an open-source collection of C++ code (compliant to C++11)\n    designed to augment the C++ standard library.\n  doc_url: https://github.com/abseil/abseil-cpp\n  dev_url: https://github.com/abseil/abseil-cpp\n\nextra:\n  recipe-maintainers:\n    - njzjz\n    - bluescarni\n    - xhochy\n    - h-vetinari\n  feedstock-name: abseil-cpp\n",
 "smithy_version": "3.21.0",
 "strong_exports": false,
 "url": "https://github.com/abseil/abseil-cpp/archive/20220623.0.tar.gz",
 "version": "20220623.0"
}