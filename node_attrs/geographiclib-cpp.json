{
 "PRed": [
  {
   "PR": {
    "__lazy_json__": "pr_json/675455763.json"
   },
   "data": {
    "bot_rerun": false,
    "migrator_name": "Version",
    "migrator_version": 0,
    "version": "1.52"
   },
   "keys": [
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "archived": false,
 "bad": "make_graph: render error No module named 'toml'\nTraceback (most recent call last):\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/feedstock_parser.py\", line 241, in populate_feedstock_attributes\n    parse_meta_yaml(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 167, in parse_meta_yaml\n    return _parse_meta_yaml_impl(\n  File \"/home/runner/work/autotick-bot/autotick-bot/cf-scripts/conda_forge_tick/utils.py\", line 239, in _parse_meta_yaml_impl\n    m = MetaData(tmpdir, config=config, variant=var)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 932, in __init__\n    self.parse_again(permit_undefined_jinja=True, allow_no_other_outputs=True)\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1007, in parse_again\n    self.meta = parse(self._get_contents(permit_undefined_jinja,\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/metadata.py\", line 1546, in _get_contents\n    from conda_build.jinja_context import context_processor, UndefinedNeverFail, FilteredLoader\n  File \"/usr/share/miniconda3/envs/run_env/lib/python3.9/site-packages/conda_build/jinja_context.py\", line 13, in <module>\n    import toml\nModuleNotFoundError: No module named 'toml'\n",
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "geographiclib-cpp",
 "hash_type": "sha256",
 "name": "geographiclib-cpp",
 "new_version": "1.52",
 "new_version_attempts": {
  "1.52": 1
 },
 "new_version_errors": {},
 "outputs_names": {
  "__set__": true,
  "elements": [
   "geographiclib-cpp"
  ]
 },
 "pinning_version": "2021.06.22.04.56.18",
 "raw_meta_yaml": "{% set name = \"GeographicLib\" %}\n# follow python version rules, see https://peps.python.org/pep-0440/\n{% set version = \"2.1.1\" %}\n{% set fullversion = \"2.1.1\" %}\n\npackage:\n  name: {{ name|lower }}-cpp\n  version: {{ version }}\n\nsource:\n  url: https://downloads.sourceforge.net/project/geographiclib/distrib-C++/GeographicLib-{{ fullversion }}.tar.gz\n  sha256: 28080fc48e1c76560eb2f8c306404de80c13d35687f676ff47a51695506e4a0a\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage('geographiclib-cpp', max_pin='x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n\ntest:\n  commands:\n    - GeoConvert --version\n    - GeodSolve -i --input-string \"1 2 3 4\"\n\nabout:\n  home: https://geographiclib.sourceforge.io\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.txt\n  summary: A small C++ library for geographic conversions\n  description: |\n    GeographicLib is a small C++ library for: geodesic and rhumb line\n    calculations; conversions between geographic, UTM, UPS, MGRS,\n    geocentric, and local cartesian coordinates; gravity (e.g.,\n    EGM2008) and geomagnetic field (e.g., WMM2020) calculations.\n  doc_url: https://geographiclib.sourceforge.io/C++/{{ fullversion }}\n\nextra:\n  recipe-maintainers:\n    - cffk\n",
 "smithy_version": "3.10.3",
 "strong_exports": false,
 "url": "https://downloads.sourceforge.net/project/geographiclib/distrib-C++/GeographicLib-2.1.1.tar.gz",
 "version": "2.1.1"
}