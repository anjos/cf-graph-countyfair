{
 "builtin": {
  "__set__": true,
  "elements": [
   "Queue",
   "StringIO",
   "Tkinter",
   "__future__",
   "abc",
   "argparse",
   "ast",
   "atexit",
   "base64",
   "bisect",
   "builtins",
   "cPickle",
   "cProfile",
   "codecs",
   "collections",
   "contextlib",
   "copy",
   "csv",
   "ctypes",
   "datetime",
   "enum",
   "errno",
   "fnmatch",
   "functools",
   "gc",
   "getopt",
   "getpass",
   "glob",
   "gzip",
   "hashlib",
   "heapq",
   "imghdr",
   "inspect",
   "io",
   "itertools",
   "json",
   "locale",
   "logging",
   "marshal",
   "math",
   "mmap",
   "multiprocessing",
   "multiprocessing.pool",
   "numbers",
   "operator",
   "os",
   "os.path",
   "pdb",
   "pickle",
   "platform",
   "pprint",
   "queue",
   "random",
   "re",
   "shutil",
   "signal",
   "socket",
   "string",
   "struct",
   "subprocess",
   "sys",
   "tarfile",
   "tempfile",
   "threading",
   "time",
   "timeit",
   "traceback",
   "types",
   "typing",
   "unicodedata",
   "unittest",
   "urllib",
   "uuid",
   "warnings",
   "xml.etree.ElementTree",
   "zipfile"
  ]
 },
 "questionable": {
  "__set__": true,
  "elements": [
   "ipython",
   "mock",
   "psutil",
   "py-cpuinfo",
   "setuptools",
   "tensorflow"
  ]
 },
 "questionable no match": {
  "__set__": true,
  "elements": [
   "google.cloud",
   "mlperf_compliance",
   "official.benchmark",
   "official.transformer",
   "roboschool",
   "spatial_transformer",
   "worldmodel_learner"
  ]
 },
 "required": {
  "__set__": true,
  "elements": [
   "absl-py",
   "acorns",
   "aiida-core",
   "contextlib2",
   "dateparser",
   "django-model-utils",
   "dm-sonnet",
   "envs",
   "flatten_json",
   "future",
   "gensim",
   "gin-config",
   "graph-tool",
   "gym",
   "h5py",
   "jupyter_core",
   "lxml",
   "matplotlib",
   "mnist",
   "mock",
   "networkx",
   "nltk",
   "numpy",
   "opencv",
   "pandas",
   "pillow",
   "portalocker",
   "protobuf",
   "pycocotools",
   "pygraphviz",
   "pymapd",
   "pyopengl",
   "pysoundfile",
   "python-configuration",
   "pyyaml",
   "requests",
   "resampy",
   "scikit-image",
   "scikit-learn",
   "scipy",
   "seaborn",
   "setuptools",
   "simupop",
   "six",
   "slim.datasets",
   "slim.nets",
   "tensorflow",
   "tf_object_detection"
  ]
 },
 "required no match": {
  "__set__": true,
  "elements": [
   "adversarial_attack",
   "adversarial_losses",
   "agent",
   "agents",
   "alignment",
   "all_models",
   "augmentation_transforms",
   "autoencoder_models.Autoencoder",
   "autoencoder_models.DenoisingAutoencoder",
   "autoencoder_models.VariationalAutoencoder",
   "automobile_data",
   "bandits.algorithms.bb_alpha_divergence_model",
   "bandits.algorithms.bf_variational_neural_bandit_model",
   "bandits.algorithms.bootstrapped_bnn_sampling",
   "bandits.algorithms.fixed_policy_sampling",
   "bandits.algorithms.linear_full_posterior_sampling",
   "bandits.algorithms.multitask_gp",
   "bandits.algorithms.neural_bandit_model",
   "bandits.algorithms.neural_linear_sampling",
   "bandits.algorithms.parameter_noise_sampling",
   "bandits.algorithms.posterior_bnn_sampling",
   "bandits.algorithms.uniform_sampling",
   "bandits.algorithms.variational_neural_bandit_model",
   "bandits.core.bandit_algorithm",
   "bandits.core.bayesian_nn",
   "bandits.core.contextual_bandit",
   "bandits.core.contextual_dataset",
   "bandits.data.data_sampler",
   "bandits.data.synthetic_data_sampler",
   "base",
   "baseline",
   "batch_reader",
   "beam_search",
   "block_base",
   "block_util",
   "blocks_binarizer",
   "blocks_entropy_coding",
   "blocks_lstm",
   "blocks_masked_conv2d",
   "blocks_masked_conv2d_lstm",
   "blocks_operator",
   "blocks_std",
   "bounds",
   "bpy",
   "build_data",
   "build_model",
   "cfgs",
   "cfgs.config_common",
   "cifar10",
   "cifar10_input",
   "cifar10_model",
   "cifar10_utils",
   "cifar_input",
   "code_loader",
   "common_flags",
   "cond_fn",
   "conditional_eval",
   "config_helper",
   "configuration",
   "context",
   "controller",
   "coords",
   "corpus_processing",
   "custom_estimator",
   "custom_ops",
   "custom_regression",
   "data_provider",
   "data_providers",
   "data_utils",
   "dataset_loader",
   "datasets",
   "datasets.nav_env",
   "datasets.nav_env_config",
   "decoder",
   "deep_speech_model",
   "deeplab",
   "deeplab.core",
   "deeplab.datasets",
   "deeplab.utils",
   "delf",
   "delf.protos",
   "delf.python",
   "demo_inference",
   "deployment",
   "distributions",
   "dnn_regression",
   "domain_adaptation.datasets",
   "domain_adaptation.domain_separation",
   "domain_adaptation.pixel_domain_adaptation",
   "domain_adaptation.pixel_domain_adaptation.hparams",
   "dragnn",
   "dragnn.core.ops.gen_dragnn_bulk_ops",
   "dragnn.core.ops.gen_dragnn_ops",
   "dragnn.mst.ops",
   "dragnn.protos",
   "dragnn.python",
   "dragnn.python.load_dragnn_cc_impl",
   "dragnn.python.load_mst_cc_impl",
   "dragnn.python.sentence_io",
   "dsn",
   "dualnet",
   "dualnet_model",
   "embedders",
   "entropy_coder.all_models",
   "entropy_coder.lib",
   "entropy_coder.model",
   "entropy_coder.progressive",
   "env_spec",
   "environments",
   "environments.ant",
   "environments.ant_maze_env",
   "environments.maze_env",
   "environments.point",
   "environments.point_maze_env",
   "envwrap",
   "errorcounter",
   "estimators",
   "estimators.get_estimator",
   "eval",
   "evaluation",
   "expert_paths",
   "export_inference_graph",
   "features",
   "fivo",
   "fivo.data",
   "fivo.models",
   "fivo.models.ghmm",
   "fivo.nested_utils",
   "fivo.test_utils",
   "fsns",
   "fsns_test",
   "full_episode_objective",
   "global_objectives",
   "go",
   "google.cloud",
   "google3",
   "google3.pyglib",
   "google3.testing.pybase",
   "google3.third_party.tensorflow_models.gan.mnist",
   "graphs",
   "grl_op_grads",
   "grl_op_shapes",
   "grl_ops",
   "gtp",
   "gtp_extensions",
   "gtp_wrapper",
   "gym_wrapper",
   "helper_utils",
   "icp_grad",
   "icp_op",
   "icp_test",
   "icp_util",
   "im2txt",
   "im2txt.inference_utils",
   "im2txt.ops",
   "imagenet",
   "inception",
   "inception.dataset",
   "inception.flowers_data",
   "inception.imagenet_data",
   "inception.slim",
   "inception.slim.scopes",
   "inception_preprocessing",
   "inception_resnet_v2",
   "inference_demo",
   "infogan_eval",
   "input",
   "input_generator",
   "inputs",
   "iris_data",
   "labeled_eval",
   "layers",
   "learned_optimizer.optimizer",
   "learned_optimizer.problems",
   "learner",
   "learning_unsupervised_learning",
   "learning_unsupervised_learning.architectures",
   "learning_unsupervised_learning.datasets",
   "lexnet_common",
   "lexnet_model",
   "lfads",
   "linear_regression",
   "linear_regression_categorical",
   "logger",
   "losses",
   "lstm_object_detection",
   "lstm_object_detection.inputs",
   "lstm_object_detection.lstm",
   "lstm_object_detection.metrics",
   "lstm_object_detection.models",
   "lstm_object_detection.models.lstm_ssd_mobilenet_v1_feature_extractor",
   "lstm_object_detection.protos",
   "lstm_object_detection.utils",
   "lstm_ops",
   "mathutils",
   "mcts",
   "mel_features",
   "memory",
   "metaopt",
   "metrics",
   "model",
   "model_base",
   "model_lib",
   "model_n2nmn",
   "model_n2nmn.assembler",
   "model_n2nmn.model",
   "model_n2nmn.modules",
   "model_params",
   "model_ptn",
   "model_rotator",
   "model_voxel_generation",
   "models",
   "more_local_weight_update",
   "morph_net.framework",
   "morph_net.network_regularizers",
   "morph_net.op_regularizers",
   "morph_net.testing",
   "nas_utils",
   "nets",
   "nets.inception_resnet_v2",
   "nets.inception_v1",
   "nets.inception_v2",
   "nets.inception_v3",
   "nets.inception_v4",
   "nets.mobilenet",
   "nets.nasnet",
   "network",
   "networks",
   "neural_gpu",
   "nn",
   "nn_ops",
   "nn_utils",
   "objective",
   "official.benchmark",
   "official.boosted_trees",
   "official.datasets",
   "official.keras_application_models",
   "official.mnist",
   "official.recommendation",
   "official.resnet",
   "official.resnet.keras",
   "official.transformer",
   "official.transformer.model",
   "official.transformer.utils",
   "official.transformer.utils.tokenizer",
   "official.utils.accelerator",
   "official.utils.data",
   "official.utils.export",
   "official.utils.flags",
   "official.utils.flags._conventions",
   "official.utils.logs",
   "official.utils.misc",
   "official.utils.testing",
   "official.wide_deep",
   "ops",
   "ops.icp_op",
   "optimizers",
   "parameters",
   "path_model",
   "plot_lfads",
   "policies",
   "policy",
   "prediction_input",
   "prediction_model",
   "premade_estimator",
   "preprocessing",
   "pretrain_mask_gan",
   "program_utils",
   "project",
   "protos",
   "pyassimp",
   "reader",
   "real_nvp_utils",
   "rebar",
   "regularization",
   "render.swiftshader_renderer",
   "replay",
   "replay_buffer",
   "resnet_model",
   "run_training",
   "selfplay_mcts",
   "sentiment_model",
   "seq2label_utils",
   "seq2seq_attention_decode",
   "seq2seq_attention_model",
   "seq2seq_lib",
   "sequence_layers",
   "sgf",
   "sgf_wrapper",
   "shake_drop",
   "shake_shake",
   "shapes",
   "single_task",
   "skip_thoughts",
   "skip_thoughts.data",
   "skip_thoughts.ops",
   "skipthoughts",
   "sox",
   "spatial_transformer",
   "standard_fields",
   "strategies",
   "string_int_label_map_pb2",
   "summaries",
   "summary_utils",
   "symmetries",
   "syntaxnet",
   "syntaxnet.load_parser_ops",
   "syntaxnet.ops",
   "syntaxnet.ops.gen_parser_ops",
   "syntaxnet.util",
   "synthetic_data_utils",
   "synthetic_model",
   "task_specific",
   "task_specific.word_level",
   "tensorflow_fold",
   "test_utils",
   "tf_agents",
   "tf_agents.environments",
   "tf_agents.utils",
   "tf_utils",
   "tfcode",
   "tfcode.cmp",
   "tfcode.cmp_summary",
   "tfcode.cmp_utils",
   "tfcode.distillation",
   "tfcode.nav_utils",
   "train",
   "train_mask_gan",
   "train_utils",
   "training",
   "trust_region",
   "unittest_utils",
   "utils_test",
   "valuerl",
   "valuerl_learner",
   "vecs",
   "vggish_input",
   "vggish_params",
   "vggish_postprocess",
   "vggish_slim",
   "vgsl_input",
   "vgsl_model",
   "vgslspecs",
   "wiki_data",
   "wmt_utils",
   "word2vec",
   "word2vec_optimized",
   "worldmodel",
   "wrn"
  ]
 }
}